https://www.javatpoint.com/python-audio-modules::python audio modules - javatpoint ? scroll to top home python if else for loop function array string regex list set tuple dictionary programs numpy interview questions python tutorial python tutorial python features python history python applications python install python example python variables python data types python keywords python literals python operators python comments python if else python loops python for loop python while loop python break python continue python pass python strings python lists python tuples python list vs tuple python sets python dictionary python functions python built-in functions python lambda functions python files i/o python modules python exceptions python date python regex python sending email read csv file write csv file read excel file write excel file python assert python list comprehension python collection module python math module python os module python random module python statistics module python sys module python ides python arrays command line arguments python magic method python stack & queue pyspark mllib python decorator python generators web scraping using python python json python itertools python multiprocessing how to calculate distance between two points using geopy gmail api in python how to plot the google map using folium package in python grid search in python python high order function nsetools in python python program to find the nth fibonacci number python opencv object detection python simpleimputer module second largest number in python python oops python oops concepts python object class python constructors python inheritance abstraction in python python mysql environment setup database connection creating new database creating tables insert operation read operation update operation join operation performing transactions python mongodb python mongodb python sqlite python sqlite python questions how to install python in windows how to reverse a string in python how to read csv file in python how to run python program how to take input in python how to convert list to string in python how to append element in the list how to compare two lists in python how to convert int to string in python how to create a dictionary in python how to create a virtual environment in python how to declare a variable in python how to install matplotlib in python how to install opencv in python how to print in same line in python how to read json file in python how to read a text file in python how to use for loop in python is python scripting language how long does it take to learn python how to concatenate two strings in python how to connect database in python how to convert list to dictionary in python how to declare a global variable in python how to reverse a number in python what is an object in python which is the fastest implementation of python how to clear python shell how to create a dataframes in python how to develop a game in python how to install tkinter in python how to plot a graph in python how to print pattern in python how to remove an element from a list in python how to round number in python how to sort a dictionary in python strong number in python how to convert text to speech in python bubble sort in python logging in python insertion sort in python binary search in python linear search in python python vs scala queue in python stack in python heap sort in python palindrome program in python program of cumulative sum in python merge sort in python python matrix python unit testing forensics & virtualization best books to learn python best books to learn django gcd of two number in python python program to generate a random string how to one hot encode sequence data in python how to write square root in python pointer in python python 2d array python memory management python libraries for data visualization how to call a function in python git modules in python top python frameworks for gaming python audio modules wikipedia module in python python random randrange() permutation and combination in python getopt module in python merge two dictionaries in python multithreading in python 3 static in python how to get the current date in python argparse in python python tqdm module caesar cipher in python tokenizer in python how to add two lists in python shallow copy and deep copy in python atom python contains in python label encoding in python django vs. node js python frameworks how to create a vector in python using numpy pickle module of python how to convert bytes to string in python python program to find anagram how to convert list to set python vs javascript python holidays module fuzzywuzzy python library dask python dask python (part 2) mode in python menu-driven programs in python python array vs. list what is duck typing in python pep 8 in python python user groups basic commands in python f string in python how brython works how to use brython in the browser arima model in python python modulus operator matlab vs. python method resolution order in python monkey patching in python python __call__ method python heapq module python substring project ideas for python beginners python faker fizz-buzz program in python tabula python python program to print prime factor of given number python program to print pascal triangle namedtuple in python ordereddict in python t-test in python python return statement getter and setter in python enum class in python destructors in python curve fit in python converting csv to json in python underscore (_) in python set vs list in python locating and executing modules flatten list in python pair plot in python data hiding in python python program to find intersection of two lists how to create requirements.txt file in python tic-tac-toe in python python asynchronous programming - asyncio and await python main() function strftime() function in python verbose flag in python regex python ast module python requests module - http request shutil module in python python epoch to datetime python del statement looping technique in python metaprogramming with metaclasses in python precision handling in python python join list strip() function in python gradient descent algorithm prettytable in python sentiment analysis in python convert python list to numpy arrays traceback in python time clock() method in python deque in python dictionary comprehension in python python data analytics python seek() method ternary operator in python how to calculate the area of the circle using python how to write in text file using python python keyerror python super() function max() function in python fraction module in python popular python framework to build api how to check python version python %s - string formatting python seaborn library countplot in python range() vs. xrange() python wordcloud package in python convert dataframe into list anova test in python python program to find compound interest ansible in python python important tips and tricks python coroutines double underscores in python re.search() vs re.findall() in python regex how to install statsmodels in python cos in python vif in python __add__ method in python ethical hacking with python class variable vs instance perfect number in python eol in python python program to convert hexadecimal string to decimal string different methods in python for swapping two numbers without using third variable how to change plot size in matplotlib how to get the zip code in python eel in python assignment operators in python speech recognition python yield vs return in python graphene python name mangling in python python combination without itertools python comprehensions influxdb in python kafka tutorial in python augmented assignment expressions in python python (x,y) software python event-driven programming python semaphore python sorted reverse automorphic number in python sizeof in python python program for accepting the strings which contains all vowels class-based views vs function-based views how to handle cookies in django agg() function in python amicable numbers in python context manager in python create bmi calculator using python string to binary in python what is script mode in python best python libraries for machine learning python program to display calendar of given year how to open url in python broken pipe error in python code template for creating objects in python python program to calculate the best time to buy and sell stock tuple to string in python kadane's algorithm in python loggers in django weather app in django missing data conundrum: exploration and imputation techniques different methods of array rotation in python what is operator overloading in python defaultdict in python operator module in python spinner widget in the kivy library of python number plate recognition using python obfuscating a python program convert string to dictionary in python convert string to json in python dbscan algorithm in python how to write a code for printing the python exception/error hierarchy principal component analysis (pca) with python python program to find number of days between two given dates object recognition using python python vlc module set to list in python string to int in python internet of things with python python pysftp module amazing hacks of python average of list in python check installed modules in python choice() in python convert list to dataframe in python convert string to float in python decorators with parameters in python dynamic typing in python fabs in python how to remove decimal in python python closure python glob module writing a python module modules vs packages in python snmp module in python average of list in python append vs extend vs insert in python how to remove duplicates from a list in python remove multiple characters from a string in python shuffle in python floor() and ceil() functions in python sqrt(): math function of python python yfinance module difflib module in python convert the column type from string to datetime format in pandas dataframe python wxpython module random uniform python relational operators in python string to list in python chatbot in python how to convert float to int in python multiply all elements in list of python module vs function in python reverse a tuple in python tuple to dictionary in python datetime.timedelta() function of python python bio module python dash module how to select rows in pandas dataframe based on conditions typecasting in python dateutil module in python getpass module in python python wand library generate a qr code using python best python pdf library python cachetools module python cmdparser module python dash module python emoji module python nmap module python pylab module working with pdf files in python pdf handling in python manipulating pdf using python list all functions from a python module python list of dictionaries python shelve module creating interactive pdf forms using python python newspaper module how to connect wi-fi using python best python libraries used for ethical hacking windows system administration management using python indentation error in python python imaplib module python lxml module python mayavi module python os.listdir() method python modules for automation data visualization in python using bokeh library how to plot glyphs over a google map by using bokeh library in python how to plot a pie chart using bokeh library in python how to read contents of pdf using ocr in python grammar and spell checker in python converting html to pdf files using python readlines in python how to plot multiple lines on a graph using bokeh in python bokeh.plotting.figure.circle_x() function in python bokeh.plotting.figure.diamond_cross() function in python how to plot rays on a graph using bokeh in python image steganography using python inconsistent use of tabs and spaces in indentation how to plot multiple plots using bokeh in python how to make an area plot in python using bokeh python chempy module python memory-profiler module python phonenumbers module python platform module typeerror string indices must be an integer time series forecasting with prophet in python python pexpect module python optparse module int object is not iterable. python peewee library some cryptocurrency libraries for python building a blockchain using python huffman coding using python nested dictionary in python collections.userstring in python how to customize legends with matplotlib matplotlib legend in subplot morphological operations in image processing in python role of python in artificial intelligence python instagramy module python pprint module python primepy module android development using python python fbchat library artificial intelligence in cybersecurity: pitting algorithms vs algorithms understanding the recognition pattern of artificial intelligence when and how to leverage lambda architecture in big data why should we learn python for data science how to change the "legend" position in matplotlib how to check if element exists in list in python how to check spellings of given words using enchant in python python program to count the number of matching characters in a pair of string ping pong game using turtle in python python function to display calendar python program for calculating the sum of squares of first n natural numbers python program for how to check if a given number is fibonacci number or not randint() function in python visualize tiff file using matplotlib and gdal in python rarfile module in python stemming words using python python program for word guessing game blockchain in healthcare: innovations & opportunities snake game in python using turtle module how to find armstrong numbers between two given integers celery tutorial using python rsme - root mean square error in python building a twitter bot using python python progressbar module python pronouncing module python pyautogui module python pyperclip module how to generate uuid in python python top 10 libraries to learn in 2022 reading netcdf data using python the reprlib module in python how to take multiple input from user in python python zlib library python queue module python yaml parser effective root searching algorithms in python python bz2 module python ipaddress module python pylint module how to process xml in python bisect algorithm functions in python creating and updating powerpoint presentation using python how to change the size of figure drawn with matplotlib keyboard module in python python pyfiglet module creating an mcq quiz game in python statistic with python what is gil in python basic python for java developers how to download youtube videos using python scripts traffic flow simulation in python how to merge and sort two lists in python metacharacters in python write the python program to print all possible combination of integers modulo string formatting in python counters in python python pyautogui library how to draw the mandelbrot set in python python dbm module webcam motion detector in python graphql implementation in django how to implement protobuf in python pyqt library in python how to prettify data structures with pretty print in python encrypt a password in python using bcrypt pyramid framework in python building a telegram bot using python web2py framework in python python os.chdir() method balancing parentheses in python how to provide multiple constructors in python classes profiling the python code python tkinter (gui) python tkinter tkinter button tkinter canvas tkinter checkbutton tkinter entry tkinter frame tkinter label tkinter listbox tkinter menubutton tkinter menu tkinter message tkinter radiobutton tkinter scale tkinter scrollbar tkinter text tkinter toplevel tkinter spinbox tkinter panedwindow tkinter labelframe tkinter messagebox python web blocker introduction building python script script deployment on linux script deployment on windows python mcq python mcq python mcq part 2 related tutorials numpy tutorial django tutorial flask tutorial pandas tutorial pytorch tutorial pygame tutorial matplotlib tutorial opencv tutorial openpyxl tutorial python cgi python design pattern python programs python programs next ? ? prev python audio modules python programming language is a leading nowadays because of its user - friendly features. python also has many interesting modules and libraries by which users can do a lot by using them. one of the most interesting features of the python language is its audio modules. in this article, we will discuss the various types of audio modules and their unique features and advantages. this article will cover 10 different types of audio modules and libraries in python: ' pyo pyaudio dejavu mingus hypersonic pydub simpleaudio winsound python - sounddevice playsound let's understand the above audio modules one by one. 1. pyo pyo is a module of python is written in the c programming language for the creation of a digital signal processing script. this module of python contains classes for processing a wide variety of audio signal types. due to this, users are able to import signal processing chains directly in python scripts or projects and can manipulate the audio signals in real time by using an interpreter. the tool of pyo modules in python have primitives such as mathematical operations, basic signal processing like delays, synthesis generators, filters, and much more. but it also complexes the algorithms to develop sound granulation and many other artistic audio operations. for example: 
# to play a sound file:
from pyo import *
sound = server ( ) .boot ( )
sound.start  ( )
sound_file = sfplayer ( " path /to /users /sound.aif ", speed = 1, loop = true ).out ( )
# for granulating an audio buffer:
sound = server ( ) .boot ( )
sound_nd = sndtable ( " path /to /users /sound.aif " )
ev = hanntable ( ) 
ps = phasor ( freq = sound_nd.getrate ( )*.25, ml = sound_nd.getsize ( ) )
dr = noise ( mul = .001, add = .1 )
granulate = granulator ( sound_nd, ev, [ 1, 1.001 ] , ps, dr, 32, ml = .1 ).out ( )
# to generate melodies:
sound = server ( ) .boot ( )
sound.start ( )
wv = squaretable ( )
ev = costable ( [ ( 0, 0 ) , ( 100 , 1 ) , ( 500 , 0.3 ) , ( 8391 , 0 ) ] )
mt = metro ( 0.135 , 12 ).play ( )
ap = trigenv ( mt , table = ev , dr = 1 , ml = .1 )
pt = trigxnoisemidi ( mt , dist = ' loopseg ' , x1 = 20 , scale = 1 , mrange = ( 47, 74 ) )
out = osc ( table = wav , freq = pt , ml = ap ).out ( )
 2. pyaudio pyaudio is a python library which is an open - source and cross - platform audio input - output. it has a wide range of functionalities, which are audio - related and mainly focusing on segmentation, features extraction, classification and visualization issues. by using the pyaudio library, users can classify unknown sounds, perform supervised and unsupervised segmentation, extract audio features and representations, detect audio events and filter out silence periods from the long recordings, apply dimensionality reduction to visualize audio data and content similarities and much more. this library provides bindings for portaudio. the users can use this library for playing and recording audio on different platforms, like windows, mac and linux. for playing audio by using the pyaudio library, the user has to write to a .stream. for example: 
import pyaudio
import wave

filename = ' example.wav '

# set chunk size of 1024 samples per data frame
chunksize = 1024  

# now open the sound file, name as wavefile
wavefile = wave.open ( filename, ' rb ' )

# create an interface to portaudio
portaudio = pyaudio.pyaudio ( )

# open a .stream object to write the wav file to play the audio using pyaudio
# in this code, 'output = true' means that the audio will be played rather than recorded
streamobject = portaudio.open(format = portaudio.get_format_from_width ( wavefile.getsampwidth ( ) ),
                channels = wavefile.getnchannels ( ),
                rate = wavefile.getframerate ( ),
                output = true ( )

# read data in chunksize
data_audio = wavefile.readframes ( chunksize )

# play the audio by writing the audio data to the streamobject
while data != '':
    streamobject.write ( data_audio )
    data_audio = wavefile.readframes ( chunksize )

# close and terminate the streamobject
streamobject.close ( )
portaudio.terminate ( )
 here, users can notice that playing audio using the pyaudio library can be a bit complex, comparing the other audio playing libraries. that's why this library might not be the first choice of users for playing the audio in their projects or applications. although, as pyaudio library provides more low - level control, which makes it possible for the users to set the parameters for their input and output devices. this library also lets the users check the load of their cpu and input - output activity. pyaudio library also allows its users to play and record the audio in callback mode. where a stated callback function is called when new data is needed for playback and available for recording. these are the features of the pyaudio library, which makes it different from other audio libraries and modules. this library is specifically used if the user wants to play the audio beyond simple playback. 3. dejavu dejavu is an audio fingerprinting module in python. it is an open - source module. this module can remember the recorded audio by listening to it once, and this module stores the audio in the database. after this, when a song is played, or microphone input or a disk file, dejavu tries to match the audio with the fingerprints stored in the database and return the song or recording which was played earlier. dejavu module surpasses at the recognition of particular signals with a realistic amount of noise. there are two forms in which user can use dejavu to recognize the audio: user can recognize the audio by reading and processing the audio files on disk. or, user can use the computer's microphone. for example: 
#user should create a mysql database where dejavu can store fingerprints of the audio. 
#on user local setup:
$ mysql -u root -p
enter password: *************
mysql> here, user should create a database dejavu;
 now users can start fingerprinting their audio collection! 
from dejavu import dejavu
config = {
    " database ": {
         " host ": " 125.0.1.1 ",
         " user ": " root ",
         " password ": < password imported in local setup >, 
         " database ": < name of the database user has created in local setup >,
     }
}
dejv = dejavu ( config )
 4. mingus mingus is a package in python. it is used by many programmers, musicians' researchers and composers for making and examining the music and songs. this package is a cross - platform and very advanced music theory representing package for python along with musical instrument digital interface files and playback support. mingus package can be used to play with music theory, for education tools, to build editors for songs, and in many other applications and software's in which users want to import the function of processing and playing music. this package is a music theory, and it includes topics like scales, progressions, chords and intervals. this package tests these components and is used for generating and recognizing the musical essentials with the help of convenient shorthand. for example: 
import mingus.core.notes as notes_m
# for valid notes
notes_m.is_valid_note("c") 
notes_m.is_valid_note("d#") 
notes_m.is_valid_note("eb")
notes_m.is_valid_note("fbb")
notes_m.is_valid_note("g##")
 output: true
true
true
true
true
 # for invalid notes: 
notes_m.is_valid_note("c")
notes_m.is_valid_note("d #")
notes_m.is_valid_note("e-b")
 output: false
false
false
 5. hypersonic hypersonic is a framework of python and c language. this is used for developing and operating the sound processing pipelines, which are intended for real - time control. this framework is a low - level in which every byte count, and this also includes objects for soundcard, filters memory operations, file - io, and oscillators. this framework is operated on linux and osx operating systems. 6. pydub pydub is a python library used for manipulating audios and adding effects to it. this library is a very simple and easy but high - level interface which is based on ffmpeg and inclined by jquery. this library is used for adding id3 tags in audio, slicing it, and concatenating the audio tracks. pydub library supports 2.6, 2.7, 3.2 and 3.3 versions of python. however, users can open and save the wav file by using the pydub library without any dependencies. but users are required to install an audio playback package if they want to play audio. the following code can be used to play a wav file with pydub: for example: 
from pydub import audiosegment
from pydub.playback import play

sound_audio = audiosegment.from_wav ( ' example.wav ' )
play ( sound_audio )
 if user wants to play other audio files formats like mp3 files, they should install libav or ffmpeg. after installing ffmpeg, the user needs to make a small change in the code to play an mp3 file. for example: 
from pydub import audiosegment
from pydub.playback import play

sound_audio = audiosegment.from_mp3 ( 'example.mp3 ' ) 
play ( sound_audio )
 by using the audiosegment.from_file (file_name, file_type ) statement, users can play any format supported by ffmpeg of the audio file. for example: 
# users can play a wma file:
sound = audiosegment.from_file ( 'example.wma ', ' wma ' )
 pydub library also allows the users to save the audio in different file formats. users can also calculate the length of the audio files. user can use cross - fades in the audio by using this library. 7. simpleaudio simpleaudio is a python library which is a cross - platform. this library is also used for playing back wav files without any dependencies. simpleaudio library waits for the file to finish the playing audio in wav format before termination of the script. for example: 
import simpleaudio as simple_audio

filename = ' example.wav '
wave_object = simple_audio.waveobject.from_wave_file ( filename )
play_object = wave_object.play ( )
play_object.wait_done ( )  
# wait until audio has finished playing
 in a wav format file, a categorization of bits is stored which represents the raw audio data, and headers along with metadata in resource interchange file format is also stored. the definitive record of the industry is to store every audio sample, which is a particular data point related to air pressure, as at 44200 samples per second, a 16 - bit value, for cd recordings. for reducing the size of the file, it is sufficient for storing few recordings like human speech, at a lower sampling rate, like 8000 samples per second. however, the higher sound frequencies cannot be represented much accurately. some of the libraries and modules discussed in this article play and records the bytes objects, and some of them use numpy arrays to record raw audio data. both resemble to a categorization of data points that can be played back at a definite sample rate to play audio. in a numpy array, every element can contain a 16 - bit value equivalent to an individual sample, and for the bytes object, each sample is stored as a set of two 8 - bit values. the important difference between these two data types is that the numpy arrays are mutable, and the bytes objects are immutable, which makes the latter more suitable for generating audios and processing the more complex signals. users can play numpy arrays and bytes object in the simpleaudio library by using simpleaudio.play_buffer ( ) statement. but, before this, users should make sure that they have already installed numpy and simpleaudio libraries. for example: to generate a numpy array corresponding to a 410 hz tone. 
import numpy as numpy
import simpleaudio as simple_audio

frequency = 410  # user's played note will be 410 hz
fsample = 44200  # 44200 samples per second will be played
second = 5  # note duration of 5 seconds

# generate array with second*sample_rate steps, ranging between 0 and seconds
tp = numpy.linspace ( 0 , second , second * fsample, false )

# to generate a 410 hz sine wave
note = numpy.sin ( frequency * tp * 2 * numpy.pi )

# user should ensure that highest value is in 16-bit range
audio = note * (2**15 - 1) / numpy.max ( numpy.abs ( note ) )
# now, convert to 16-bit data
ado = audio.astype ( numpy.int16 )

# to start the playback
play_object = simple_audio.play_buffer ( ado , 1 , 2 , fsample )

# user now waits for playback to finish before exiting
play_object.wait_done ( )
 8. winsound winsound is a module in python which is used for accessing the basic sound - playing machinery of the windows operating system. in the winsound module, the wav file can be played in just a few lines of code. for example: 
import winsound

filename = ' example.wav '
winsound.playsound ( filename, winsound.snd_filename )
 winsound module does not support any file format except wav files. it allows the users to beep their speakers by using winsound.beep ( frequency, duration ) statement. for example: 
# user can beep a 1010 hz tone for 110 milliseconds:
import winsound

winsound.beep ( 1010, 110 )  # beep at 1010 hz for 110 milliseconds 
 9. python-sounddevice the python - sounddevice is a python module for cross - platform audio play back. this module provides bindings for the portaudio library and has some suitable functions to play and record numpy arrays, which contain audio signals. if the user wants to play a wav file, they should install numpy and soundfile to open an audio file format in wav files as numpy arrays. for example: 
import sounddevice as sound_device
import soundfile as sound_file

filename = ' example.wav '
# now, extract the data and sampling rate from file
data_set, fsample = sound_file.read ( filename , dtype = ' float32 ' )  
sound_device.play ( data_set, fsample )
# wait until file is done playing
status = sound_device.wait ( )  
 the statement sound_file.read ( ) used for extracting the raw audio data and also the sampling rate of the file, which are stored in resource interchange file format header. sound_device.wait ( ) statement is used to make sure that the script is only terminated after the audio finishes playing. 10. playsound playsound is a python module by which users can play sound in a single line of code. it is a cross - platform module which is a single function without any dependencies for playing sounds and audios. for example: 
from playsound import playsound

playsound ( ' example.wav ' )
 the playsound module is used for files formatted in wav file and mp3 file, and it can also work with other file formats. conclusion: in this article, we have discussed various types of python library and modules which are used for playing and recording different types of audio files and sounds. here, we have explained the different features and importance of each library and modules for playing sounds in the project of developing and modifying applications and software. next topicwikipedia module in python ? prev next ? for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
