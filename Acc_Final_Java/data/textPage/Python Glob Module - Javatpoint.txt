https://www.javatpoint.com/python-glob-module::python glob module - javatpoint ? scroll to top home python if else for loop function array string regex list set tuple dictionary programs numpy interview questions python tutorial python tutorial python features python history python applications python install python example python variables python data types python keywords python literals python operators python comments python if else python loops python for loop python while loop python break python continue python pass python strings python lists python tuples python list vs tuple python sets python dictionary python functions python built-in functions python lambda functions python files i/o python modules python exceptions python date python regex python sending email read csv file write csv file read excel file write excel file python assert python list comprehension python collection module python math module python os module python random module python statistics module python sys module python ides python arrays command line arguments python magic method python stack & queue pyspark mllib python decorator python generators web scraping using python python json python itertools python multiprocessing how to calculate distance between two points using geopy gmail api in python how to plot the google map using folium package in python grid search in python python high order function nsetools in python python program to find the nth fibonacci number python opencv object detection python simpleimputer module second largest number in python python oops python oops concepts python object class python constructors python inheritance abstraction in python python mysql environment setup database connection creating new database creating tables insert operation read operation update operation join operation performing transactions python mongodb python mongodb python sqlite python sqlite python questions how to install python in windows how to reverse a string in python how to read csv file in python how to run python program how to take input in python how to convert list to string in python how to append element in the list how to compare two lists in python how to convert int to string in python how to create a dictionary in python how to create a virtual environment in python how to declare a variable in python how to install matplotlib in python how to install opencv in python how to print in same line in python how to read json file in python how to read a text file in python how to use for loop in python is python scripting language how long does it take to learn python how to concatenate two strings in python how to connect database in python how to convert list to dictionary in python how to declare a global variable in python how to reverse a number in python what is an object in python which is the fastest implementation of python how to clear python shell how to create a dataframes in python how to develop a game in python how to install tkinter in python how to plot a graph in python how to print pattern in python how to remove an element from a list in python how to round number in python how to sort a dictionary in python strong number in python how to convert text to speech in python bubble sort in python logging in python insertion sort in python binary search in python linear search in python python vs scala queue in python stack in python heap sort in python palindrome program in python program of cumulative sum in python merge sort in python python matrix python unit testing forensics & virtualization best books to learn python best books to learn django gcd of two number in python python program to generate a random string how to one hot encode sequence data in python how to write square root in python pointer in python python 2d array python memory management python libraries for data visualization how to call a function in python git modules in python top python frameworks for gaming python audio modules wikipedia module in python python random randrange() permutation and combination in python getopt module in python merge two dictionaries in python multithreading in python 3 static in python how to get the current date in python argparse in python python tqdm module caesar cipher in python tokenizer in python how to add two lists in python shallow copy and deep copy in python atom python contains in python label encoding in python django vs. node js python frameworks how to create a vector in python using numpy pickle module of python how to convert bytes to string in python python program to find anagram how to convert list to set python vs javascript python holidays module fuzzywuzzy python library dask python dask python (part 2) mode in python menu-driven programs in python python array vs. list what is duck typing in python pep 8 in python python user groups basic commands in python f string in python how brython works how to use brython in the browser arima model in python python modulus operator matlab vs. python method resolution order in python monkey patching in python python __call__ method python heapq module python substring project ideas for python beginners python faker fizz-buzz program in python tabula python python program to print prime factor of given number python program to print pascal triangle namedtuple in python ordereddict in python t-test in python python return statement getter and setter in python enum class in python destructors in python curve fit in python converting csv to json in python underscore (_) in python set vs list in python locating and executing modules flatten list in python pair plot in python data hiding in python python program to find intersection of two lists how to create requirements.txt file in python tic-tac-toe in python python asynchronous programming - asyncio and await python main() function strftime() function in python verbose flag in python regex python ast module python requests module - http request shutil module in python python epoch to datetime python del statement looping technique in python metaprogramming with metaclasses in python precision handling in python python join list strip() function in python gradient descent algorithm prettytable in python sentiment analysis in python convert python list to numpy arrays traceback in python time clock() method in python deque in python dictionary comprehension in python python data analytics python seek() method ternary operator in python how to calculate the area of the circle using python how to write in text file using python python keyerror python super() function max() function in python fraction module in python popular python framework to build api how to check python version python %s - string formatting python seaborn library countplot in python range() vs. xrange() python wordcloud package in python convert dataframe into list anova test in python python program to find compound interest ansible in python python important tips and tricks python coroutines double underscores in python re.search() vs re.findall() in python regex how to install statsmodels in python cos in python vif in python __add__ method in python ethical hacking with python class variable vs instance perfect number in python eol in python python program to convert hexadecimal string to decimal string different methods in python for swapping two numbers without using third variable how to change plot size in matplotlib how to get the zip code in python eel in python assignment operators in python speech recognition python yield vs return in python graphene python name mangling in python python combination without itertools python comprehensions influxdb in python kafka tutorial in python augmented assignment expressions in python python (x,y) software python event-driven programming python semaphore python sorted reverse automorphic number in python sizeof in python python program for accepting the strings which contains all vowels class-based views vs function-based views how to handle cookies in django agg() function in python amicable numbers in python context manager in python create bmi calculator using python string to binary in python what is script mode in python best python libraries for machine learning python program to display calendar of given year how to open url in python broken pipe error in python code template for creating objects in python python program to calculate the best time to buy and sell stock tuple to string in python kadane's algorithm in python loggers in django weather app in django missing data conundrum: exploration and imputation techniques different methods of array rotation in python what is operator overloading in python defaultdict in python operator module in python spinner widget in the kivy library of python number plate recognition using python obfuscating a python program convert string to dictionary in python convert string to json in python dbscan algorithm in python how to write a code for printing the python exception/error hierarchy principal component analysis (pca) with python python program to find number of days between two given dates object recognition using python python vlc module set to list in python string to int in python internet of things with python python pysftp module amazing hacks of python average of list in python check installed modules in python choice() in python convert list to dataframe in python convert string to float in python decorators with parameters in python dynamic typing in python fabs in python how to remove decimal in python python closure python glob module writing a python module modules vs packages in python snmp module in python average of list in python append vs extend vs insert in python how to remove duplicates from a list in python remove multiple characters from a string in python shuffle in python floor() and ceil() functions in python sqrt(): math function of python python yfinance module difflib module in python convert the column type from string to datetime format in pandas dataframe python wxpython module random uniform python relational operators in python string to list in python chatbot in python how to convert float to int in python multiply all elements in list of python module vs function in python reverse a tuple in python tuple to dictionary in python datetime.timedelta() function of python python bio module python dash module how to select rows in pandas dataframe based on conditions typecasting in python dateutil module in python getpass module in python python wand library generate a qr code using python best python pdf library python cachetools module python cmdparser module python dash module python emoji module python nmap module python pylab module working with pdf files in python pdf handling in python manipulating pdf using python list all functions from a python module python list of dictionaries python shelve module creating interactive pdf forms using python python newspaper module how to connect wi-fi using python best python libraries used for ethical hacking windows system administration management using python indentation error in python python imaplib module python lxml module python mayavi module python os.listdir() method python modules for automation data visualization in python using bokeh library how to plot glyphs over a google map by using bokeh library in python how to plot a pie chart using bokeh library in python how to read contents of pdf using ocr in python grammar and spell checker in python converting html to pdf files using python readlines in python how to plot multiple lines on a graph using bokeh in python bokeh.plotting.figure.circle_x() function in python bokeh.plotting.figure.diamond_cross() function in python how to plot rays on a graph using bokeh in python image steganography using python inconsistent use of tabs and spaces in indentation how to plot multiple plots using bokeh in python how to make an area plot in python using bokeh python chempy module python memory-profiler module python phonenumbers module python platform module typeerror string indices must be an integer time series forecasting with prophet in python python pexpect module python optparse module int object is not iterable. python peewee library some cryptocurrency libraries for python building a blockchain using python huffman coding using python nested dictionary in python collections.userstring in python how to customize legends with matplotlib matplotlib legend in subplot morphological operations in image processing in python role of python in artificial intelligence python instagramy module python pprint module python primepy module android development using python python fbchat library artificial intelligence in cybersecurity: pitting algorithms vs algorithms understanding the recognition pattern of artificial intelligence when and how to leverage lambda architecture in big data why should we learn python for data science how to change the "legend" position in matplotlib how to check if element exists in list in python how to check spellings of given words using enchant in python python program to count the number of matching characters in a pair of string ping pong game using turtle in python python function to display calendar python program for calculating the sum of squares of first n natural numbers python program for how to check if a given number is fibonacci number or not randint() function in python visualize tiff file using matplotlib and gdal in python rarfile module in python stemming words using python python program for word guessing game blockchain in healthcare: innovations & opportunities snake game in python using turtle module how to find armstrong numbers between two given integers celery tutorial using python rsme - root mean square error in python building a twitter bot using python python progressbar module python pronouncing module python pyautogui module python pyperclip module how to generate uuid in python python top 10 libraries to learn in 2022 reading netcdf data using python the reprlib module in python how to take multiple input from user in python python zlib library python queue module python yaml parser effective root searching algorithms in python python bz2 module python ipaddress module python pylint module how to process xml in python bisect algorithm functions in python creating and updating powerpoint presentation using python how to change the size of figure drawn with matplotlib keyboard module in python python pyfiglet module creating an mcq quiz game in python statistic with python what is gil in python basic python for java developers how to download youtube videos using python scripts traffic flow simulation in python how to merge and sort two lists in python metacharacters in python write the python program to print all possible combination of integers modulo string formatting in python counters in python python pyautogui library how to draw the mandelbrot set in python python dbm module webcam motion detector in python graphql implementation in django how to implement protobuf in python pyqt library in python how to prettify data structures with pretty print in python encrypt a password in python using bcrypt pyramid framework in python building a telegram bot using python web2py framework in python python os.chdir() method balancing parentheses in python how to provide multiple constructors in python classes profiling the python code python tkinter (gui) python tkinter tkinter button tkinter canvas tkinter checkbutton tkinter entry tkinter frame tkinter label tkinter listbox tkinter menubutton tkinter menu tkinter message tkinter radiobutton tkinter scale tkinter scrollbar tkinter text tkinter toplevel tkinter spinbox tkinter panedwindow tkinter labelframe tkinter messagebox python web blocker introduction building python script script deployment on linux script deployment on windows python mcq python mcq python mcq part 2 related tutorials numpy tutorial django tutorial flask tutorial pandas tutorial pytorch tutorial pygame tutorial matplotlib tutorial opencv tutorial openpyxl tutorial python cgi python design pattern python programs python programs next ? ? prev python glob module in python, we have many in-built modules for performing various tasks, and one of such tasks we want to perform with the python modules is finding and locating all the files present in our system, which follows a similar pattern. this similar pattern can be a file extension, the file name's prefix, or any similarity between two or many files. we have many different python modules with which we can easily perform this task using a python program, but not all the modules are as efficient as others. in this tutorial, we are going to learn about one of such efficient modules, i.e., glob module in python, with which we can perform file matching with a specific pattern by using it inside a program. we will learn in detail about the glob module in python, how we can use it inside a program, what its key features are and the application of this module. glob module in python with the help of the python glob module, we can search for all the path names which are looking for files matching a specific pattern (which is defined by us). the specified pattern for file matching is defined according to the rules dictated by the unix shell. the result obtained by following these rules for a specific pattern file matching is returned in the arbitrary order in the output of the program. while using the file matching pattern, we have to fulfil some requirements of the glob module because the module can travel through the list of the files at some location in our local disk. the module will mostly go through those lists of the files in the disk that follow a specific pattern only. pattern matching functions in python, we have several functions which we can use to list down the files that match with the specific pattern which we have defined inside the function in a program. with the help of these functions, we can get the result list of the files which will match the given pattern in the specified folder in an arbitrary order in the output. we will discuss the following such functions in this section: fnmatch() scandir() path.expandvars() path.expanduser() the first two functions present in the above-given list, i.e., fnmatch.fnmatch() and os.scandir() function, is actually used to perform the pattern matching task and not by invoking the sub-shell in the python. these two functions perform the pattern matching task and get the list of all filenames and that too in arbitrary order. here is a catch that the glob module treats as special cases for all the files which names begin with a dot (.) which is very unlikely in the fnmatch.fnmatch() function. the last two functions are given in the list, i.e., os.path.expandvars() and os.path.expanduser() function can be used for the shell and tilde variable expansion in the filename pattern-matching task. rules of pattern if any of us thinks that we can define or use any pattern to perform the pattern matching filename task, then let us clarify here that it is not possible. we can't define any pattern or use any pattern to collect the list of files with the same. we have to follow a specific set of rules while defining the pattern for the filename pattern matching functions in the glob module. in this section, we will discuss all such rules which we have to keep in mind and adhere them while defining a pattern for filename pattern matching functions. we will only discuss these rules briefly and don't go in-depth about them as they are not our primary focus in this tutorial. following are set of rules for the pattern that we define inside the glob module's pattern matching functions: we have to follow all the standard set of rules of the unix path expansion in the pattern matching. the path we define inside the pattern should be either absolute or relative, and we can't define any unclear path inside the pattern. the special characters allowed inside the pattern are only two wild-cards, i.e., '*, ?' and the normal characters that can be expressed inside the pattern are expressed in []. the rules of the pattern for glob module functions are applied to the filename segment (which is provided in the functions), and it stops at the path separator, i.e., '/' of the files. these are some general rules for the patterns we define inside the glob module functions for filename pattern matching tasks, and we have to follow these set of rules in order to perform the task successfully. applications of glob module we have already discussed how pattern matching is very helpful for us when we are looking for similar files on our disk. here, we will discuss the applications of the glob module and how it is very helpful to us. following are some listed applications of the python glob module, and we can use this module in the given functions: sometimes, we want to search for a file that has a certain prefix in its name, any common string in the middle of the names of many files or have the same certain extension. now, to perform this task, we may have to write a code that will scan the whole directory and then it will produce the result. instead of it, the glob module is going to be very helpful in this case as we can use the functions of the glob module and perform this task very easily and can save our time. other than this, the glob module is also very useful when one of our programs have to look for the list of all the files in a given file system with the names of the files matching a similar pattern. glob module can easily perform this task and that too without opening the result of the program in other sub-shell. so, by looking at the application of the glob module, we can say that how important this module is for us and where we can use it to reduce the complexity of the code and save our time. glob module functions now, we will discuss various more functions of the glob module and understand their working inside a python program. we will also learn that how these functions help us in the pattern matching task. look at the following list of functions that we have in the glob module, and with the help of these functions, we can carry out the task of filename pattern matching very smoothly: iglob() glob() escape() now, we will briefly discuss these functions and then understand the implementation of these functions by using them inside a python program. we will use each of the above- given functions in an example program and get the list of file names following a similar pattern (that we will define in the function) in the output. 1. iglob() function: the iglob() function of the glob module is very helpful in yielding the arbitrary values of the list of files in the output. we can create a python generator with the iglob() method. we can use the python generator created by the glob module to list down the files under a given directory. this function also returns an iterator when called, and the iterator returned by it yields the values (list of files) without storing all of the filenames simultaneously. syntax: following is the syntax for using the iglob() function of glob module inside a python program: 
iglob(pathname, *, recursive=false)
 as we can see in the syntax of iglob() function, it takes a total of three parameters in it, which can be defined as given below: (i) pathname: the pathname parameter is the optional parameter of the function, and we can even leave it while we are working on the file directory that is the same as where our python is installed. we have to define the pathname from where we have to collect the list of files that following a similar pattern (which is also defined inside the function). (ii) recursive: it is also an optional parameter for the iglob() function, and it takes only bool values (true or false) in it. the recursive parameter is used to set if the function is following the recursive approach for finding file names or not. (iii) '*': this is the mandatory parameter of the iglob() function as here we have to define the pattern for which the iglob() function will collect the file names and list them down in the output. the pattern we define inside the iglob() function (such as the extension of file) for the pattern matching should start with the '*' symbol. now, let's use this iglob() function in an example program so that we can understand its implementation and function in a better way. example 1: look at the following python program with the implementation of iglob() function: 
# import glob module in the program
import glob as gb
# initialize a variable
invar = gb.iglob("*.py") # set pattern in iglob() function
# returning class type of variable
print(type(invar))
# printing list of names of all files that matched the pattern
print("list of the all the files in the directory having extension .py: ")
for py in invar: 
    print(py)
 output: <class 'generator'>
list of the all the files in the directory having extension .py: 
adding.py
changing.py
code#1.py
code#2.py
code-3.py
code-4.py
code.py
code37.py
code_5.py
code_6.py
configuring.py
 explanation: we have first imported the glob module so that we can use the iglob() function of it in the program. after that, we have initialized a variable where we used the iglob() function, and inside the iglob() function, we have defined the pattern for which the function will perform filename pattern matching. the pattern we have defined in the iglob() function is all files with a .py extension, i.e., "*.py". after that, we have returned the class type of the variable we have initialized. after that, we have used a for loop on the variable to print the list of all the filenames that have matched by the iglob() function for the pattern we have defined in it. as we can see in the output, the first program has printed the class type of initialized variable, and then it printed the list of the files with the ".py" extension. 2. glob() function: with the help of the glob() function, we can also get the list of files that matching a specific pattern (we have to define that specific pattern inside the function). the list returned by the glob() function will be a string that should contain a path specification according to the path we have defined inside the function. the string or iterator for glob() function actually returns the same value as returned by the iglob() function without actually storing these values (filenames) in it. syntax: following is the syntax for using the glob() function of the glob module inside a python program: 
glob(pathname, *, recursive = true)
 as we can see in the syntax of the glob() function, it also takes a total of three parameters in it, like the iglob() function. the three parameters defined in the glob() function are the same as those we have read in the iglob() function above. now, let's use this glob() function in an example program so that we can understand its implementation and function in a better way. example 2: look at the following python program with the implementation of glob() function: 
# import glob module in the program
import glob as gb
# initialize a variable
genvar = gb.glob("*.py") # set pattern in glob() function
# printing list of names of all files that matched the pattern
print("list of the all the files in the directory having extension .py: ")
for py in genvar: 
    print(py)   
 output: list of the all the files in the directory having extension .py: 
adding.py
changing.py
code#1.py
code#2.py
code-3.py
code-4.py
code.py
code37.py
code_5.py
code_6.py
configuring.py
 as we can see in the above example program, we have followed the same logic as we have followed in example 1 with the iglob() function. the program has returned the list of all the filenames that match the pattern we set inside the glob() function. 3. escape() function: the escape() becomes very impactful as it allows us to escape the given character sequence, which we defined in the function. the escape() function is very handy for locating files that having certain characters (as we will define in the function) in their file names. it will match the sequence by matching an arbitrary literal string in the file names with that special character in them. syntax: following is the syntax for using the escape() function of glob module inside a python program: 
>> escape(pathname)
 the escape() should be used with either glob() or iglob() function so that we can print the list of file names in the output as a result. now, let's use this escape() function in an example program so that we can understand its implementation and function in a better way. example 3: look at the following python program with the implementation of escape() function: 
# import glob module in the program
import glob as gb
# initialize a variable
charseq = "-_#"
print("following is the list of filenames that match the special character sequence of escape function: ")
# using nested for loop to get the filenames
for splchar in charseq:
    # pathname for the glob() function
    escset = "*" + gb.escape(splchar) + "*" + ".py"
    # printing list of filenames with glob() function
    for py in (gb.glob(escset)): 
        print(py) 
 output: following is the list of filenames that match the special character sequence of escape function: 
code-3.py
code-4.py
code_5.py
code_6.py
code#1.py
code#2.py
 explanation: we have first defined a character sequence for the escape() sequence so that the escape() function will collect all the file names having that special character sequence in it. we have used a nested for loop such that first, we have created a pathname for the glob() function from the escape() function. and after that, we have used the pathname in glob() function to print the list of filenames matching the special character sequence defined earlier. as we can see in the output, we have all the filenames with special character sequences in their names which we defined in the program. conclusion so, as we have used the functions of glob modules, i.e., glob(), escape() and iglob() function, we can now easily understand the functionality of the glob module and its functions. with this, we can also depict that how the glob module is very helpful in performsing the filename pattern matching task and how we can get the list of all the files that are following a specific pattern. next topicwriting a python module ? prev next ? for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
