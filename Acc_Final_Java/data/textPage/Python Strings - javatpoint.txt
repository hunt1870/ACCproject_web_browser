https://www.javatpoint.com/python-strings::python strings - javatpoint ? scroll to top home python if else for loop function array string regex list set tuple dictionary programs numpy interview questions python tutorial python tutorial python features python history python applications python install python example python variables python data types python keywords python literals python operators python comments python if else python loops python for loop python while loop python break python continue python pass python strings python lists python tuples python list vs tuple python sets python dictionary python functions python built-in functions python lambda functions python files i/o python modules python exceptions python date python regex python sending email read csv file write csv file read excel file write excel file python assert python list comprehension python collection module python math module python os module python random module python statistics module python sys module python ides python arrays command line arguments python magic method python stack & queue pyspark mllib python decorator python generators web scraping using python python json python itertools python multiprocessing how to calculate distance between two points using geopy gmail api in python how to plot the google map using folium package in python grid search in python python high order function nsetools in python python program to find the nth fibonacci number python opencv object detection python simpleimputer module second largest number in python python oops python oops concepts python object class python constructors python inheritance abstraction in python python mysql environment setup database connection creating new database creating tables insert operation read operation update operation join operation performing transactions python mongodb python mongodb python sqlite python sqlite python questions how to install python in windows how to reverse a string in python how to read csv file in python how to run python program how to take input in python how to convert list to string in python how to append element in the list how to compare two lists in python how to convert int to string in python how to create a dictionary in python how to create a virtual environment in python how to declare a variable in python how to install matplotlib in python how to install opencv in python how to print in same line in python how to read json file in python how to read a text file in python how to use for loop in python is python scripting language how long does it take to learn python how to concatenate two strings in python how to connect database in python how to convert list to dictionary in python how to declare a global variable in python how to reverse a number in python what is an object in python which is the fastest implementation of python how to clear python shell how to create a dataframes in python how to develop a game in python how to install tkinter in python how to plot a graph in python how to print pattern in python how to remove an element from a list in python how to round number in python how to sort a dictionary in python strong number in python how to convert text to speech in python bubble sort in python logging in python insertion sort in python binary search in python linear search in python python vs scala queue in python stack in python heap sort in python palindrome program in python program of cumulative sum in python merge sort in python python matrix python unit testing forensics & virtualization best books to learn python best books to learn django gcd of two number in python python program to generate a random string how to one hot encode sequence data in python how to write square root in python pointer in python python 2d array python memory management python libraries for data visualization how to call a function in python git modules in python top python frameworks for gaming python audio modules wikipedia module in python python random randrange() permutation and combination in python getopt module in python merge two dictionaries in python multithreading in python 3 static in python how to get the current date in python argparse in python python tqdm module caesar cipher in python tokenizer in python how to add two lists in python shallow copy and deep copy in python atom python contains in python label encoding in python django vs. node js python frameworks how to create a vector in python using numpy pickle module of python how to convert bytes to string in python python program to find anagram how to convert list to set python vs javascript python holidays module fuzzywuzzy python library dask python dask python (part 2) mode in python menu-driven programs in python python array vs. list what is duck typing in python pep 8 in python python user groups basic commands in python f string in python how brython works how to use brython in the browser arima model in python python modulus operator matlab vs. python method resolution order in python monkey patching in python python __call__ method python heapq module python substring project ideas for python beginners python faker fizz-buzz program in python tabula python python program to print prime factor of given number python program to print pascal triangle namedtuple in python ordereddict in python t-test in python python return statement getter and setter in python enum class in python destructors in python curve fit in python converting csv to json in python underscore (_) in python set vs list in python locating and executing modules flatten list in python pair plot in python data hiding in python python program to find intersection of two lists how to create requirements.txt file in python tic-tac-toe in python python asynchronous programming - asyncio and await python main() function strftime() function in python verbose flag in python regex python ast module python requests module - http request shutil module in python python epoch to datetime python del statement looping technique in python metaprogramming with metaclasses in python precision handling in python python join list strip() function in python gradient descent algorithm prettytable in python sentiment analysis in python convert python list to numpy arrays traceback in python time clock() method in python deque in python dictionary comprehension in python python data analytics python seek() method ternary operator in python how to calculate the area of the circle using python how to write in text file using python python keyerror python super() function max() function in python fraction module in python popular python framework to build api how to check python version python %s - string formatting python seaborn library countplot in python range() vs. xrange() python wordcloud package in python convert dataframe into list anova test in python python program to find compound interest ansible in python python important tips and tricks python coroutines double underscores in python re.search() vs re.findall() in python regex how to install statsmodels in python cos in python vif in python __add__ method in python ethical hacking with python class variable vs instance perfect number in python eol in python python program to convert hexadecimal string to decimal string different methods in python for swapping two numbers without using third variable how to change plot size in matplotlib how to get the zip code in python eel in python assignment operators in python speech recognition python yield vs return in python graphene python name mangling in python python combination without itertools python comprehensions influxdb in python kafka tutorial in python augmented assignment expressions in python python (x,y) software python event-driven programming python semaphore python sorted reverse automorphic number in python sizeof in python python program for accepting the strings which contains all vowels class-based views vs function-based views how to handle cookies in django agg() function in python amicable numbers in python context manager in python create bmi calculator using python string to binary in python what is script mode in python best python libraries for machine learning python program to display calendar of given year how to open url in python broken pipe error in python code template for creating objects in python python program to calculate the best time to buy and sell stock tuple to string in python kadane's algorithm in python loggers in django weather app in django missing data conundrum: exploration and imputation techniques different methods of array rotation in python what is operator overloading in python defaultdict in python operator module in python spinner widget in the kivy library of python number plate recognition using python obfuscating a python program convert string to dictionary in python convert string to json in python dbscan algorithm in python how to write a code for printing the python exception/error hierarchy principal component analysis (pca) with python python program to find number of days between two given dates object recognition using python python vlc module set to list in python string to int in python internet of things with python python pysftp module amazing hacks of python average of list in python check installed modules in python choice() in python convert list to dataframe in python convert string to float in python decorators with parameters in python dynamic typing in python fabs in python how to remove decimal in python python closure python glob module writing a python module modules vs packages in python snmp module in python average of list in python append vs extend vs insert in python how to remove duplicates from a list in python remove multiple characters from a string in python shuffle in python floor() and ceil() functions in python sqrt(): math function of python python yfinance module difflib module in python convert the column type from string to datetime format in pandas dataframe python wxpython module random uniform python relational operators in python string to list in python chatbot in python how to convert float to int in python multiply all elements in list of python module vs function in python reverse a tuple in python tuple to dictionary in python datetime.timedelta() function of python python bio module python dash module how to select rows in pandas dataframe based on conditions typecasting in python dateutil module in python getpass module in python python wand library generate a qr code using python best python pdf library python cachetools module python cmdparser module python dash module python emoji module python nmap module python pylab module working with pdf files in python pdf handling in python manipulating pdf using python list all functions from a python module python list of dictionaries python shelve module creating interactive pdf forms using python python newspaper module how to connect wi-fi using python best python libraries used for ethical hacking windows system administration management using python indentation error in python python imaplib module python lxml module python mayavi module python os.listdir() method python modules for automation data visualization in python using bokeh library how to plot glyphs over a google map by using bokeh library in python how to plot a pie chart using bokeh library in python how to read contents of pdf using ocr in python grammar and spell checker in python converting html to pdf files using python readlines in python how to plot multiple lines on a graph using bokeh in python bokeh.plotting.figure.circle_x() function in python bokeh.plotting.figure.diamond_cross() function in python how to plot rays on a graph using bokeh in python image steganography using python inconsistent use of tabs and spaces in indentation how to plot multiple plots using bokeh in python how to make an area plot in python using bokeh python chempy module python memory-profiler module python phonenumbers module python platform module typeerror string indices must be an integer time series forecasting with prophet in python python pexpect module python optparse module int object is not iterable. python peewee library some cryptocurrency libraries for python building a blockchain using python huffman coding using python nested dictionary in python collections.userstring in python how to customize legends with matplotlib matplotlib legend in subplot morphological operations in image processing in python role of python in artificial intelligence python instagramy module python pprint module python primepy module android development using python python fbchat library artificial intelligence in cybersecurity: pitting algorithms vs algorithms understanding the recognition pattern of artificial intelligence when and how to leverage lambda architecture in big data why should we learn python for data science how to change the "legend" position in matplotlib how to check if element exists in list in python how to check spellings of given words using enchant in python python program to count the number of matching characters in a pair of string ping pong game using turtle in python python function to display calendar python program for calculating the sum of squares of first n natural numbers python program for how to check if a given number is fibonacci number or not randint() function in python visualize tiff file using matplotlib and gdal in python rarfile module in python stemming words using python python program for word guessing game blockchain in healthcare: innovations & opportunities snake game in python using turtle module how to find armstrong numbers between two given integers celery tutorial using python rsme - root mean square error in python building a twitter bot using python python progressbar module python pronouncing module python pyautogui module python pyperclip module how to generate uuid in python python top 10 libraries to learn in 2022 reading netcdf data using python the reprlib module in python how to take multiple input from user in python python zlib library python queue module python yaml parser effective root searching algorithms in python python bz2 module python ipaddress module python pylint module how to process xml in python bisect algorithm functions in python creating and updating powerpoint presentation using python how to change the size of figure drawn with matplotlib keyboard module in python python pyfiglet module creating an mcq quiz game in python statistic with python what is gil in python basic python for java developers how to download youtube videos using python scripts traffic flow simulation in python how to merge and sort two lists in python metacharacters in python write the python program to print all possible combination of integers modulo string formatting in python counters in python python pyautogui library how to draw the mandelbrot set in python python dbm module webcam motion detector in python graphql implementation in django how to implement protobuf in python pyqt library in python how to prettify data structures with pretty print in python encrypt a password in python using bcrypt pyramid framework in python building a telegram bot using python web2py framework in python python os.chdir() method balancing parentheses in python how to provide multiple constructors in python classes profiling the python code python tkinter (gui) python tkinter tkinter button tkinter canvas tkinter checkbutton tkinter entry tkinter frame tkinter label tkinter listbox tkinter menubutton tkinter menu tkinter message tkinter radiobutton tkinter scale tkinter scrollbar tkinter text tkinter toplevel tkinter spinbox tkinter panedwindow tkinter labelframe tkinter messagebox python web blocker introduction building python script script deployment on linux script deployment on windows python mcq python mcq python mcq part 2 related tutorials numpy tutorial django tutorial flask tutorial pandas tutorial pytorch tutorial pygame tutorial matplotlib tutorial opencv tutorial openpyxl tutorial python cgi python design pattern python programs python programs next ? ? prev python string till now, we have discussed numbers as the standard data-types in python. in this section of the tutorial, we will discuss the most popular data type in python, i.e., string. python string is the collection of the characters surrounded by single quotes, double quotes, or triple quotes. the computer does not understand the characters; internally, it stores manipulated character as the combination of the 0's and 1's. each character is encoded in the ascii or unicode character. so we can say that python strings are also called the collection of unicode characters. in python, strings can be created by enclosing the character or the sequence of characters in the quotes. python allows us to use single quotes, double quotes, or triple quotes to create the string. consider the following example in python to create a string. syntax: 
str = "hi python !"  
 here, if we check the type of the variable str using a python script 
print(type(str)), then it will print a string (str).  
 in python, strings are treated as the sequence of characters, which means that python doesn't support the character data-type; instead, a single character written as 'p' is treated as the string of length 1. creating string in python we can create a string by enclosing the characters in single-quotes or double- quotes. python also provides triple-quotes to represent the string, but it is generally used for multiline string or docstrings. 
#using single quotes
str1 = 'hello python'
print(str1)
#using double quotes
str2 = "hello python"
print(str2)

#using triple quotes
str3 = '''triple quotes are generally used for 
    represent the multiline or
    docstring''' 
print(str3)
 output: hello python
hello python
triple quotes are generally used for 
    represent the multiline or
    docstring
 strings indexing and splitting like other languages, the indexing of the python strings starts from 0. for example, the string "hello" is indexed as given in the below figure. consider the following example: 
str = "hello"
print(str[0])
print(str[1])
print(str[2])
print(str[3])
print(str[4])
# it returns the indexerror because 6th index doesn't exist
print(str[6])
 output: h
e
l
l
o
indexerror: string index out of range
 as shown in python, the slice operator [] is used to access the individual characters of the string. however, we can use the : (colon) operator in python to access the substring from the given string. consider the following example. here, we must notice that the upper range given in the slice operator is always exclusive i.e., if str = 'hello' is given, then str[1:3] will always include str[1] = 'e', str[2] = 'l' and nothing else. consider the following example: 
# given string
str = "javatpoint"
# start oth index to end
print(str[0:])
# starts 1th index to 4th index
print(str[1:5])
# starts 2nd index to 3rd index
print(str[2:4])
# starts 0th to 2nd index
print(str[:3])
#starts 4th to 6th index
print(str[4:7])
 output: javatpoint
avat
va
jav
tpo
 we can do the negative slicing in the string; it starts from the rightmost character, which is indicated as -1. the second rightmost index indicates -2, and so on. consider the following image. consider the following example 
str = 'javatpoint'
print(str[-1])
print(str[-3])
print(str[-2:])
print(str[-4:-1])
print(str[-7:-2])
# reversing the given string
print(str[::-1])
print(str[-12])
 output: t
i
nt
oin
atpoi
tnioptavaj
indexerror: string index out of range
 reassigning strings updating the content of the strings is as easy as assigning it to a new string. the string object doesn't support item assignment i.e., a string can only be replaced with new string since its content cannot be partially replaced. strings are immutable in python. consider the following example. example 1 
str = "hello"  
str[0] = "h"  
print(str)  
 output: traceback (most recent call last):
  file "12.py", line 2, in <module>
    str[0] = "h";
typeerror: 'str' object does not support item assignment
 however, in example 1, the string str can be assigned completely to a new content as specified in the following example. example 2 
str = "hello"  
print(str)  
str = "hello"  
print(str)  
 output: hello
hello  
 deleting the string as we know that strings are immutable. we cannot delete or remove the characters from the string. but we can delete the entire string using the del keyword. 
str = "javatpoint"
del str[1]
 output: typeerror: 'str' object doesn't support item deletion
 now we are deleting entire string. 
str1 = "javatpoint"
del str1
print(str1)
 output: nameerror: name 'str1' is not defined
 string operators operator description + it is known as concatenation operator used to join the strings given either side of the operator. * it is known as repetition operator. it concatenates the multiple copies of the same string. [] it is known as slice operator. it is used to access the sub-strings of a particular string. [:] it is known as range slice operator. it is used to access the characters from the specified range. in it is known as membership operator. it returns if a particular sub-string is present in the specified string. not in it is also a membership operator and does the exact reverse of in. it returns true if a particular substring is not present in the specified string. r/r it is used to specify the raw string. raw strings are used in the cases where we need to print the actual meaning of escape characters such as "c://python". to define any string as a raw string, the character r or r is followed by the string. % it is used to perform string formatting. it makes use of the format specifiers used in c programming like %d or %f to map their values in python. we will discuss how formatting is done in python. example consider the following example to understand the real use of python operators. 
str = "hello"   
str1 = " world"  
print(str*3) # prints hellohellohello  
print(str+str1)# prints hello world   
print(str[4]) # prints o              
print(str[2:4]); # prints ll                  
print('w' in str) # prints false as w is not present in str  
print('wo' not in str1) # prints false as wo is present in str1.   
print(r'c://python37') # prints c://python37 as it is written  
print("the string str : %s"%(str)) # prints the string str : hello   
 output: hellohellohello
hello world
o
ll
false
false
c://python37
the string str : hello
 python string formatting escape sequence let's suppose we need to write the text as - they said, "hello what's going on?"- the given statement can be written in single quotes or double quotes but it will raise the syntaxerror as it contains both single and double-quotes. example consider the following example to understand the real use of python operators. 
str = "they said, "hello what's going on?""
print(str)
 output: syntaxerror: invalid syntax
 we can use the triple quotes to accomplish this problem but python provides the escape sequence. the backslash(/) symbol denotes the escape sequence. the backslash can be followed by a special character and it interpreted differently. the single quotes inside the string must be escaped. we can apply the same as in the double quotes. example - 
# using triple quotes
print('''they said, "what's there?"''')

# escaping single quotes
print('they said, "what\'s going on?"')

# escaping double quotes
print("they said, \"what's going on?\"")
 output: they said, "what's there?"
they said, "what's going on?"
they said, "what's going on?"
 the list of an escape sequence is given below: sr. escape sequence description example 1. \newline it ignores the new line. print("python1 \
python2 \
python3") output: python1 python2 python3 2. \\ backslash print("\\") output: \ 3. \' single quotes print('\'') output: ' 4. \\'' double quotes print("\"") output: " 5. \a ascii bell print("\a") 6. \b ascii backspace(bs) print("hello \b world") output: hello world 7. \f ascii formfeed print("hello \f world!")
hello  world! 8. \n ascii linefeed print("hello \n world!") output: hello
 world! 9. \r ascii carriege return(cr) print("hello \r world!") output: world! 10. \t ascii horizontal tab print("hello \t world!") output: hello 	 world! 11. \v ascii vertical tab print("hello \v world!") output: hello 
 world! 12. \ooo character with octal value print("\110\145\154\154\157") output:
 hello 13 \xhh character with hex value. print("\x48\x65\x6c\x6c\x6f") output: hello here is the simple example of escape sequence. 
print("c:\\users\\devansh sharma\\python32\\lib")
print("this is the \n multiline quotes")
print("this is \x48\x45\x58 representation")
 output: c:\users\devansh sharma\python32\lib
this is the 
 multiline quotes
this is hex representation
 we can ignore the escape sequence from the given string by using the raw string. we can do this by writing r or r in front of the string. consider the following example. 
print(r"c:\\users\\devansh sharma\\python32")
 output: c:\\users\\devansh sharma\\python32
 the format() method the format() method is the most flexible and useful method in formatting strings. the curly braces {} are used as the placeholder in the string and replaced by the format() method argument. let's have a look at the given an example: 
# using curly braces
print("{} and {} both are the best friend".format("devansh","abhishek"))

#positional argument
print("{1} and {0} best players ".format("virat","rohit"))

#keyword argument
print("{a},{b},{c}".format(a = "james", b = "peter", c = "ricky"))
 output: devansh and abhishek both are the best friend
rohit and virat best players 
james,peter,ricky 
 python string formatting using % operator python allows us to use the format specifiers used in c's printf statement. the format specifiers in python are treated in the same way as they are treated in c. however, python provides an additional operator %, which is used as an interface between the format specifiers and their values. in other words, we can say that it binds the format specifiers to the values. consider the following example. 
integer = 10;  
float = 1.290  
string = "devansh"  
print("hi i am integer ... my value is %d\nhi i am float ... my value is %f\nhi i am string ... my value is %s"%(integer,float,string))  
 output: hi i am integer ... my value is 10
hi i am float ... my value is 1.290000
hi i am string ... my value is devansh
 python string functions python provides various in-built functions that are used for string handling. many string fun method description capitalize() it capitalizes the first character of the string. this function is deprecated in python3 casefold() it returns a version of s suitable for case-less comparisons. center(width ,fillchar) it returns a space padded string with the original string centred with equal number of left and right spaces. count(string,begin,end) it counts the number of occurrences of a substring in a string between begin and end index. decode(encoding = 'utf8', errors = 'strict') decodes the string using codec registered for encoding. encode() encode s using the codec registered for encoding. default encoding is 'utf-8'. endswith(suffix ,begin=0,end=len(string)) it returns a boolean value if the string terminates with given suffix between begin and end. expandtabs(tabsize = 8) it defines tabs in string to multiple spaces. the default space value is 8. find(substring ,beginindex, endindex) it returns the index value of the string where substring is found between begin index and end index. format(value) it returns a formatted version of s, using the passed value. index(subsring, beginindex, endindex) it throws an exception if string is not found. it works same as find() method. isalnum() it returns true if the characters in the string are alphanumeric i.e., alphabets or numbers and there is at least 1 character. otherwise, it returns false. isalpha() it returns true if all the characters are alphabets and there is at least one character, otherwise false. isdecimal() it returns true if all the characters of the string are decimals. isdigit() it returns true if all the characters are digits and there is at least one character, otherwise false. isidentifier() it returns true if the string is the valid identifier. islower() it returns true if the characters of a string are in lower case, otherwise false. isnumeric() it returns true if the string contains only numeric characters. isprintable() it returns true if all the characters of s are printable or s is empty, false otherwise. isupper() it returns false if characters of a string are in upper case, otherwise false. isspace() it returns true if the characters of a string are white-space, otherwise false. istitle() it returns true if the string is titled properly and false otherwise. a title string is the one in which the first character is upper-case whereas the other characters are lower-case. isupper() it returns true if all the characters of the string(if exists) is true otherwise it returns false. join(seq) it merges the strings representation of the given sequence. len(string) it returns the length of a string. ljust(width[,fillchar]) it returns the space padded strings with the original string left justified to the given width. lower() it converts all the characters of a string to lower case. lstrip() it removes all leading whitespaces of a string and can also be used to remove particular character from leading. partition() it searches for the separator sep in s, and returns the part before it, the separator itself, and the part after it. if the separator is not found, return s and two empty strings. maketrans() it returns a translation table to be used in translate function. replace(old,new[,count]) it replaces the old sequence of characters with the new sequence. the max characters are replaced if max is given. rfind(str,beg=0,end=len(str)) it is similar to find but it traverses the string in backward direction. rindex(str,beg=0,end=len(str)) it is same as index but it traverses the string in backward direction. rjust(width,[,fillchar]) returns a space padded string having original string right justified to the number of characters specified. rstrip() it removes all trailing whitespace of a string and can also be used to remove particular character from trailing. rsplit(sep=none, maxsplit = -1) it is same as split() but it processes the string from the backward direction. it returns the list of words in the string. if separator is not specified then the string splits according to the white-space. split(str,num=string.count(str)) splits the string according to the delimiter str. the string splits according to the space if the delimiter is not provided. it returns the list of substring concatenated with the delimiter. splitlines(num=string.count('\n')) it returns the list of strings at each line with newline removed. startswith(str,beg=0,end=len(str)) it returns a boolean value if the string starts with given str between begin and end. strip([chars]) it is used to perform lstrip() and rstrip() on the string. swapcase() it inverts case of all characters in a string. title() it is used to convert the string into the title-case i.e., the string meerut will be converted to meerut. translate(table,deletechars = '') it translates the string according to the translation table passed in the function . upper() it converts all the characters of a string to upper case. zfill(width) returns original string leftpadded with zeros to a total of width characters; intended for numbers, zfill() retains any sign given (less one zero). rpartition() next topicpython lists ? prev next ? for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
