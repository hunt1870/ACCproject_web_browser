https://www.javatpoint.com/kafka-in-python::kafka tutorial in python - javatpoint ? scroll to top home python if else for loop function array string regex list set tuple dictionary programs numpy interview questions python tutorial python tutorial python features python history python applications python install python example python variables python data types python keywords python literals python operators python comments python if else python loops python for loop python while loop python break python continue python pass python strings python lists python tuples python list vs tuple python sets python dictionary python functions python built-in functions python lambda functions python files i/o python modules python exceptions python date python regex python sending email read csv file write csv file read excel file write excel file python assert python list comprehension python collection module python math module python os module python random module python statistics module python sys module python ides python arrays command line arguments python magic method python stack & queue pyspark mllib python decorator python generators web scraping using python python json python itertools python multiprocessing how to calculate distance between two points using geopy gmail api in python how to plot the google map using folium package in python grid search in python python high order function nsetools in python python program to find the nth fibonacci number python opencv object detection python simpleimputer module second largest number in python python oops python oops concepts python object class python constructors python inheritance abstraction in python python mysql environment setup database connection creating new database creating tables insert operation read operation update operation join operation performing transactions python mongodb python mongodb python sqlite python sqlite python questions how to install python in windows how to reverse a string in python how to read csv file in python how to run python program how to take input in python how to convert list to string in python how to append element in the list how to compare two lists in python how to convert int to string in python how to create a dictionary in python how to create a virtual environment in python how to declare a variable in python how to install matplotlib in python how to install opencv in python how to print in same line in python how to read json file in python how to read a text file in python how to use for loop in python is python scripting language how long does it take to learn python how to concatenate two strings in python how to connect database in python how to convert list to dictionary in python how to declare a global variable in python how to reverse a number in python what is an object in python which is the fastest implementation of python how to clear python shell how to create a dataframes in python how to develop a game in python how to install tkinter in python how to plot a graph in python how to print pattern in python how to remove an element from a list in python how to round number in python how to sort a dictionary in python strong number in python how to convert text to speech in python bubble sort in python logging in python insertion sort in python binary search in python linear search in python python vs scala queue in python stack in python heap sort in python palindrome program in python program of cumulative sum in python merge sort in python python matrix python unit testing forensics & virtualization best books to learn python best books to learn django gcd of two number in python python program to generate a random string how to one hot encode sequence data in python how to write square root in python pointer in python python 2d array python memory management python libraries for data visualization how to call a function in python git modules in python top python frameworks for gaming python audio modules wikipedia module in python python random randrange() permutation and combination in python getopt module in python merge two dictionaries in python multithreading in python 3 static in python how to get the current date in python argparse in python python tqdm module caesar cipher in python tokenizer in python how to add two lists in python shallow copy and deep copy in python atom python contains in python label encoding in python django vs. node js python frameworks how to create a vector in python using numpy pickle module of python how to convert bytes to string in python python program to find anagram how to convert list to set python vs javascript python holidays module fuzzywuzzy python library dask python dask python (part 2) mode in python menu-driven programs in python python array vs. list what is duck typing in python pep 8 in python python user groups basic commands in python f string in python how brython works how to use brython in the browser arima model in python python modulus operator matlab vs. python method resolution order in python monkey patching in python python __call__ method python heapq module python substring project ideas for python beginners python faker fizz-buzz program in python tabula python python program to print prime factor of given number python program to print pascal triangle namedtuple in python ordereddict in python t-test in python python return statement getter and setter in python enum class in python destructors in python curve fit in python converting csv to json in python underscore (_) in python set vs list in python locating and executing modules flatten list in python pair plot in python data hiding in python python program to find intersection of two lists how to create requirements.txt file in python tic-tac-toe in python python asynchronous programming - asyncio and await python main() function strftime() function in python verbose flag in python regex python ast module python requests module - http request shutil module in python python epoch to datetime python del statement looping technique in python metaprogramming with metaclasses in python precision handling in python python join list strip() function in python gradient descent algorithm prettytable in python sentiment analysis in python convert python list to numpy arrays traceback in python time clock() method in python deque in python dictionary comprehension in python python data analytics python seek() method ternary operator in python how to calculate the area of the circle using python how to write in text file using python python keyerror python super() function max() function in python fraction module in python popular python framework to build api how to check python version python %s - string formatting python seaborn library countplot in python range() vs. xrange() python wordcloud package in python convert dataframe into list anova test in python python program to find compound interest ansible in python python important tips and tricks python coroutines double underscores in python re.search() vs re.findall() in python regex how to install statsmodels in python cos in python vif in python __add__ method in python ethical hacking with python class variable vs instance perfect number in python eol in python python program to convert hexadecimal string to decimal string different methods in python for swapping two numbers without using third variable how to change plot size in matplotlib how to get the zip code in python eel in python assignment operators in python speech recognition python yield vs return in python graphene python name mangling in python python combination without itertools python comprehensions influxdb in python kafka tutorial in python augmented assignment expressions in python python (x,y) software python event-driven programming python semaphore python sorted reverse automorphic number in python sizeof in python python program for accepting the strings which contains all vowels class-based views vs function-based views how to handle cookies in django agg() function in python amicable numbers in python context manager in python create bmi calculator using python string to binary in python what is script mode in python best python libraries for machine learning python program to display calendar of given year how to open url in python broken pipe error in python code template for creating objects in python python program to calculate the best time to buy and sell stock tuple to string in python kadane's algorithm in python loggers in django weather app in django missing data conundrum: exploration and imputation techniques different methods of array rotation in python what is operator overloading in python defaultdict in python operator module in python spinner widget in the kivy library of python number plate recognition using python obfuscating a python program convert string to dictionary in python convert string to json in python dbscan algorithm in python how to write a code for printing the python exception/error hierarchy principal component analysis (pca) with python python program to find number of days between two given dates object recognition using python python vlc module set to list in python string to int in python internet of things with python python pysftp module amazing hacks of python average of list in python check installed modules in python choice() in python convert list to dataframe in python convert string to float in python decorators with parameters in python dynamic typing in python fabs in python how to remove decimal in python python closure python glob module writing a python module modules vs packages in python snmp module in python average of list in python append vs extend vs insert in python how to remove duplicates from a list in python remove multiple characters from a string in python shuffle in python floor() and ceil() functions in python sqrt(): math function of python python yfinance module difflib module in python convert the column type from string to datetime format in pandas dataframe python wxpython module random uniform python relational operators in python string to list in python chatbot in python how to convert float to int in python multiply all elements in list of python module vs function in python reverse a tuple in python tuple to dictionary in python datetime.timedelta() function of python python bio module python dash module how to select rows in pandas dataframe based on conditions typecasting in python dateutil module in python getpass module in python python wand library generate a qr code using python best python pdf library python cachetools module python cmdparser module python dash module python emoji module python nmap module python pylab module working with pdf files in python pdf handling in python manipulating pdf using python list all functions from a python module python list of dictionaries python shelve module creating interactive pdf forms using python python newspaper module how to connect wi-fi using python best python libraries used for ethical hacking windows system administration management using python indentation error in python python imaplib module python lxml module python mayavi module python os.listdir() method python modules for automation data visualization in python using bokeh library how to plot glyphs over a google map by using bokeh library in python how to plot a pie chart using bokeh library in python how to read contents of pdf using ocr in python grammar and spell checker in python converting html to pdf files using python readlines in python how to plot multiple lines on a graph using bokeh in python bokeh.plotting.figure.circle_x() function in python bokeh.plotting.figure.diamond_cross() function in python how to plot rays on a graph using bokeh in python image steganography using python inconsistent use of tabs and spaces in indentation how to plot multiple plots using bokeh in python how to make an area plot in python using bokeh python chempy module python memory-profiler module python phonenumbers module python platform module typeerror string indices must be an integer time series forecasting with prophet in python python pexpect module python optparse module int object is not iterable. python peewee library some cryptocurrency libraries for python building a blockchain using python huffman coding using python nested dictionary in python collections.userstring in python how to customize legends with matplotlib matplotlib legend in subplot morphological operations in image processing in python role of python in artificial intelligence python instagramy module python pprint module python primepy module android development using python python fbchat library artificial intelligence in cybersecurity: pitting algorithms vs algorithms understanding the recognition pattern of artificial intelligence when and how to leverage lambda architecture in big data why should we learn python for data science how to change the "legend" position in matplotlib how to check if element exists in list in python how to check spellings of given words using enchant in python python program to count the number of matching characters in a pair of string ping pong game using turtle in python python function to display calendar python program for calculating the sum of squares of first n natural numbers python program for how to check if a given number is fibonacci number or not randint() function in python visualize tiff file using matplotlib and gdal in python rarfile module in python stemming words using python python program for word guessing game blockchain in healthcare: innovations & opportunities snake game in python using turtle module how to find armstrong numbers between two given integers celery tutorial using python rsme - root mean square error in python building a twitter bot using python python progressbar module python pronouncing module python pyautogui module python pyperclip module how to generate uuid in python python top 10 libraries to learn in 2022 reading netcdf data using python the reprlib module in python how to take multiple input from user in python python zlib library python queue module python yaml parser effective root searching algorithms in python python bz2 module python ipaddress module python pylint module how to process xml in python bisect algorithm functions in python creating and updating powerpoint presentation using python how to change the size of figure drawn with matplotlib keyboard module in python python pyfiglet module creating an mcq quiz game in python statistic with python what is gil in python basic python for java developers how to download youtube videos using python scripts traffic flow simulation in python how to merge and sort two lists in python metacharacters in python write the python program to print all possible combination of integers modulo string formatting in python counters in python python pyautogui library how to draw the mandelbrot set in python python dbm module webcam motion detector in python graphql implementation in django how to implement protobuf in python pyqt library in python how to prettify data structures with pretty print in python encrypt a password in python using bcrypt pyramid framework in python building a telegram bot using python web2py framework in python python os.chdir() method balancing parentheses in python how to provide multiple constructors in python classes profiling the python code python tkinter (gui) python tkinter tkinter button tkinter canvas tkinter checkbutton tkinter entry tkinter frame tkinter label tkinter listbox tkinter menubutton tkinter menu tkinter message tkinter radiobutton tkinter scale tkinter scrollbar tkinter text tkinter toplevel tkinter spinbox tkinter panedwindow tkinter labelframe tkinter messagebox python web blocker introduction building python script script deployment on linux script deployment on windows python mcq python mcq python mcq part 2 related tutorials numpy tutorial django tutorial flask tutorial pandas tutorial pytorch tutorial pygame tutorial matplotlib tutorial opencv tutorial openpyxl tutorial python cgi python design pattern python programs python programs next ? ? prev kafka tutorial in python in the following tutorial, we will discuss apache kafka along with its use in the python programming language. understanding the apache kafka apache kafka is an open-source stream platform that was originally designed by linkedin. later, it was handed over to apache foundation and open-sourced in 2011. as per the definition from wikipedia: apache kafka is an open-source platform developed by the apache software foundation used for processing streams. it is written in java and scala. the goal of the project is to offer a high-throughput, unified, low-latency platform in order to handle real-time data feeds. the storage layer of the apache kafka is fundamentally a "massively scalable pub/sub message queue designed as a distributed transaction log," that makes it extremely valuable for enterprise infrastructures in order to process streaming data. moreover, kafka connects to external systems (for importing and exporting data) through kafka connect and offers kafka streams, a library for java stream processing. we can think of it as a giant commit log where we can store the data in order of its happening. the users of this log can just access and utilize it as per their needs. some use cases of apache kafka we can use apache kafka in different places. let us consider some use cases of kafka that could help us to figure out its usage: activity monitoring:we can use kafka to monitor activities. the activity could belong to a physical sensor and device or a website. producers can publish raw data from data sources that can later be utilized to find trends and patterns. messaging:we can also use kafka as a message broker among services. if we are implementing a microservice architecture, we can have a microservice as a producer and another as a consumer. for example, we have a microservice responsible for creating new accounts and sending emails to users related to account creation. log aggregation:we can also utilize kafka for collecting logs from distinct systems and store them in a centralized system for further processing. etl: kafka offers a feature of almost real-time streaming; hence, we can develop an etl based on the requirement. database:based on things we have mentioned earlier, we can say that kafka also acts as a database. it is not a typical database that has a feature of data querying per requirement, but kafka can store data as long as we require without consuming it. understanding the concepts of kafka let us discuss the core concepts of kafka. topics:every message that is feed into the system must be part of some topic. the topic is a stream of records. the messages are store in the format of key-value pairs. every message is assigned a sequence, known as offset. the result of one message could be an input of the other for further processing. producers:producers are the applications responsible for publishing the data into the kafka system. they publish the data on the topic of their choice. consumer: there are consumers applications that uses the messages published into topics. a consumer gets a subscription of the topic of its preference and consumes the data. broker: a broker is an instance of kafka which is responsible for the message exchange. we can use kafka as a part of a cluster or a stand-alone machine. now, let us consider a simple example, there is a go-down or a warehouse of a restaurant where all the raw material is stored, such as vegetables, rice, flour, and a lot more. the restaurant serves various kinds of dishes like indian, italian, chinese and many more. the cooks of each cuisine can refer to the warehouse to select the required objects and make dishes. there may be a chance that all cooks from different cuisine use the same stuff made up of raw materials. this can be any secret ingredient that is utilized in every kind of dish. in the following case, the warehouse acts as a broker, the merchants of the goods are the producers, the goods and the secret ingredient created by cooks are topics, and cooks are consumers. how to access kafka in python? there are various libraries available in the python programming language to use kafka. some of these libraries are described below: s. no. library description 1 kafka-python this is an open-source library designed by the python community. 2 pykafka this library is maintained by parsly and it has claimed to be a pythonic api. however, we cannot create dynamic topics in this library like kafka-python. 3 confluent python kafka this library is provided by confluent as a thin wrapper around librdkafka. thus, it performs better than the above two. installing the dependencies we will use kafka-python for this project. so, we can install it manually using the pip installer as shown below: syntax: 
$ pip install kafka-python
 now, let us start building the project. project code in the following example, we will create a producer that produces numbers ranging from 1 to 500 and send them to the kafka broker. later a consumer will read that data from the broker and keep them in a mongodb collection. one of the benefits of utilizing kafka is that in case a consumer breaks down, another or fixed consumer will continue reading where the earlier one left. this is a good method to confirm that all the data is fed into the database without missing data or duplicates. in the following example, let us create a new python program file named produce.py and begin with importing some required libraries and modules. file: produce.py 
# importing the required libraries
from time import sleep
from json import dumps
from kafka import kafkaproducer
 explanation: in the above snippet of code, we have imported the required libraries and modules. now, let us initialize a new kafka producer. note the following parameters: bootstrap_servers = ['localhost: 9092']: this parameter sets the host and port to contact the producer to bootstrap initial cluster metadata. it is not mandatory to set this here, as the default host and port is localhost: 9092. value_serializer = lambda x: dumps(x).encode('utf-8'): this parameter functions on the serialization of the data before sending it to the broker. here, we transform the data into a json file and encode it to utf-8. let us consider the following snippet of code for the same. file: produce.py 
# initializing the kafka producer
my_producer = kafkaproducer(
    bootstrap_servers = ['localhost:9092'],
    value_serializer = lambda x:dumps(x).encode('utf-8')
    )
 explanation: in the above snippet of code, we have initialized the kafka producer using the kafkaproducer() function, where we have used the parameters described above. now, we have to generate numbers ranging from 1 to 500. we can perform this using a for-loop where we use every number as a value in a dictionary with one key: num. this key is used as a key of the data only, not as the key of the topic. within the same loop, we will also send the data to a broker. we can perform this by calling the send method on the producer and detailing the topic and the data. note: the value serializer will automatically transform and encode the data. we can take five seconds of a break in order to conclude the iteration. in case we have to confirm whether the broker received the message, it is advised to include a callback. file: produce.py 
# generating the numbers ranging from 1 to 500
for n in range(500):
    my_data = {'num' : n}
    my_producer.send('testnum', value = my_data)
    sleep(5)
 explanation: in the above snippet of code, we have used the for-loop to iterate the number ranging from one to 500. we have also added the interval of five seconds between each iteration. if somebody wants to test the code, it is recommended to create a new topic and send the data to that newly generated topic. this method will avoid any case of duplicate values and possible confusion in the testnum topic when we will be testing the producer and consumer together. consuming the data before we get started with the coding part of the consumer, let us create a new python program file and name it consume.py. we will import some of the modules such as json.loads, mongoclient and kafkaconsumer. since pymongo is out of the scope of this tutorial, we won't be digging any deeper into its code. moreover, somebody can also replace the mongo code with any other code as per needs. we can code this in order to enter the data into another database, code to process the data, or anything else one can think of. let us consider the following snippet of code, to begin with. file: consume.py 
# importing the required modules
from json import loads
from kafka import kafkaconsumer
from pymongo import mongoclient
 explanation: in the above snippet of code, we have imported the required modules from their respective libraries. let us create the kafka consumer. we will use the kafkaconsumer() function for this work; so let's have a closer look at the parameters used in this function. topic: the first parameter of the kafkaconsumer() function is the topic. in the following case, it is testnum. bootstrap_servers = ['localhost: 9092']: this parameter is same as the producer. auto_offset_reset = 'earliest': this parameter is among the other significant parameters. it handles where the consumer restarts reading after being turned off or breaking down and we can set it either to latest or earliest. whenever we set it to earliest, the consumer begins reading at the latest committed offset. whenever we set it to the latest, the consumer begins reading at the log's end. and that is exactly what we need here. enable_auto_commit = true: this parameter confirms whether the consumer commits its read offset each interval. auto_commit_interval_ms = 1000ms: this parameter is used to set the interval between two commits. as messages are coming in every interval of five seconds, committing every second appears to be fair. group_id = 'counters': this parameter is the group of consumers to which the consumer belongs. note that a consumer must be part of a consumer group in order to make them work automatically committed. the value deserializer is used to deserialize the data into a general json format, the inverse of the working of the value serializer. let us consider the following snippet of code for the same. file: consume.py 
# generating the kafka consumer
my_consumer = kafkaconsumer(
    'testnum',
     bootstrap_servers = ['localhost : 9092'],
     auto_offset_reset = 'earliest',
     enable_auto_commit = true,
     group_id = 'my-group',
     value_deserializer = lambda x : loads(x.decode('utf-8'))
     )
 explanation: in the above snippet of code, we have used the kafkaconsumer() function to generate the kafka consumer. we have also added the parameters within the function that we studied earlier. now, let us consider the following snippet of code to connect to the testnum collection (this collection is similar to a table in a relational database) of the mongodb database. file: consume.py 
my_client = mongoclient('localhost : 27017')
my_collection = my_client.testnum.testnum
 explanation: in the above snippet of code, we have defined a variable as my_client that uses the mongoclient() function specified with the host and port. we have then defined another variable as my_collection that uses the my_client variable to access the data in the testnum topic. this data can be extracted from the consumer by looping through it (here, the consumer can be considered as an iterable). the consumer will keep listening until the broker does not respond anymore. we can access the message value using the value attribute. here, we overwrite the message with the message value. the next line inserts the data into the database collection. the last line will print a confirmation that the message was added to our collection. note: it is possible to insert callbacks to all the actions in this loop. file: consume.py 
for message in my_consumer:
    message = message.value
    collection.insert_one(message)
    print(message + " added to " + my_collection)
 explanation: in the above snippet of code, we have used the for-loop to iterate through the consumer in order to extract the data. now in order to test the code, one can execute the produce.py file first and then consume.py. next topicaugmented assignment expressions in python ? prev next ? for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
