https://www.javatpoint.com/python-set::python sets - javatpoint ? scroll to top home python if else for loop function array string regex list set tuple dictionary programs numpy interview questions python tutorial python tutorial python features python history python applications python install python example python variables python data types python keywords python literals python operators python comments python if else python loops python for loop python while loop python break python continue python pass python strings python lists python tuples python list vs tuple python sets python dictionary python functions python built-in functions python lambda functions python files i/o python modules python exceptions python date python regex python sending email read csv file write csv file read excel file write excel file python assert python list comprehension python collection module python math module python os module python random module python statistics module python sys module python ides python arrays command line arguments python magic method python stack & queue pyspark mllib python decorator python generators web scraping using python python json python itertools python multiprocessing how to calculate distance between two points using geopy gmail api in python how to plot the google map using folium package in python grid search in python python high order function nsetools in python python program to find the nth fibonacci number python opencv object detection python simpleimputer module second largest number in python python oops python oops concepts python object class python constructors python inheritance abstraction in python python mysql environment setup database connection creating new database creating tables insert operation read operation update operation join operation performing transactions python mongodb python mongodb python sqlite python sqlite python questions how to install python in windows how to reverse a string in python how to read csv file in python how to run python program how to take input in python how to convert list to string in python how to append element in the list how to compare two lists in python how to convert int to string in python how to create a dictionary in python how to create a virtual environment in python how to declare a variable in python how to install matplotlib in python how to install opencv in python how to print in same line in python how to read json file in python how to read a text file in python how to use for loop in python is python scripting language how long does it take to learn python how to concatenate two strings in python how to connect database in python how to convert list to dictionary in python how to declare a global variable in python how to reverse a number in python what is an object in python which is the fastest implementation of python how to clear python shell how to create a dataframes in python how to develop a game in python how to install tkinter in python how to plot a graph in python how to print pattern in python how to remove an element from a list in python how to round number in python how to sort a dictionary in python strong number in python how to convert text to speech in python bubble sort in python logging in python insertion sort in python binary search in python linear search in python python vs scala queue in python stack in python heap sort in python palindrome program in python program of cumulative sum in python merge sort in python python matrix python unit testing forensics & virtualization best books to learn python best books to learn django gcd of two number in python python program to generate a random string how to one hot encode sequence data in python how to write square root in python pointer in python python 2d array python memory management python libraries for data visualization how to call a function in python git modules in python top python frameworks for gaming python audio modules wikipedia module in python python random randrange() permutation and combination in python getopt module in python merge two dictionaries in python multithreading in python 3 static in python how to get the current date in python argparse in python python tqdm module caesar cipher in python tokenizer in python how to add two lists in python shallow copy and deep copy in python atom python contains in python label encoding in python django vs. node js python frameworks how to create a vector in python using numpy pickle module of python how to convert bytes to string in python python program to find anagram how to convert list to set python vs javascript python holidays module fuzzywuzzy python library dask python dask python (part 2) mode in python menu-driven programs in python python array vs. list what is duck typing in python pep 8 in python python user groups basic commands in python f string in python how brython works how to use brython in the browser arima model in python python modulus operator matlab vs. python method resolution order in python monkey patching in python python __call__ method python heapq module python substring project ideas for python beginners python faker fizz-buzz program in python tabula python python program to print prime factor of given number python program to print pascal triangle namedtuple in python ordereddict in python t-test in python python return statement getter and setter in python enum class in python destructors in python curve fit in python converting csv to json in python underscore (_) in python set vs list in python locating and executing modules flatten list in python pair plot in python data hiding in python python program to find intersection of two lists how to create requirements.txt file in python tic-tac-toe in python python asynchronous programming - asyncio and await python main() function strftime() function in python verbose flag in python regex python ast module python requests module - http request shutil module in python python epoch to datetime python del statement looping technique in python metaprogramming with metaclasses in python precision handling in python python join list strip() function in python gradient descent algorithm prettytable in python sentiment analysis in python convert python list to numpy arrays traceback in python time clock() method in python deque in python dictionary comprehension in python python data analytics python seek() method ternary operator in python how to calculate the area of the circle using python how to write in text file using python python keyerror python super() function max() function in python fraction module in python popular python framework to build api how to check python version python %s - string formatting python seaborn library countplot in python range() vs. xrange() python wordcloud package in python convert dataframe into list anova test in python python program to find compound interest ansible in python python important tips and tricks python coroutines double underscores in python re.search() vs re.findall() in python regex how to install statsmodels in python cos in python vif in python __add__ method in python ethical hacking with python class variable vs instance perfect number in python eol in python python program to convert hexadecimal string to decimal string different methods in python for swapping two numbers without using third variable how to change plot size in matplotlib how to get the zip code in python eel in python assignment operators in python speech recognition python yield vs return in python graphene python name mangling in python python combination without itertools python comprehensions influxdb in python kafka tutorial in python augmented assignment expressions in python python (x,y) software python event-driven programming python semaphore python sorted reverse automorphic number in python sizeof in python python program for accepting the strings which contains all vowels class-based views vs function-based views how to handle cookies in django agg() function in python amicable numbers in python context manager in python create bmi calculator using python string to binary in python what is script mode in python best python libraries for machine learning python program to display calendar of given year how to open url in python broken pipe error in python code template for creating objects in python python program to calculate the best time to buy and sell stock tuple to string in python kadane's algorithm in python loggers in django weather app in django missing data conundrum: exploration and imputation techniques different methods of array rotation in python what is operator overloading in python defaultdict in python operator module in python spinner widget in the kivy library of python number plate recognition using python obfuscating a python program convert string to dictionary in python convert string to json in python dbscan algorithm in python how to write a code for printing the python exception/error hierarchy principal component analysis (pca) with python python program to find number of days between two given dates object recognition using python python vlc module set to list in python string to int in python internet of things with python python pysftp module amazing hacks of python average of list in python check installed modules in python choice() in python convert list to dataframe in python convert string to float in python decorators with parameters in python dynamic typing in python fabs in python how to remove decimal in python python closure python glob module writing a python module modules vs packages in python snmp module in python average of list in python append vs extend vs insert in python how to remove duplicates from a list in python remove multiple characters from a string in python shuffle in python floor() and ceil() functions in python sqrt(): math function of python python yfinance module difflib module in python convert the column type from string to datetime format in pandas dataframe python wxpython module random uniform python relational operators in python string to list in python chatbot in python how to convert float to int in python multiply all elements in list of python module vs function in python reverse a tuple in python tuple to dictionary in python datetime.timedelta() function of python python bio module python dash module how to select rows in pandas dataframe based on conditions typecasting in python dateutil module in python getpass module in python python wand library generate a qr code using python best python pdf library python cachetools module python cmdparser module python dash module python emoji module python nmap module python pylab module working with pdf files in python pdf handling in python manipulating pdf using python list all functions from a python module python list of dictionaries python shelve module creating interactive pdf forms using python python newspaper module how to connect wi-fi using python best python libraries used for ethical hacking windows system administration management using python indentation error in python python imaplib module python lxml module python mayavi module python os.listdir() method python modules for automation data visualization in python using bokeh library how to plot glyphs over a google map by using bokeh library in python how to plot a pie chart using bokeh library in python how to read contents of pdf using ocr in python grammar and spell checker in python converting html to pdf files using python readlines in python how to plot multiple lines on a graph using bokeh in python bokeh.plotting.figure.circle_x() function in python bokeh.plotting.figure.diamond_cross() function in python how to plot rays on a graph using bokeh in python image steganography using python inconsistent use of tabs and spaces in indentation how to plot multiple plots using bokeh in python how to make an area plot in python using bokeh python chempy module python memory-profiler module python phonenumbers module python platform module typeerror string indices must be an integer time series forecasting with prophet in python python pexpect module python optparse module int object is not iterable. python peewee library some cryptocurrency libraries for python building a blockchain using python huffman coding using python nested dictionary in python collections.userstring in python how to customize legends with matplotlib matplotlib legend in subplot morphological operations in image processing in python role of python in artificial intelligence python instagramy module python pprint module python primepy module android development using python python fbchat library artificial intelligence in cybersecurity: pitting algorithms vs algorithms understanding the recognition pattern of artificial intelligence when and how to leverage lambda architecture in big data why should we learn python for data science how to change the "legend" position in matplotlib how to check if element exists in list in python how to check spellings of given words using enchant in python python program to count the number of matching characters in a pair of string ping pong game using turtle in python python function to display calendar python program for calculating the sum of squares of first n natural numbers python program for how to check if a given number is fibonacci number or not randint() function in python visualize tiff file using matplotlib and gdal in python rarfile module in python stemming words using python python program for word guessing game blockchain in healthcare: innovations & opportunities snake game in python using turtle module how to find armstrong numbers between two given integers celery tutorial using python rsme - root mean square error in python building a twitter bot using python python progressbar module python pronouncing module python pyautogui module python pyperclip module how to generate uuid in python python top 10 libraries to learn in 2022 reading netcdf data using python the reprlib module in python how to take multiple input from user in python python zlib library python queue module python yaml parser effective root searching algorithms in python python bz2 module python ipaddress module python pylint module how to process xml in python bisect algorithm functions in python creating and updating powerpoint presentation using python how to change the size of figure drawn with matplotlib keyboard module in python python pyfiglet module creating an mcq quiz game in python statistic with python what is gil in python basic python for java developers how to download youtube videos using python scripts traffic flow simulation in python how to merge and sort two lists in python metacharacters in python write the python program to print all possible combination of integers modulo string formatting in python counters in python python pyautogui library how to draw the mandelbrot set in python python dbm module webcam motion detector in python graphql implementation in django how to implement protobuf in python pyqt library in python how to prettify data structures with pretty print in python encrypt a password in python using bcrypt pyramid framework in python building a telegram bot using python web2py framework in python python os.chdir() method balancing parentheses in python how to provide multiple constructors in python classes profiling the python code python tkinter (gui) python tkinter tkinter button tkinter canvas tkinter checkbutton tkinter entry tkinter frame tkinter label tkinter listbox tkinter menubutton tkinter menu tkinter message tkinter radiobutton tkinter scale tkinter scrollbar tkinter text tkinter toplevel tkinter spinbox tkinter panedwindow tkinter labelframe tkinter messagebox python web blocker introduction building python script script deployment on linux script deployment on windows python mcq python mcq python mcq part 2 related tutorials numpy tutorial django tutorial flask tutorial pandas tutorial pytorch tutorial pygame tutorial matplotlib tutorial opencv tutorial openpyxl tutorial python cgi python design pattern python programs python programs next ? ? prev python set a python set is the collection of the unordered items. each element in the set must be unique, immutable, and the sets remove the duplicate elements. sets are mutable which means we can modify it after its creation. unlike other collections in python, there is no index attached to the elements of the set, i.e., we cannot directly access any element of the set by the index. however, we can print them all together, or we can get the list of elements by looping through the set. creating a set the set can be created by enclosing the comma-separated immutable items with the curly braces {}. python also provides the set() method, which can be used to create the set by the passed sequence. example 1: using curly braces 
days = {"monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"}  
print(days)  
print(type(days))  
print("looping through the set elements ... ")  
for i in days:  
    print(i)  
 output: {'friday', 'tuesday', 'monday', 'saturday', 'thursday', 'sunday', 'wednesday'}
<class 'set'>
looping through the set elements ... 
friday
tuesday
monday
saturday
thursday
sunday
wednesday
 example 2: using set() method 
days = set(["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"])  
print(days)  
print(type(days))  
print("looping through the set elements ... ")  
for i in days:  
    print(i)  
 output: {'friday', 'wednesday', 'thursday', 'saturday', 'monday', 'tuesday', 'sunday'}
<class 'set'>
looping through the set elements ... 
friday
wednesday
thursday
saturday
monday
tuesday
sunday
 it can contain any type of element such as integer, float, tuple etc. but mutable elements (list, dictionary, set) can't be a member of set. consider the following example. 
# creating a set which have immutable elements
set1 = {1,2,3, "javatpoint", 20.5, 14}
print(type(set1))
#creating a set which have mutable element
set2 = {1,2,3,["javatpoint",4]}
print(type(set2))
 output: <class 'set'>

traceback (most recent call last)
<ipython-input-5-9605bb6fbc68> in <module>
      4 
      5 #creating a set which holds mutable elements
----> 6 set2 = {1,2,3,["javatpoint",4]}
      7 print(type(set2))

typeerror: unhashable type: 'list'
 in the above code, we have created two sets, the set set1 have immutable elements and set2 have one mutable element as a list. while checking the type of set2, it raised an error, which means set can contain only immutable elements. creating an empty set is a bit different because empty curly {} braces are also used to create a dictionary as well. so python provides the set() method used without an argument to create an empty set. 
# empty curly braces will create dictionary
set3 = {}
print(type(set3))

# empty set using set() function
set4 = set()
print(type(set4))
 output: <class 'dict'>
<class 'set'>
 let's see what happened if we provide the duplicate element to the set. 
set5 = {1,2,4,4,5,8,9,9,10}
print("return set with unique elements:",set5)
 output: return set with unique elements: {1, 2, 4, 5, 8, 9, 10}
 in the above code, we can see that set5 consisted of multiple duplicate elements when we printed it remove the duplicity from the set. adding items to the set python provides the add() method and update() method which can be used to add some particular item to the set. the add() method is used to add a single element whereas the update() method is used to add multiple elements to the set. consider the following example. example: 1 - using add() method 
months = set(["january","february", "march", "april", "may", "june"])  
print("\nprinting the original set ... ")  
print(months)  
print("\nadding other months to the set...");  
months.add("july");  
months.add ("august");  
print("\nprinting the modified set...");  
print(months)  
print("\nlooping through the set elements ... ")  
for i in months:  
    print(i)  
 output: printing the original set ... 
{'february', 'may', 'april', 'march', 'june', 'january'}

adding other months to the set...

printing the modified set...
{'february', 'july', 'may', 'april', 'march', 'august', 'june', 'january'}

looping through the set elements ... 
february
july
may
april
march
august
june
january 
 to add more than one item in the set, python provides the update() method. it accepts iterable as an argument. consider the following example. example - 2 using update() function 
months = set(["january","february", "march", "april", "may", "june"])  
print("\nprinting the original set ... ")  
print(months)  
print("\nupdating the original set ... ")  
months.update(["july","august","september","october"]);  
print("\nprinting the modified set ... ")   
print(months);
 output: printing the original set ... 
{'january', 'february', 'april', 'may', 'june', 'march'}

updating the original set ... 
printing the modified set ... 
{'january', 'february', 'april', 'august', 'october', 'may', 'june', 'july', 'september', 'march'}
 removing items from the set python provides the discard() method and remove() method which can be used to remove the items from the set. the difference between these function, using discard() function if the item does not exist in the set then the set remain unchanged whereas remove() method will through an error. consider the following example. example-1 using discard() method 
months = set(["january","february", "march", "april", "may", "june"])  
print("\nprinting the original set ... ")  
print(months)  
print("\nremoving some months from the set...");  
months.discard("january");  
months.discard("may");  
print("\nprinting the modified set...");  
print(months)  
print("\nlooping through the set elements ... ")  
for i in months:  
    print(i)  
 output: printing the original set ... 
{'february', 'january', 'march', 'april', 'june', 'may'}

removing some months from the set...

printing the modified set...
{'february', 'march', 'april', 'june'}

looping through the set elements ... 
february
march
april
june
 python provides also the remove() method to remove the item from the set. consider the following example to remove the items using remove() method. example-2 using remove() function 
months = set(["january","february", "march", "april", "may", "june"])  
print("\nprinting the original set ... ")  
print(months)  
print("\nremoving some months from the set...");  
months.remove("january");  
months.remove("may");  
print("\nprinting the modified set...");  
print(months)  
 output: printing the original set ... 
{'february', 'june', 'april', 'may', 'january', 'march'}

removing some months from the set...

printing the modified set...
{'february', 'june', 'april', 'march'}
 we can also use the pop() method to remove the item. generally, the pop() method will always remove the last item but the set is unordered, we can't determine which element will be popped from set. consider the following example to remove the item from the set using pop() method. 
months = set(["january","february", "march", "april", "may", "june"])  
print("\nprinting the original set ... ")  
print(months)  
print("\nremoving some months from the set...");  
months.pop();  
months.pop();  
print("\nprinting the modified set...");  
print(months)  
 output: printing the original set ... 
{'june', 'january', 'may', 'april', 'february', 'march'}

removing some months from the set...

printing the modified set...
{'may', 'april', 'february', 'march'}
 in the above code, the last element of the month set is march but the pop() method removed the june and january because the set is unordered and the pop() method could not determine the last element of the set. python provides the clear() method to remove all the items from the set. consider the following example. 
months = set(["january","february", "march", "april", "may", "june"])  
print("\nprinting the original set ... ")  
print(months)  
print("\nremoving all the items from the set...");  
months.clear()  
print("\nprinting the modified set...")  
print(months)  
 output: printing the original set ... 
{'january', 'may', 'june', 'april', 'march', 'february'}

removing all the items from the set...

printing the modified set...
set()
 difference between discard() and remove() despite the fact that discard() and remove() method both perform the same task, there is one main difference between discard() and remove(). if the key to be deleted from the set using discard() doesn't exist in the set, the python will not give the error. the program maintains its control flow. on the other hand, if the item to be deleted from the set using remove() doesn't exist in the set, the python will raise an error. consider the following example. example- 
months = set(["january","february", "march", "april", "may", "june"])  
print("\nprinting the original set ... ")  
print(months)  
print("\nremoving items through discard() method...");  
months.discard("feb"); #will not give an error although the key feb is not available in the set  
print("\nprinting the modified set...")  
print(months)  
print("\nremoving items through remove() method...");  
months.remove("jan") #will give an error as the key jan is not available in the set.   
print("\nprinting the modified set...")  
print(months)  
 output: printing the original set ... 
{'march', 'january', 'april', 'june', 'february', 'may'}

removing items through discard() method...

printing the modified set...
{'march', 'january', 'april', 'june', 'february', 'may'}

removing items through remove() method...
traceback (most recent call last):
  file "set.py", line 9, in 
    months.remove("jan")
keyerror: 'jan'
 python set operations set can be performed mathematical operation such as union, intersection, difference, and symmetric difference. python provides the facility to carry out these operations with operators or methods. we describe these operations as follows. union of two sets the union of two sets is calculated by using the pipe (|) operator. the union of the two sets contains all the items that are present in both the sets. consider the following example to calculate the union of two sets. example 1: using union | operator 
days1 = {"monday","tuesday","wednesday","thursday", "sunday"}  
days2 = {"friday","saturday","sunday"}  
print(days1|days2) #printing the union of the sets   
 output: {'friday', 'sunday', 'saturday', 'tuesday', 'wednesday', 'monday', 'thursday'}
 python also provides the union() method which can also be used to calculate the union of two sets. consider the following example. example 2: using union() method 
days1 = {"monday","tuesday","wednesday","thursday"}  
days2 = {"friday","saturday","sunday"}  
print(days1.union(days2)) #printing the union of the sets   
 output: {'friday', 'monday', 'tuesday', 'thursday', 'wednesday', 'sunday', 'saturday'}
 intersection of two sets the intersection of two sets can be performed by the and & operator or the intersection() function. the intersection of the two sets is given as the set of the elements that common in both sets. consider the following example. example 1: using & operator 
days1 = {"monday","tuesday", "wednesday", "thursday"}  
days2 = {"monday","tuesday","sunday", "friday"}  
print(days1&days2) #prints the intersection of the two sets  
 output: {'monday', 'tuesday'}
 example 2: using intersection() method 
set1 = {"devansh","john", "david", "martin"}  
set2 = {"steve", "milan", "david", "martin"}  
print(set1.intersection(set2)) #prints the intersection of the two sets  
 output: {'martin', 'david'}
 example 3: 
set1 = {1,2,3,4,5,6,7}
set2 = {1,2,20,32,5,9}
set3 = set1.intersection(set2)
print(set3)
 output: {1,2,5}
 the intersection_update() method the intersection_update() method removes the items from the original set that are not present in both the sets (all the sets if more than one are specified). the intersection_update() method is different from the intersection() method since it modifies the original set by removing the unwanted items, on the other hand, the intersection() method returns a new set. consider the following example. 
a = {"devansh", "bob", "castle"}  
b = {"castle", "dude", "emyway"}  
c = {"fuson", "gaurav", "castle"}  
  
a.intersection_update(b, c)  
  
print(a)  
 output: {'castle'}
 difference between the two sets the difference of two sets can be calculated by using the subtraction (-) operator or intersection() method. suppose there are two sets a and b, and the difference is a-b that denotes the resulting set will be obtained that element of a, which is not present in the set b. consider the following example. example 1 : using subtraction ( - ) operator 
days1 = {"monday",  "tuesday", "wednesday", "thursday"}  
days2 = {"monday", "tuesday", "sunday"}  
print(days1-days2) #{"wednesday", "thursday" will be printed}  
 output: {'thursday', 'wednesday'}
 example 2 : using difference() method 
days1 = {"monday",  "tuesday", "wednesday", "thursday"}  
days2 = {"monday", "tuesday", "sunday"}  
print(days1.difference(days2)) # prints the difference of the two sets days1 and days2  
 output: {'thursday', 'wednesday'}
 symmetric difference of two sets the symmetric difference of two sets is calculated by ^ operator or symmetric_difference() method. symmetric difference of sets, it removes that element which is present in both sets. consider the following example: example - 1: using ^ operator 
a = {1,2,3,4,5,6}
b = {1,2,9,8,10}
c = a^b
print(c)
 output: {3, 4, 5, 6, 8, 9, 10}
 example - 2: using symmetric_difference() method 
a = {1,2,3,4,5,6}
b = {1,2,9,8,10}
c = a.symmetric_difference(b)
print(c)
 output: {3, 4, 5, 6, 8, 9, 10}
 set comparisons python allows us to use the comparison operators i.e., <, >, <=, >= , == with the sets by using which we can check whether a set is a subset, superset, or equivalent to other set. the boolean true or false is returned depending upon the items present inside the sets. consider the following example. 
days1 = {"monday",  "tuesday", "wednesday", "thursday"}  
days2 = {"monday", "tuesday"}  
days3 = {"monday", "tuesday", "friday"}  
  
#days1 is the superset of days2 hence it will print true.   
print (days1>days2)   
  
#prints false since days1 is not the subset of days2   
print (days1<days2)  
  
#prints false since days2 and days3 are not equivalent   
print (days2 == days3)  
 output: true
false
false
 frozensets the frozen sets are the immutable form of the normal sets, i.e., the items of the frozen set cannot be changed and therefore it can be used as a key in the dictionary. the elements of the frozen set cannot be changed after the creation. we cannot change or append the content of the frozen sets by using the methods like add() or remove(). the frozenset() method is used to create the frozenset object. the iterable sequence is passed into this method which is converted into the frozen set as a return type of the method. consider the following example to create the frozen set. 
frozenset = frozenset([1,2,3,4,5])   
print(type(frozenset))  
print("\nprinting the content of frozen set...")  
for i in frozenset:  
    print(i);  
frozenset.add(6) #gives an error since we cannot change the content of frozenset after creation   
 output: <class 'frozenset'>

printing the content of frozen set...
1
2
3
4
5
traceback (most recent call last):
  file "set.py", line 6, in <module>
    frozenset.add(6) #gives an error since we can change the content of frozenset after creation 
attributeerror: 'frozenset' object has no attribute 'add'
 frozenset for the dictionary if we pass the dictionary as the sequence inside the frozenset() method, it will take only the keys from the dictionary and returns a frozenset that contains the key of the dictionary as its elements. consider the following example. 
dictionary = {"name":"john", "country":"usa", "id":101}   
print(type(dictionary))  
frozenset = frozenset(dictionary); #frozenset will contain the keys of the dictionary  
print(type(frozenset))  
for i in frozenset:   
    print(i)  
 output: <class 'dict'>
<class 'frozenset'>
name
country
id
 set programming example example - 1: write a program to remove the given number from the set. 
my_set = {1,2,3,4,5,6,12,24}
n = int(input("enter the number you want to remove"))
my_set.discard(n)
print("after removing:",my_set)
 output: enter the number you want to remove:12
after removing: {1, 2, 3, 4, 5, 6, 24}
 example - 2: write a program to add multiple elements to the set. 
set1 = set([1,2,4,"john","cs"])
set1.update(["apple","mango","grapes"])
print(set1)
 output: {1, 2, 4, 'apple', 'john', 'cs', 'mango', 'grapes'}
 example - 3: write a program to find the union between two set. 
set1 = set(["peter","joseph", 65,59,96])
set2  = set(["peter",1,2,"joseph"])
set3 = set1.union(set2)
print(set3)
 output: {96, 65, 2, 'joseph', 1, 'peter', 59}
 example- 4: write a program to find the intersection between two sets. 
set1 = {23,44,56,67,90,45,"javatpoint"}
set2 = {13,23,56,76,"sachin"}
set3 = set1.intersection(set2)
print(set3)
 output: {56, 23}
 example - 5: write the program to add element to the frozenset. 
set1 = {23,44,56,67,90,45,"javatpoint"}
set2 = {13,23,56,76,"sachin"}
set3 = set1.intersection(set2)
print(set3)
 output: typeerror: 'frozenset' object does not support item assignment
 above code raised an error because frozensets are immutable and can't be changed after creation. example - 6: write the program to find the issuperset, issubset and superset. 
set1 = set(["peter","james","camroon","ricky","donald"])
set2 = set(["camroon","washington","peter"])
set3 = set(["peter"])

issubset = set1 >= set2
print(issubset)
issuperset = set1 <= set2
print(issuperset)
issubset = set3 <= set2
print(issubset)
issuperset = set2 >= set3
print(issuperset)
 output: false
false
true
true
 python built-in set methods python contains the following methods to be used with the sets. sn method description 1 add(item) it adds an item to the set. it has no effect if the item is already present in the set. 2 clear() it deletes all the items from the set. 3 copy() it returns a shallow copy of the set. 4 difference_update(....) it modifies this set by removing all the items that are also present in the specified sets. 5 discard(item) it removes the specified item from the set. 6 intersection() it returns a new set that contains only the common elements of both the sets. (all the sets if more than two are specified). 7 intersection_update(....) it removes the items from the original set that are not present in both the sets (all the sets if more than one are specified). 8 isdisjoint(....) return true if two sets have a null intersection. 9 issubset(....) report whether another set contains this set. 10 issuperset(....) report whether this set contains another set. 11 pop() remove and return an arbitrary set element that is the last element of the set. raises keyerror if the set is empty. 12 remove(item) remove an element from a set; it must be a member. if the element is not a member, raise a keyerror. 13 symmetric_difference(....) remove an element from a set; it must be a member. if the element is not a member, raise a keyerror. 14 symmetric_difference_update(....) update a set with the symmetric difference of itself and another. 15 union(....) return the union of sets as a new set. (i.e. all elements that are in either set.) 16 update() update a set with the union of itself and others. next topicpython dictionary ? prev next ? for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
