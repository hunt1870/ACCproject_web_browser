https://www.javatpoint.com/tic-tac-toe-in-python::tic-tac-toe in python - javatpoint ? scroll to top home python if else for loop function array string regex list set tuple dictionary programs numpy interview questions python tutorial python tutorial python features python history python applications python install python example python variables python data types python keywords python literals python operators python comments python if else python loops python for loop python while loop python break python continue python pass python strings python lists python tuples python list vs tuple python sets python dictionary python functions python built-in functions python lambda functions python files i/o python modules python exceptions python date python regex python sending email read csv file write csv file read excel file write excel file python assert python list comprehension python collection module python math module python os module python random module python statistics module python sys module python ides python arrays command line arguments python magic method python stack & queue pyspark mllib python decorator python generators web scraping using python python json python itertools python multiprocessing how to calculate distance between two points using geopy gmail api in python how to plot the google map using folium package in python grid search in python python high order function nsetools in python python program to find the nth fibonacci number python opencv object detection python simpleimputer module second largest number in python python oops python oops concepts python object class python constructors python inheritance abstraction in python python mysql environment setup database connection creating new database creating tables insert operation read operation update operation join operation performing transactions python mongodb python mongodb python sqlite python sqlite python questions how to install python in windows how to reverse a string in python how to read csv file in python how to run python program how to take input in python how to convert list to string in python how to append element in the list how to compare two lists in python how to convert int to string in python how to create a dictionary in python how to create a virtual environment in python how to declare a variable in python how to install matplotlib in python how to install opencv in python how to print in same line in python how to read json file in python how to read a text file in python how to use for loop in python is python scripting language how long does it take to learn python how to concatenate two strings in python how to connect database in python how to convert list to dictionary in python how to declare a global variable in python how to reverse a number in python what is an object in python which is the fastest implementation of python how to clear python shell how to create a dataframes in python how to develop a game in python how to install tkinter in python how to plot a graph in python how to print pattern in python how to remove an element from a list in python how to round number in python how to sort a dictionary in python strong number in python how to convert text to speech in python bubble sort in python logging in python insertion sort in python binary search in python linear search in python python vs scala queue in python stack in python heap sort in python palindrome program in python program of cumulative sum in python merge sort in python python matrix python unit testing forensics & virtualization best books to learn python best books to learn django gcd of two number in python python program to generate a random string how to one hot encode sequence data in python how to write square root in python pointer in python python 2d array python memory management python libraries for data visualization how to call a function in python git modules in python top python frameworks for gaming python audio modules wikipedia module in python python random randrange() permutation and combination in python getopt module in python merge two dictionaries in python multithreading in python 3 static in python how to get the current date in python argparse in python python tqdm module caesar cipher in python tokenizer in python how to add two lists in python shallow copy and deep copy in python atom python contains in python label encoding in python django vs. node js python frameworks how to create a vector in python using numpy pickle module of python how to convert bytes to string in python python program to find anagram how to convert list to set python vs javascript python holidays module fuzzywuzzy python library dask python dask python (part 2) mode in python menu-driven programs in python python array vs. list what is duck typing in python pep 8 in python python user groups basic commands in python f string in python how brython works how to use brython in the browser arima model in python python modulus operator matlab vs. python method resolution order in python monkey patching in python python __call__ method python heapq module python substring project ideas for python beginners python faker fizz-buzz program in python tabula python python program to print prime factor of given number python program to print pascal triangle namedtuple in python ordereddict in python t-test in python python return statement getter and setter in python enum class in python destructors in python curve fit in python converting csv to json in python underscore (_) in python set vs list in python locating and executing modules flatten list in python pair plot in python data hiding in python python program to find intersection of two lists how to create requirements.txt file in python tic-tac-toe in python python asynchronous programming - asyncio and await python main() function strftime() function in python verbose flag in python regex python ast module python requests module - http request shutil module in python python epoch to datetime python del statement looping technique in python metaprogramming with metaclasses in python precision handling in python python join list strip() function in python gradient descent algorithm prettytable in python sentiment analysis in python convert python list to numpy arrays traceback in python time clock() method in python deque in python dictionary comprehension in python python data analytics python seek() method ternary operator in python how to calculate the area of the circle using python how to write in text file using python python keyerror python super() function max() function in python fraction module in python popular python framework to build api how to check python version python %s - string formatting python seaborn library countplot in python range() vs. xrange() python wordcloud package in python convert dataframe into list anova test in python python program to find compound interest ansible in python python important tips and tricks python coroutines double underscores in python re.search() vs re.findall() in python regex how to install statsmodels in python cos in python vif in python __add__ method in python ethical hacking with python class variable vs instance perfect number in python eol in python python program to convert hexadecimal string to decimal string different methods in python for swapping two numbers without using third variable how to change plot size in matplotlib how to get the zip code in python eel in python assignment operators in python speech recognition python yield vs return in python graphene python name mangling in python python combination without itertools python comprehensions influxdb in python kafka tutorial in python augmented assignment expressions in python python (x,y) software python event-driven programming python semaphore python sorted reverse automorphic number in python sizeof in python python program for accepting the strings which contains all vowels class-based views vs function-based views how to handle cookies in django agg() function in python amicable numbers in python context manager in python create bmi calculator using python string to binary in python what is script mode in python best python libraries for machine learning python program to display calendar of given year how to open url in python broken pipe error in python code template for creating objects in python python program to calculate the best time to buy and sell stock tuple to string in python kadane's algorithm in python loggers in django weather app in django missing data conundrum: exploration and imputation techniques different methods of array rotation in python what is operator overloading in python defaultdict in python operator module in python spinner widget in the kivy library of python number plate recognition using python obfuscating a python program convert string to dictionary in python convert string to json in python dbscan algorithm in python how to write a code for printing the python exception/error hierarchy principal component analysis (pca) with python python program to find number of days between two given dates object recognition using python python vlc module set to list in python string to int in python internet of things with python python pysftp module amazing hacks of python average of list in python check installed modules in python choice() in python convert list to dataframe in python convert string to float in python decorators with parameters in python dynamic typing in python fabs in python how to remove decimal in python python closure python glob module writing a python module modules vs packages in python snmp module in python average of list in python append vs extend vs insert in python how to remove duplicates from a list in python remove multiple characters from a string in python shuffle in python floor() and ceil() functions in python sqrt(): math function of python python yfinance module difflib module in python convert the column type from string to datetime format in pandas dataframe python wxpython module random uniform python relational operators in python string to list in python chatbot in python how to convert float to int in python multiply all elements in list of python module vs function in python reverse a tuple in python tuple to dictionary in python datetime.timedelta() function of python python bio module python dash module how to select rows in pandas dataframe based on conditions typecasting in python dateutil module in python getpass module in python python wand library generate a qr code using python best python pdf library python cachetools module python cmdparser module python dash module python emoji module python nmap module python pylab module working with pdf files in python pdf handling in python manipulating pdf using python list all functions from a python module python list of dictionaries python shelve module creating interactive pdf forms using python python newspaper module how to connect wi-fi using python best python libraries used for ethical hacking windows system administration management using python indentation error in python python imaplib module python lxml module python mayavi module python os.listdir() method python modules for automation data visualization in python using bokeh library how to plot glyphs over a google map by using bokeh library in python how to plot a pie chart using bokeh library in python how to read contents of pdf using ocr in python grammar and spell checker in python converting html to pdf files using python readlines in python how to plot multiple lines on a graph using bokeh in python bokeh.plotting.figure.circle_x() function in python bokeh.plotting.figure.diamond_cross() function in python how to plot rays on a graph using bokeh in python image steganography using python inconsistent use of tabs and spaces in indentation how to plot multiple plots using bokeh in python how to make an area plot in python using bokeh python chempy module python memory-profiler module python phonenumbers module python platform module typeerror string indices must be an integer time series forecasting with prophet in python python pexpect module python optparse module int object is not iterable. python peewee library some cryptocurrency libraries for python building a blockchain using python huffman coding using python nested dictionary in python collections.userstring in python how to customize legends with matplotlib matplotlib legend in subplot morphological operations in image processing in python role of python in artificial intelligence python instagramy module python pprint module python primepy module android development using python python fbchat library artificial intelligence in cybersecurity: pitting algorithms vs algorithms understanding the recognition pattern of artificial intelligence when and how to leverage lambda architecture in big data why should we learn python for data science how to change the "legend" position in matplotlib how to check if element exists in list in python how to check spellings of given words using enchant in python python program to count the number of matching characters in a pair of string ping pong game using turtle in python python function to display calendar python program for calculating the sum of squares of first n natural numbers python program for how to check if a given number is fibonacci number or not randint() function in python visualize tiff file using matplotlib and gdal in python rarfile module in python stemming words using python python program for word guessing game blockchain in healthcare: innovations & opportunities snake game in python using turtle module how to find armstrong numbers between two given integers celery tutorial using python rsme - root mean square error in python building a twitter bot using python python progressbar module python pronouncing module python pyautogui module python pyperclip module how to generate uuid in python python top 10 libraries to learn in 2022 reading netcdf data using python the reprlib module in python how to take multiple input from user in python python zlib library python queue module python yaml parser effective root searching algorithms in python python bz2 module python ipaddress module python pylint module how to process xml in python bisect algorithm functions in python creating and updating powerpoint presentation using python how to change the size of figure drawn with matplotlib keyboard module in python python pyfiglet module creating an mcq quiz game in python statistic with python what is gil in python basic python for java developers how to download youtube videos using python scripts traffic flow simulation in python how to merge and sort two lists in python metacharacters in python write the python program to print all possible combination of integers modulo string formatting in python counters in python python pyautogui library how to draw the mandelbrot set in python python dbm module webcam motion detector in python graphql implementation in django how to implement protobuf in python pyqt library in python how to prettify data structures with pretty print in python encrypt a password in python using bcrypt pyramid framework in python building a telegram bot using python web2py framework in python python os.chdir() method balancing parentheses in python how to provide multiple constructors in python classes profiling the python code python tkinter (gui) python tkinter tkinter button tkinter canvas tkinter checkbutton tkinter entry tkinter frame tkinter label tkinter listbox tkinter menubutton tkinter menu tkinter message tkinter radiobutton tkinter scale tkinter scrollbar tkinter text tkinter toplevel tkinter spinbox tkinter panedwindow tkinter labelframe tkinter messagebox python web blocker introduction building python script script deployment on linux script deployment on windows python mcq python mcq python mcq part 2 related tutorials numpy tutorial django tutorial flask tutorial pandas tutorial pytorch tutorial pygame tutorial matplotlib tutorial opencv tutorial openpyxl tutorial python cgi python design pattern python programs python programs next ? ? prev tic-tac-toe in python in the following tutorial, we will create a game known as tic-tac-toe using the python programming language from scratch. we have divided the whole program into various steps for better understanding. but before we get into the procedure, let us understand about the game. what is tic-tac-toe? tic-tac-toe is among the games played between two players played on a 3 x 3 square grid. each player inhabits a cell in their respective turns, keeping the objective of placing three similar marks in a vertical, horizontal, or diagonal pattern. the first player utilizes the cross (x) as the marker, whereas the other utilizes the naught or zero (o). now, let us understand the design of tic-tac-toe. design of tic-tac-toe we will be using the command prompt in order to play tic-tac-toe. thus, it is the primary objective to construct a design for the tic-tac-toe game. objective: if a player needs to mark a specific block, he/she must input the corresponding digit displayed in the grid. for instance, we wanted to occupy the upper right block, and then we have to enter digit 3 in the terminal. let us understand the snippet of code to generate the grid. program: 
# function to print the tic-tac-toe design
def mytictactoe(val):
    print("\n")
    print("\t     |     |")
    print("\t  {}  |  {}  |  {}".format(val[0], val[1], val[2]))
    print('\t_____|_____|_____')
 
    print("\t     |     |")
    print("\t  {}  |  {}  |  {}".format(val[3], val[4], val[5]))
    print('\t_____|_____|_____')
 
    print("\t     |     |")
 
    print("\t  {}  |  {}  |  {}".format(val[6], val[7], val[8]))
    print("\t     |     |")
    print("\n")
 explanation: in the above snippet of code, we have defined a function for the tic-tac-toe game that takes the values as the parameter. here the val parameter is a list consists of the status of each cell in the grid. within the function, we have then printed the design of the tic-tac-toe grid. now, the next step is to store the data with the help of data structures. storing data using the data structures the principle of any game relies on the mechanics behind the game. since we are creating a relatively simple and easy game, the mechanics included are simple as well. at any point in time, there are two crucial pieces of information required: grid status:we have to create a data structure that will contain the state of each cell. the state can either be occupied or vacant. moves of each player:the knowledge of past and present moves of each player is somehow required, that is, the positions occupied by 'x' and 'o'. note: the above data can be accessed with the help of grid status. however, it will require us to traverse this information every time we want the positions of the player. this can be known as time versus space complexity trade-off. it is a general technique in order to conserve time. the syntax for the same is shown below: snippet of code: 
# function for a single game of tic-tac-toe
def singlegame(curplayer):
    # representing the tic-tac-toe
    val = [' ' for i in range(9)]
     
    # storing the positions occupied by x and o
    playerpos = {'x' : [], 'o' : []}
 explanation: in the above snippet of code, we have defined a function for a single game of tic-tac-toe where the val represents the parameter for the previous function and playerpos stores the position of the block occupied by the cross (x) and naught (o), respectively. there are generally three values in a list of characters that manages the grid status: ' ' - this character signifies the vacant or empty cell. 'x' - this character signifies that a cell is inhabited by the x player. 'o' - this character signifies that a cell is inhabited by the o player. moves of each player are kept as a dictionary of a list of integers where the keys are denoted by 'x' and 'o' for the corresponding player. their respective lists consist of the digits provided to the cells in the grid they inhabit. note: the curplayer variable stores the current player making a move, as in 'x' or 'o'. understanding the game loop every game consists of some type of game loop that allows the player to play the game until a player wins or the game is a tie. in the game of tic-tac-toe, every loop iteration denotes a single move made by any player. let us consider the following snippet of code in order to design the game loop. syntax: 
# loop of game for a single game of tic-tac-toe
while true:
    mytictactoe(val)
 explanation: as we can observe, we have used the while loop to print the values for the function mytictactoe(), generating a game loop for a single game of tic-tac-toe. handling the input from player for every iteration in the game, the player has to provide the input for his move. let us consider the following syntax in order to handle the player's input. syntax: 
# try-exception block for chance input
try:
    print("player ", curplayer, " turn. choose your block : ", end="")
    chance = int(input())
except valueerror:
    print("invalid input!!! try again")
    continue

# sanity check for chance input
if chance < 1 or chance > 9:
    print("invalid input!!! try again")
    continue
 
# checking if the block is not occupied already
if val[chance - 1] != ' ':
    print("oops! the place is already occupied. try again!!")
    continue
 explanation: for the above snippet of code, we have created a try block to handle the unintended value of the players. we have then handled the exception of valueerror so that the game must not be stopped. later we have performed few sanity checks, such as whether the entered value is a valid position or not, and if it is a valid position, is it filled already? now, let us move onto the next step. updating the game information as per the input provided by the player, we have to update the information for the smooth working of the game. we can update the game information by adding the following snippet of code to the main project. syntax: 
# updating the game information
 
# update the status of the grid
val[chance - 1] = curplayer
 
# update the positions of the player
playerpos[curplayer].append(chance)
 explanation: in the above snippet of code, we have updated the game information by updating the status of the grid and the position of the player. the val list will update the cell filled as per the current player. the position of the player will add the position just occupied by the current player. once the val list is updated, we will call the mytictactoe() function, and the grid would look like the following: output:              |     |
          1  |  2  |  3
        _____|_____|_____
             |     |
          4  |  5  |  6
        _____|_____|_____
             |     |
          7  |  8  |  9
             |     |
 checking win or tie after each move, we need to check if any player has won the match or the match has been tied. we can check it with the help of the syntax given below: syntax: 
# calling function to check victory
if check_victory(playerpos, curplayer):
    mytictactoe(val)
    print("congratulations! player ", curplayer, " has won the game!")     
    print("\n")
    return curplayer
    
# calling function to check tie
if check_tie(playerpos):
    mytictactoe(val)
    print("oh! game tied")
    print("\n")
    return 'd'
 explanation: in the above syntax, we have used the if statement to check for win or tie. the singlegame() function will return the current player if he/she wins the game. otherwise, the game is tied, 'd' is sent back. let us consider the function checking whether any player has won. syntax: 
# defining function to check victory
def check_victory(playerpos, curplayer):
 
    # all probable winning combinations
    solution = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 4, 7], [2, 5, 8], [3, 6, 9], [1, 5, 9], [3, 5, 7]]
 
    # loop to check whether any winning combination is satisfied or not
    for i in solution:
        if all(j in playerpos[curplayer] for j in i):
 
            # return true if any winning combination is satisfied
            return true
    # return false if no combination is satisfied 
    return false       
 
# defining function to check if the game is tied
def check_tie(playerpos):
    if len(playerpos['x']) + len(playerpos['o']) == 9:
        return true
    return false   
 explanation: in the above snippet of code, we have defined the functions to check the victory or tie. these functions are check_victory() and check_tie(), respectively. check_victory(): it stores all the combinations for winning the game. the function checks if the position of the current player satisfies any of the winning combinations. if it does, it will return true; else, it will false for not satisfying the requirement. check_tie(): it is pretty simple, which checks if all 'nine' positions are occupied, the game is tied. switching the current player every player got only one chance at a time. thus, after every successful more, the current player will be swapped. let us consider the following snippet of code for the same: syntax: 
# switching moves of the player
if curplayer == 'x':
    curplayer = 'o'
else:
    curplayer = 'x'
 explanation: in the following snippet of code, we have used the if-else statement in order to switch moves of the player in such a way that if the current player marks one position, then the current player will be changed, and the other player will mark their move. these are some steps we need to be concerned about while making a single game. however, we will be creating a scoreboard system to keep track of the players wanting to play multiple games. entering the names of the players since we are creating a scoreboard, it becomes necessary for us to display the names of each player. here is the syntax is shown below for the same: syntax: 
if __name__ == "__main__":
 
    print("first player")
    firstplayer = input("specify the name: ")
    print("\n")
 
    print("second player")
    secondplayer = input("specify the name: ")
    print("\n")
 explanation: as we can observe, we have used the special variable __name__ to have the value of "__main__". we have then provided the input for the names of the first and second players, respectively. this will become the entry point for the program, and when the program we will be executed, it will ask for the names first. storing the information regarding the game we have to store the information such as the current player, the player's selection (i.e., x or o), the available selections (x or o), and the scoreboard. syntax: 
# storing the player who chooses x and o
curplayer = firstplayer
 
# storing the players' choice
playerchoice = {'x' : "", 'o' : ""}
 
# storing the options
opt = ['x', 'o']
 
# storing the scoreboard
scoreboard = {firstplayer: 0, secondplayer: 0}
myscoreboard(scoreboard)
 explanation: in the above snippet of code, we have set the current player as the first player. we have also stored the selections made by players, available options, and the scoreboard. designing the scoreboard we will design a scoreboard in a dictionary data structure. for this scoreboard, the player names will act as the keys, and their total number of victories will act as the values. let us consider the following snippet of code to design the scoreboard for tic-tac-toe. syntax: 
def myscoreboard(scoreboard):
    print("\t--------------------------------")
    print("\t         score board       ")
    print("\t--------------------------------")
 
    listofplayers = list(scoreboard.keys())
    print("\t   ", listofplayers[0], "\t    ", scoreboard[listofplayers[0]])
    print("\t   ", listofplayers[1], "\t    ", scoreboard[listofplayers[1]])
 
    print("\t--------------------------------\n")
 explanation: in the above snippet of code, we have defined the function as myscoreboard that takes the parameter as the scoreboard. we have then printed the design for the score board. we have defined the variable that stores the names of the players as a list using the .keys() function. we have then indexed them into the scoreboard and displayed the scores. creating an outer game loop in order to maintain multiple matches of tic-tac-toe, we require another loop for the game. the current player will choose the mark for each match. the menu for selection should be displayed in every iteration of the game. let us consider the following syntax to create the outer gamer loop. syntax: 
# loop for a series of tic-tac-toe game
# the loop executes until the players quit
while true:
 
     # main menu for players
     print(curplayer, "will make the choice:")
     print("press 1 for x")
     print("press 2 for o")
     print("press 3 to quit")
 explanation: in the above snippet of code, we have created a while loop to display the main menu for the players where the current player can make the selection between the marks (cross 'x' or naught 'o') or exit the game. output: first player
specify the name: andy


second player
specify the name: carlo


        --------------------------------
                 score board       
        --------------------------------
            andy             0
            carlo            0
        --------------------------------

andy will make the choice:
press 1 for x
press 2 for o
press 3 to quit
 handling and assigning the selections for player we need to handle and store the choice of the current player for each iteration. let us consider the following snippet of code for the same. syntax: 
# try exception for the_choice input
try:
    the_choice = int(input())   
  except valueerror:
    print("invalid input!!! try again\n")
    continue
 
# conditions for player choice  
if the_choice == 1:
    playerchoice['x'] = curplayer
    if curplayer == firstplayer:
        playerchoice['o'] = secondplayer
    else:
        playerchoice['o'] = firstplayer
 
elif the_choice == 2:
     playerchoice['o'] = curplayer
     if curplayer == firstplayer:
         playerchoice['x'] = secondplayer
     else:
         playerchoice['x'] = firstplayer
         
elif the_choice == 3:
     print("the final scores")
     myscoreboard(scoreboard)
     break  
 
else:
     print("invalid selection!! try again\n")
 explanation: in the above snippet of code, we have used the try-exception block to handle any exception for the the_choice input. we have then used the if-else statement to create the choice menu for the current player to select from. as per the selection made by the player, the data will be stored. this is significant as it will tell us which player won after every match. executing the game once all the required information is stored, we can execute an independent match and record the victory mark. the syntax for the same has been shown below. syntax: 
# storing the winner in a single game of tic-tac-toe
win = singlegame(opt[the_choice - 1])
 explanation: in the above snippet of code, we have stored the winner details for a single game of tic-tac-toe. updating the scoreboard we have to update the scoreboard after every match of the tic-tac-toe game. let us consider the following snippet of code to update the scoreboard. syntax: 
# updation of the scoreboard as per the winner
if win != 'd' :
    playerwon = playerchoice[win]
    scoreboard[playerwon] = scoreboard[playerwon] + 1
 
myscoreboard(scoreboard)
 explanation: in the above snippet of code, we have used the if statement to check if the match is not tied. once the match is not drawn, the scoreboard will be updated. switching the selecting player while playing a game, it becomes mandatory to switch the chance of choosing the mark. so, let us consider the following syntax to understanding the swapping. syntax: 
# switching player who chooses x or o
if curplayer == firstplayer:
    curplayer = secondplayer
else:
    curplayer = firstplayer
 explanation: in the above snippet of code, we have again used the if-else statement to switch between the players to choose the marks (cross or naught). hence, we have successfully constructed our very own tic-tac-toe game. the code for the game can be downloaded from this link: click here to download it's gameplay time since all the steps are finally completed, here is the final output for the game. output: first player
specify the name: andy


second player
specify the name: carlo


        --------------------------------
                 score board       
        --------------------------------
            andy             0
            carlo            0
        --------------------------------

andy will make the choice:
press 1 for x
press 2 for o
press 3 to quit
1


             |     |
             |     |
        _____|_____|_____
             |     |
             |     |
        _____|_____|_____
             |     |
             |     |
             |     |


player  x  turn. choose your block : 5


             |     |
             |     |   
        _____|_____|_____
             |     |
             |  x  |   
        _____|_____|_____
             |     |
             |     |   
             |     |


player  o  turn. choose your block : 3


             |     |
             |     |  o
        _____|_____|_____
             |     |
             |  x  |   
        _____|_____|_____
             |     |
             |     |   
             |     |


player  x  turn. choose your block : 1


             |     |
          x  |     |  o
        _____|_____|_____
             |     |
             |  x  |   
        _____|_____|_____
             |     |
             |     |   
             |     |


player  o  turn. choose your block : 9


             |     |
          x  |     |  o
        _____|_____|_____
             |     |
             |  x  |   
        _____|_____|_____
             |     |
             |     |  o
             |     |


player  x  turn. choose your block : 6


             |     |
          x  |     |  o
        _____|_____|_____
             |     |
             |  x  |  x
        _____|_____|_____
             |     |
             |     |  o
             |     |


player  o  turn. choose your block : 4


             |     |
          x  |     |  o
        _____|_____|_____
             |     |
          o  |  x  |  x
        _____|_____|_____
             |     |
             |     |  o
             |     |


player  x  turn. choose your block : 2


             |     |
          x  |  x  |  o
        _____|_____|_____
             |     |
          o  |  x  |  x
        _____|_____|_____
             |     |
             |     |  o
             |     |


player  o  turn. choose your block : 8


             |     |
          x  |  x  |  o
        _____|_____|_____
             |     |
          o  |  x  |  x
        _____|_____|_____
             |     |
             |  o  |  o
             |     |


player  x  turn. choose your block : 7


             |     |
          x  |  x  |  o
        _____|_____|_____
             |     |
          o  |  x  |  x
        _____|_____|_____
             |     |
          x  |  o  |  o
             |     |


game tied


        --------------------------------
                 score board       
        --------------------------------
            andy             0
            carlo            0
        --------------------------------

carlo will make the choice:
press 1 for x
press 2 for o
press 3 to quit
3
the final scores
        --------------------------------
                 score board
        --------------------------------
            andy             0
            carlo            0
        --------------------------------
 next topicpython asynchronous programming - asyncio and await ? prev next ? for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
