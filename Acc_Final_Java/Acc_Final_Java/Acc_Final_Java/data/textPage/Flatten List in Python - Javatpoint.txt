https://www.javatpoint.com/flatten-list-in-python::flatten list in python - javatpoint ? scroll to top home python if else for loop function array string regex list set tuple dictionary programs numpy interview questions python tutorial python tutorial python features python history python applications python install python example python variables python data types python keywords python literals python operators python comments python if else python loops python for loop python while loop python break python continue python pass python strings python lists python tuples python list vs tuple python sets python dictionary python functions python built-in functions python lambda functions python files i/o python modules python exceptions python date python regex python sending email read csv file write csv file read excel file write excel file python assert python list comprehension python collection module python math module python os module python random module python statistics module python sys module python ides python arrays command line arguments python magic method python stack & queue pyspark mllib python decorator python generators web scraping using python python json python itertools python multiprocessing how to calculate distance between two points using geopy gmail api in python how to plot the google map using folium package in python grid search in python python high order function nsetools in python python program to find the nth fibonacci number python opencv object detection python simpleimputer module second largest number in python python oops python oops concepts python object class python constructors python inheritance abstraction in python python mysql environment setup database connection creating new database creating tables insert operation read operation update operation join operation performing transactions python mongodb python mongodb python sqlite python sqlite python questions how to install python in windows how to reverse a string in python how to read csv file in python how to run python program how to take input in python how to convert list to string in python how to append element in the list how to compare two lists in python how to convert int to string in python how to create a dictionary in python how to create a virtual environment in python how to declare a variable in python how to install matplotlib in python how to install opencv in python how to print in same line in python how to read json file in python how to read a text file in python how to use for loop in python is python scripting language how long does it take to learn python how to concatenate two strings in python how to connect database in python how to convert list to dictionary in python how to declare a global variable in python how to reverse a number in python what is an object in python which is the fastest implementation of python how to clear python shell how to create a dataframes in python how to develop a game in python how to install tkinter in python how to plot a graph in python how to print pattern in python how to remove an element from a list in python how to round number in python how to sort a dictionary in python strong number in python how to convert text to speech in python bubble sort in python logging in python insertion sort in python binary search in python linear search in python python vs scala queue in python stack in python heap sort in python palindrome program in python program of cumulative sum in python merge sort in python python matrix python unit testing forensics & virtualization best books to learn python best books to learn django gcd of two number in python python program to generate a random string how to one hot encode sequence data in python how to write square root in python pointer in python python 2d array python memory management python libraries for data visualization how to call a function in python git modules in python top python frameworks for gaming python audio modules wikipedia module in python python random randrange() permutation and combination in python getopt module in python merge two dictionaries in python multithreading in python 3 static in python how to get the current date in python argparse in python python tqdm module caesar cipher in python tokenizer in python how to add two lists in python shallow copy and deep copy in python atom python contains in python label encoding in python django vs. node js python frameworks how to create a vector in python using numpy pickle module of python how to convert bytes to string in python python program to find anagram how to convert list to set python vs javascript python holidays module fuzzywuzzy python library dask python dask python (part 2) mode in python menu-driven programs in python python array vs. list what is duck typing in python pep 8 in python python user groups basic commands in python f string in python how brython works how to use brython in the browser arima model in python python modulus operator matlab vs. python method resolution order in python monkey patching in python python __call__ method python heapq module python substring project ideas for python beginners python faker fizz-buzz program in python tabula python python program to print prime factor of given number python program to print pascal triangle namedtuple in python ordereddict in python t-test in python python return statement getter and setter in python enum class in python destructors in python curve fit in python converting csv to json in python underscore (_) in python set vs list in python locating and executing modules flatten list in python pair plot in python data hiding in python python program to find intersection of two lists how to create requirements.txt file in python tic-tac-toe in python python asynchronous programming - asyncio and await python main() function strftime() function in python verbose flag in python regex python ast module python requests module - http request shutil module in python python epoch to datetime python del statement looping technique in python metaprogramming with metaclasses in python precision handling in python python join list strip() function in python gradient descent algorithm prettytable in python sentiment analysis in python convert python list to numpy arrays traceback in python time clock() method in python deque in python dictionary comprehension in python python data analytics python seek() method ternary operator in python how to calculate the area of the circle using python how to write in text file using python python keyerror python super() function max() function in python fraction module in python popular python framework to build api how to check python version python %s - string formatting python seaborn library countplot in python range() vs. xrange() python wordcloud package in python convert dataframe into list anova test in python python program to find compound interest ansible in python python important tips and tricks python coroutines double underscores in python re.search() vs re.findall() in python regex how to install statsmodels in python cos in python vif in python __add__ method in python ethical hacking with python class variable vs instance perfect number in python eol in python python program to convert hexadecimal string to decimal string different methods in python for swapping two numbers without using third variable how to change plot size in matplotlib how to get the zip code in python eel in python assignment operators in python speech recognition python yield vs return in python graphene python name mangling in python python combination without itertools python comprehensions influxdb in python kafka tutorial in python augmented assignment expressions in python python (x,y) software python event-driven programming python semaphore python sorted reverse automorphic number in python sizeof in python python program for accepting the strings which contains all vowels class-based views vs function-based views how to handle cookies in django agg() function in python amicable numbers in python context manager in python create bmi calculator using python string to binary in python what is script mode in python best python libraries for machine learning python program to display calendar of given year how to open url in python broken pipe error in python code template for creating objects in python python program to calculate the best time to buy and sell stock tuple to string in python kadane's algorithm in python loggers in django weather app in django missing data conundrum: exploration and imputation techniques different methods of array rotation in python what is operator overloading in python defaultdict in python operator module in python spinner widget in the kivy library of python number plate recognition using python obfuscating a python program convert string to dictionary in python convert string to json in python dbscan algorithm in python how to write a code for printing the python exception/error hierarchy principal component analysis (pca) with python python program to find number of days between two given dates object recognition using python python vlc module set to list in python string to int in python internet of things with python python pysftp module amazing hacks of python average of list in python check installed modules in python choice() in python convert list to dataframe in python convert string to float in python decorators with parameters in python dynamic typing in python fabs in python how to remove decimal in python python closure python glob module writing a python module modules vs packages in python snmp module in python average of list in python append vs extend vs insert in python how to remove duplicates from a list in python remove multiple characters from a string in python shuffle in python floor() and ceil() functions in python sqrt(): math function of python python yfinance module difflib module in python convert the column type from string to datetime format in pandas dataframe python wxpython module random uniform python relational operators in python string to list in python chatbot in python how to convert float to int in python multiply all elements in list of python module vs function in python reverse a tuple in python tuple to dictionary in python datetime.timedelta() function of python python bio module python dash module how to select rows in pandas dataframe based on conditions typecasting in python dateutil module in python getpass module in python python wand library generate a qr code using python best python pdf library python cachetools module python cmdparser module python dash module python emoji module python nmap module python pylab module working with pdf files in python pdf handling in python manipulating pdf using python list all functions from a python module python list of dictionaries python shelve module creating interactive pdf forms using python python newspaper module how to connect wi-fi using python best python libraries used for ethical hacking windows system administration management using python indentation error in python python imaplib module python lxml module python mayavi module python os.listdir() method python modules for automation data visualization in python using bokeh library how to plot glyphs over a google map by using bokeh library in python how to plot a pie chart using bokeh library in python how to read contents of pdf using ocr in python grammar and spell checker in python converting html to pdf files using python readlines in python how to plot multiple lines on a graph using bokeh in python bokeh.plotting.figure.circle_x() function in python bokeh.plotting.figure.diamond_cross() function in python how to plot rays on a graph using bokeh in python image steganography using python inconsistent use of tabs and spaces in indentation how to plot multiple plots using bokeh in python how to make an area plot in python using bokeh python chempy module python memory-profiler module python phonenumbers module python platform module typeerror string indices must be an integer time series forecasting with prophet in python python pexpect module python optparse module int object is not iterable. python peewee library some cryptocurrency libraries for python building a blockchain using python huffman coding using python nested dictionary in python collections.userstring in python how to customize legends with matplotlib matplotlib legend in subplot morphological operations in image processing in python role of python in artificial intelligence python instagramy module python pprint module python primepy module android development using python python fbchat library artificial intelligence in cybersecurity: pitting algorithms vs algorithms understanding the recognition pattern of artificial intelligence when and how to leverage lambda architecture in big data why should we learn python for data science how to change the "legend" position in matplotlib how to check if element exists in list in python how to check spellings of given words using enchant in python python program to count the number of matching characters in a pair of string ping pong game using turtle in python python function to display calendar python program for calculating the sum of squares of first n natural numbers python program for how to check if a given number is fibonacci number or not randint() function in python visualize tiff file using matplotlib and gdal in python rarfile module in python stemming words using python python program for word guessing game blockchain in healthcare: innovations & opportunities snake game in python using turtle module how to find armstrong numbers between two given integers celery tutorial using python rsme - root mean square error in python building a twitter bot using python python progressbar module python pronouncing module python pyautogui module python pyperclip module how to generate uuid in python python top 10 libraries to learn in 2022 reading netcdf data using python the reprlib module in python how to take multiple input from user in python python zlib library python queue module python yaml parser effective root searching algorithms in python python bz2 module python ipaddress module python pylint module how to process xml in python bisect algorithm functions in python creating and updating powerpoint presentation using python how to change the size of figure drawn with matplotlib keyboard module in python python pyfiglet module creating an mcq quiz game in python statistic with python what is gil in python basic python for java developers how to download youtube videos using python scripts traffic flow simulation in python how to merge and sort two lists in python metacharacters in python write the python program to print all possible combination of integers modulo string formatting in python counters in python python pyautogui library how to draw the mandelbrot set in python python dbm module webcam motion detector in python graphql implementation in django how to implement protobuf in python pyqt library in python how to prettify data structures with pretty print in python encrypt a password in python using bcrypt pyramid framework in python building a telegram bot using python web2py framework in python python os.chdir() method balancing parentheses in python how to provide multiple constructors in python classes profiling the python code python tkinter (gui) python tkinter tkinter button tkinter canvas tkinter checkbutton tkinter entry tkinter frame tkinter label tkinter listbox tkinter menubutton tkinter menu tkinter message tkinter radiobutton tkinter scale tkinter scrollbar tkinter text tkinter toplevel tkinter spinbox tkinter panedwindow tkinter labelframe tkinter messagebox python web blocker introduction building python script script deployment on linux script deployment on windows python mcq python mcq python mcq part 2 related tutorials numpy tutorial django tutorial flask tutorial pandas tutorial pytorch tutorial pygame tutorial matplotlib tutorial opencv tutorial openpyxl tutorial python cgi python design pattern python programs python programs next ? ? prev flatten list in python an introduction a list is considered as one of the most flexible data structures in the python programming language. on the other hand, a two-dimensional list, or 2d list, which is generally termed as a list of lists, is an object of a list where each element is a list itself. for example: [[19, 18, 17], [16, 15, 14], [13, 12, 11]]. flattening a list of lists is a process of transforming a two-dimensional list into a one-dimensional list by un-nesting every list element kept in the list of lists, that is, transforming [[9, 8, 7], [6, 5, 4], [3, 2, 1]] to [9, 8, 7, 6, 5, 4, 3, 2, 1]. we can perform the flattening process with the help of the nested for loops, recursion, list comprehensions, core functions, or importing the libraries or packages in the python on the depth and regularity of the nested lists. in this tutorial, we will be working out on various methods in order to flatten the nested lists using the python programming language. but before we get started, let us understand the types of nested lists. what are the types of nested lists? as we know, python is a weakly typed programming language. therefore, we can encounter two types of list of lists. these list of lists or nested lists are as follows: regular list of lists irregular list of lists regular list of lists each item in the regular list of lists is referred to as a sub-list, thus observing the uniformity of the type of the element. for instance: [[9, 8, 7], [6, 5, 4], [3, 2, 1]] is a regular list of lists as [9, 8, 7], [6, 5, 4], [3, 2, 1] is of the list type. irregular list of lists each item in the irregular list of lists is either referred to as a sub-list or a non-list element (for instance, a string or an integer). thus, there is an irregularity in terms of the type of element. for instance: [[9, 8, 7], [6, 5], 4, 3] is an irregular list of lists as [9, 8, 7] and [6, 5] are of the list types, whereas 4 and 3 are of the int type. flattening the list of lists using the nested for loops flattening the list of lists with the nested for loops' help is considered a brute force approach to obtain a flat list. we can perform this method by selecting each item from the two-dimensional list and arranging it in a one-dimensional list. let us consider the following example that works for both regular as well as irregular lists of lists. example: 
# defining the function
def flattenlist(_2dlist):
    # defining an empty list
    flatlist = []
    # iterating through the outer list
    for item in _2dlist:
        if type(item) is list:
            # if the item is of the list type, iterating through the sub-list
            for element in item:
                flatlist.append(element)
        else:
            flatlist.append(item)
    return flatlist

# defining the nested list
nestedlist = [[10, 20, 30, 40], [50, 60, 70], [80, 90, 100]]
print('genuine list:', nestedlist)
print('converted flat list:', flattenlist(nestedlist))
 output: genuine list: [[10, 20, 30, 40], [50, 60, 70], [80, 90, 100]]
converted flat list: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
 explanation: in the above example, we have defined a function as flattenlist that takes in a parameter as _2dlist. we have then used for loop to iterate the elements of the nested list and append them to generate a flattened list. we have then defined the nested list and implement the flattenlist function. as a result, the nested list has successfully transformed into the flattened list. flattening the nested list using a list comprehension flattening the list of lists with the help of a list comprehension is considered an elegant approach to obtain a flat list depending on a two-dimensional existing list. however, this approach offers a less intuitive solution. let us consider the following example. example: 
# defining the nested list
nestedlist = [[10, 20, 30, 40], [50, 60, 70], [80, 90]]
# list comprehension
flatlist = [element for sub_list in nestedlist for element in sub_list]
print('genuine list:', nestedlist)
print('converted list:', flatlist)
 output: genuine list: [[10, 20, 30, 40], [50, 60, 70], [80, 90]]
converted list: [10, 20, 30, 40, 50, 60, 70, 80, 90]
 explanation: in the above example, we have defined a nested list and list comprehension. we have then printed them for the users. as a result, the nested list has been transformed into the flattened list successfully. flattening the list of lists using the recursive method we can also use the recursive method to flatten the two-dimensional list. let us consider the following example implementing the recursive method in order to flatten the list of lists. this implementation works well for regular as well as an irregular list of lists. example: 
# defining a function
def flattenlist(nestedlist):
    if len(nestedlist) == 0:
        return nestedlist
    if isinstance(nestedlist[0], list):
        return flattenlist(nestedlist[0]) + flattenlist(nestedlist[1:])
    return nestedlist[:1] + flattenlist(nestedlist[1:])

print(flattenlist([[10, 20, 30, 40], [50, 60, 70], [80, 90], 100]))
 output: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
 explanation: in the above example, we have defined a function and used an if statement stating if the length of the nested list equals zero, then return the nested list. if the data element on the zeroth index is an instance of a list, then the list index goes into the function again and adds to the following index of the list and so on. else the function will return the elements and so on. at last, we have defined the nested list and executed the function. as a result, the list of lists has flattened recursively. utilizing libraries of python we can also utilize some of the python programming language libraries to flatten the list of lists. the implementation of these libraries are described below: flattening the list of lists using the functools and operator libraries the operator library provides the iconcat() function to perform the fundamental operation like concatenation. we can apply this function cumulatively to the data elements of a nested list, from left to right, resulting in the reduction of the nested list to a flattened list. let us consider the following example to understand its implementation. example: 
# importing the required libraries
import operator
import functools
regularlist = []

# converting the list of lists into a flattened one.
def convo(nestedlist):
    for element in nestedlist:
        if type(element) is list:
            regularlist.append(element)
        else:
            regularlist.append([element])
    return regularlist

twodlist = [[10, 20, 30, 40], [50, 60, 70], [80, 90, 100], 110]
regular2dlist = convo(twodlist)
print('given list:', twodlist)
print('converted list:', functools.reduce(operator.iconcat, regular2dlist, []))
 output: given list: [[10, 20, 30, 40], [50, 60, 70], [80, 90, 100], 110]
converted list: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110]
 explanation: in the above example, we have imported the functools library along with the operator library. we have then defined an empty list as the regularlist. we have then defined a function as convo to transform the list of lists to a flattened list. in this function, we have used the for loop where the elements from the nested list are appended to the empty list we defined earlier. later we have defined the nested list and executes the function. as a result, the list of lists is converted into a flattened list successfully. flattening the list of lists using the itertools library the itertools library provides the chain() function that allows us to transform a nested list into a single flattened list ideally. this function treats consecutive series as a single series by iterating them via the iterable passed as the parameter in a serial way. let us consider the following example: example: 
# importing the itertools library
import itertools

# defining the nested list
nestedlist = [[10, 20, 30, 40], [50, 60, 70], [80, 90, 100]]
flattenlist = list(itertools.chain(*nestedlist))

print('the nested list:', nestedlist)
print('the flattened list:', flattenlist
 output: the nested list: [[10, 20, 30, 40], [50, 60, 70], [80, 90, 100]]
the flattened list: [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
 explanation: in the above example, we have imported the itertools library and generated a nested list. we have then used the chain() function to convert the given nested list to the flattened list. at last, we have returned the result to the users. as a result, the list of lists is flattened successfully. flattening the list of lists using the numpy library the numpy library provides various everyday operations, including the concatenation of two-dimensional regular arrays column-wise or row-wise. we will use the attribute known as flat in order to get a one-dimensional iterator over the array to conquer the target. let us consider the following example to understand the use of the concatenate function and the flat attribute. example: 
# importing the library
import numpy

# defining the nested list
nestedlist = [[10, 20, 30, 40], [50, 60, 70], [80, 90]]

# using the concatenate function along with the flat attribute
flattenlist = list(numpy.concatenate(nestedlist).flat)

print('the nested list:', nestedlist)
print('the flattened list:', flattenlist)
 output: the nested list: [[10, 20, 30, 40], [50, 60, 70], [80, 90]]
the flattened list: [10, 20, 30, 40, 50, 60, 70, 80, 90]
 explanation: in the above example, we have imported the numpy library and defined a nested list. we have then used the concatenate function of the numpy library along with its flat attribute to flatten the elements of the nested list and concatenate them to a new flattened list. at last, we have printed the result for the users. thus, the list of lists is flattened successfully. utilizing core functions we can also perform the flattening task by utilizing some core functions that the python programming language provides. flattening the list of lists using the sum function we can consider summing over inner lists as another solution to the problem. we pass two arguments to the sum function: the first parameter is iterable, which is a nested list, and the second parameter is start which is a void list for the following case that serves as the initial flat list where the data elements of the inner sub-lists will add. we can say that this approach is pretty convenient since we do not have to import anything. however, it is slower than the itertools() and chain() functions when there is a large number of sub-lists present in the nested list. let us consider the following example: example: 
# defining a nested list
nestedlist = [[10, 20, 30, 40], [50, 60, 70], [80, 90]]

# using the sum function
flattenlist = sum(nestedlist, [])

print('the nested list:', nestedlist)
print('the flattened list:', flattenlist)
 output: the nested list: [[10, 20, 30, 40], [50, 60, 70], [80, 90]]
the flattened list: [10, 20, 30, 40, 50, 60, 70, 80, 90]
 explanation: in the above example, we have defined the nested list. we have then used the sum() function and flattened the nested list into a one-dimensional list, and printed the resultant list for the users. as a result, we have transformed the list of lists into a flat list successfully. flattening the list of lists using lambda keyword we can define an anonymous function using the keyword lambda. we can pass the regular/irregular list as the parameter to this anonymous function. the evaluation of the expression is done in order to obtain a flat one-dimensional list. let us consider the following example: example: 
# defining the nested list
nestedlist = [[10, 20, 30], [30, 50, 60], [40, 60, 70], 70]

# using lambda parameters: expression
flattenlist = lambda nestedlist:[item for element in nestedlist for item in flattenlist(element)] if type(nestedlist) is list else [nestedlist]

print("the nested list:", nestedlist)
print("the flattened list:", flattenlist(nestedlist))
 output: the nested list: [[10, 20, 30], [30, 50, 60], [40, 60, 70], 70]
the flattened list: [10, 20, 30, 30, 50, 60, 40, 60, 70, 70]
 explanation: in the above example, we have defined a nested list. we have then used the lambda keyword along with an argument defining an expression for list comprehension. we have then printed them for the users. as a result, we have successfully converted the two-dimensional irregular list into the flattened list. next topicpair plot in python ? prev next ? for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
