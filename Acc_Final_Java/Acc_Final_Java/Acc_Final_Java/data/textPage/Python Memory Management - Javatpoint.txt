https://www.javatpoint.com/python-memory-management::python memory management - javatpoint ? scroll to top home python if else for loop function array string regex list set tuple dictionary programs numpy interview questions python tutorial python tutorial python features python history python applications python install python example python variables python data types python keywords python literals python operators python comments python if else python loops python for loop python while loop python break python continue python pass python strings python lists python tuples python list vs tuple python sets python dictionary python functions python built-in functions python lambda functions python files i/o python modules python exceptions python date python regex python sending email read csv file write csv file read excel file write excel file python assert python list comprehension python collection module python math module python os module python random module python statistics module python sys module python ides python arrays command line arguments python magic method python stack & queue pyspark mllib python decorator python generators web scraping using python python json python itertools python multiprocessing how to calculate distance between two points using geopy gmail api in python how to plot the google map using folium package in python grid search in python python high order function nsetools in python python program to find the nth fibonacci number python opencv object detection python simpleimputer module second largest number in python python oops python oops concepts python object class python constructors python inheritance abstraction in python python mysql environment setup database connection creating new database creating tables insert operation read operation update operation join operation performing transactions python mongodb python mongodb python sqlite python sqlite python questions how to install python in windows how to reverse a string in python how to read csv file in python how to run python program how to take input in python how to convert list to string in python how to append element in the list how to compare two lists in python how to convert int to string in python how to create a dictionary in python how to create a virtual environment in python how to declare a variable in python how to install matplotlib in python how to install opencv in python how to print in same line in python how to read json file in python how to read a text file in python how to use for loop in python is python scripting language how long does it take to learn python how to concatenate two strings in python how to connect database in python how to convert list to dictionary in python how to declare a global variable in python how to reverse a number in python what is an object in python which is the fastest implementation of python how to clear python shell how to create a dataframes in python how to develop a game in python how to install tkinter in python how to plot a graph in python how to print pattern in python how to remove an element from a list in python how to round number in python how to sort a dictionary in python strong number in python how to convert text to speech in python bubble sort in python logging in python insertion sort in python binary search in python linear search in python python vs scala queue in python stack in python heap sort in python palindrome program in python program of cumulative sum in python merge sort in python python matrix python unit testing forensics & virtualization best books to learn python best books to learn django gcd of two number in python python program to generate a random string how to one hot encode sequence data in python how to write square root in python pointer in python python 2d array python memory management python libraries for data visualization how to call a function in python git modules in python top python frameworks for gaming python audio modules wikipedia module in python python random randrange() permutation and combination in python getopt module in python merge two dictionaries in python multithreading in python 3 static in python how to get the current date in python argparse in python python tqdm module caesar cipher in python tokenizer in python how to add two lists in python shallow copy and deep copy in python atom python contains in python label encoding in python django vs. node js python frameworks how to create a vector in python using numpy pickle module of python how to convert bytes to string in python python program to find anagram how to convert list to set python vs javascript python holidays module fuzzywuzzy python library dask python dask python (part 2) mode in python menu-driven programs in python python array vs. list what is duck typing in python pep 8 in python python user groups basic commands in python f string in python how brython works how to use brython in the browser arima model in python python modulus operator matlab vs. python method resolution order in python monkey patching in python python __call__ method python heapq module python substring project ideas for python beginners python faker fizz-buzz program in python tabula python python program to print prime factor of given number python program to print pascal triangle namedtuple in python ordereddict in python t-test in python python return statement getter and setter in python enum class in python destructors in python curve fit in python converting csv to json in python underscore (_) in python set vs list in python locating and executing modules flatten list in python pair plot in python data hiding in python python program to find intersection of two lists how to create requirements.txt file in python tic-tac-toe in python python asynchronous programming - asyncio and await python main() function strftime() function in python verbose flag in python regex python ast module python requests module - http request shutil module in python python epoch to datetime python del statement looping technique in python metaprogramming with metaclasses in python precision handling in python python join list strip() function in python gradient descent algorithm prettytable in python sentiment analysis in python convert python list to numpy arrays traceback in python time clock() method in python deque in python dictionary comprehension in python python data analytics python seek() method ternary operator in python how to calculate the area of the circle using python how to write in text file using python python keyerror python super() function max() function in python fraction module in python popular python framework to build api how to check python version python %s - string formatting python seaborn library countplot in python range() vs. xrange() python wordcloud package in python convert dataframe into list anova test in python python program to find compound interest ansible in python python important tips and tricks python coroutines double underscores in python re.search() vs re.findall() in python regex how to install statsmodels in python cos in python vif in python __add__ method in python ethical hacking with python class variable vs instance perfect number in python eol in python python program to convert hexadecimal string to decimal string different methods in python for swapping two numbers without using third variable how to change plot size in matplotlib how to get the zip code in python eel in python assignment operators in python speech recognition python yield vs return in python graphene python name mangling in python python combination without itertools python comprehensions influxdb in python kafka tutorial in python augmented assignment expressions in python python (x,y) software python event-driven programming python semaphore python sorted reverse automorphic number in python sizeof in python python program for accepting the strings which contains all vowels class-based views vs function-based views how to handle cookies in django agg() function in python amicable numbers in python context manager in python create bmi calculator using python string to binary in python what is script mode in python best python libraries for machine learning python program to display calendar of given year how to open url in python broken pipe error in python code template for creating objects in python python program to calculate the best time to buy and sell stock tuple to string in python kadane's algorithm in python loggers in django weather app in django missing data conundrum: exploration and imputation techniques different methods of array rotation in python what is operator overloading in python defaultdict in python operator module in python spinner widget in the kivy library of python number plate recognition using python obfuscating a python program convert string to dictionary in python convert string to json in python dbscan algorithm in python how to write a code for printing the python exception/error hierarchy principal component analysis (pca) with python python program to find number of days between two given dates object recognition using python python vlc module set to list in python string to int in python internet of things with python python pysftp module amazing hacks of python average of list in python check installed modules in python choice() in python convert list to dataframe in python convert string to float in python decorators with parameters in python dynamic typing in python fabs in python how to remove decimal in python python closure python glob module writing a python module modules vs packages in python snmp module in python average of list in python append vs extend vs insert in python how to remove duplicates from a list in python remove multiple characters from a string in python shuffle in python floor() and ceil() functions in python sqrt(): math function of python python yfinance module difflib module in python convert the column type from string to datetime format in pandas dataframe python wxpython module random uniform python relational operators in python string to list in python chatbot in python how to convert float to int in python multiply all elements in list of python module vs function in python reverse a tuple in python tuple to dictionary in python datetime.timedelta() function of python python bio module python dash module how to select rows in pandas dataframe based on conditions typecasting in python dateutil module in python getpass module in python python wand library generate a qr code using python best python pdf library python cachetools module python cmdparser module python dash module python emoji module python nmap module python pylab module working with pdf files in python pdf handling in python manipulating pdf using python list all functions from a python module python list of dictionaries python shelve module creating interactive pdf forms using python python newspaper module how to connect wi-fi using python best python libraries used for ethical hacking windows system administration management using python indentation error in python python imaplib module python lxml module python mayavi module python os.listdir() method python modules for automation data visualization in python using bokeh library how to plot glyphs over a google map by using bokeh library in python how to plot a pie chart using bokeh library in python how to read contents of pdf using ocr in python grammar and spell checker in python converting html to pdf files using python readlines in python how to plot multiple lines on a graph using bokeh in python bokeh.plotting.figure.circle_x() function in python bokeh.plotting.figure.diamond_cross() function in python how to plot rays on a graph using bokeh in python image steganography using python inconsistent use of tabs and spaces in indentation how to plot multiple plots using bokeh in python how to make an area plot in python using bokeh python chempy module python memory-profiler module python phonenumbers module python platform module typeerror string indices must be an integer time series forecasting with prophet in python python pexpect module python optparse module int object is not iterable. python peewee library some cryptocurrency libraries for python building a blockchain using python huffman coding using python nested dictionary in python collections.userstring in python how to customize legends with matplotlib matplotlib legend in subplot morphological operations in image processing in python role of python in artificial intelligence python instagramy module python pprint module python primepy module android development using python python fbchat library artificial intelligence in cybersecurity: pitting algorithms vs algorithms understanding the recognition pattern of artificial intelligence when and how to leverage lambda architecture in big data why should we learn python for data science how to change the "legend" position in matplotlib how to check if element exists in list in python how to check spellings of given words using enchant in python python program to count the number of matching characters in a pair of string ping pong game using turtle in python python function to display calendar python program for calculating the sum of squares of first n natural numbers python program for how to check if a given number is fibonacci number or not randint() function in python visualize tiff file using matplotlib and gdal in python rarfile module in python stemming words using python python program for word guessing game blockchain in healthcare: innovations & opportunities snake game in python using turtle module how to find armstrong numbers between two given integers celery tutorial using python rsme - root mean square error in python building a twitter bot using python python progressbar module python pronouncing module python pyautogui module python pyperclip module how to generate uuid in python python top 10 libraries to learn in 2022 reading netcdf data using python the reprlib module in python how to take multiple input from user in python python zlib library python queue module python yaml parser effective root searching algorithms in python python bz2 module python ipaddress module python pylint module how to process xml in python bisect algorithm functions in python creating and updating powerpoint presentation using python how to change the size of figure drawn with matplotlib keyboard module in python python pyfiglet module creating an mcq quiz game in python statistic with python what is gil in python basic python for java developers how to download youtube videos using python scripts traffic flow simulation in python how to merge and sort two lists in python metacharacters in python write the python program to print all possible combination of integers modulo string formatting in python counters in python python pyautogui library how to draw the mandelbrot set in python python dbm module webcam motion detector in python graphql implementation in django how to implement protobuf in python pyqt library in python how to prettify data structures with pretty print in python encrypt a password in python using bcrypt pyramid framework in python building a telegram bot using python web2py framework in python python os.chdir() method balancing parentheses in python how to provide multiple constructors in python classes profiling the python code python tkinter (gui) python tkinter tkinter button tkinter canvas tkinter checkbutton tkinter entry tkinter frame tkinter label tkinter listbox tkinter menubutton tkinter menu tkinter message tkinter radiobutton tkinter scale tkinter scrollbar tkinter text tkinter toplevel tkinter spinbox tkinter panedwindow tkinter labelframe tkinter messagebox python web blocker introduction building python script script deployment on linux script deployment on windows python mcq python mcq python mcq part 2 related tutorials numpy tutorial django tutorial flask tutorial pandas tutorial pytorch tutorial pygame tutorial matplotlib tutorial opencv tutorial openpyxl tutorial python cgi python design pattern python programs python programs next ? ? prev python memory management in this tutorial, we will learn how python manages the memory or how python handles our date internally. we will dive deep into this topic to understand internal working of python and how it handles the memory. this tutorial will give a deep understanding of python memory management. when we execute our python script, there are so many logic runs behind in python memory to make the code efficient. introduction memory management is very important for software developers to work efficiently with any programming language. as we know, python is a famous and widely used programming language. it is used almost in every technical domain. in contrast to a programming language, memory management is related to writing memory-efficient code. we cannot overlook the importance of memory management while implementing a large amount of data. improper memory management leads to slowness on the application and the server-side components. it also becomes the reason of improper working. if the memory is not handled well, it will take much time while preprocessing the data. in python, memory is managed by the python manager which determines where to put the application data in the memory. so, we must have the knowledge of python memory manager to write efficient code and maintainable code. let's assume memory looks like an empty book and we want to write anything on the book's page. then, we write data any data the manager find the free space in the book and provide it to the application. the procedure of providing memory to objects is called allocation. on the other side, when data is no longer use, it can be deleted by the python memory manager. but the question is, how? and where did this memory come from? python memory allocation memory allocation is an essential part of the memory management for a developer. this process basically allots free space in the computer's virtual memory, and there are two types of virtual memory works while executing programs. static memory allocation dynamic memory allocation static memory allocation - static memory allocation happens at the compile time. for example - in c/c++, we declare a static array with the fixed sizes. memory is allocated at the time of compilation. however, we cannot use the memory again in the further program. 
static int a=10;
 stack allocation the stack data structure is used to store the static memory. it is only needed inside the particular function or method call. the function is added in program's call stack whenever we call it. variable assignment inside the function is temporarily stored in the function call stack; the function returns the value, and the call stack moves to the text task. the compiler handles all these processes, so we don't need to worry about it. call stack (stack data structure) holds the program's operational data such as subroutines or function call in the order they are to be called. these functions are popped up from the stack when we called. dynamic memory allocation unlike static memory allocation, dynamic memory allocates the memory at the runtime to the program. for example - in c/c++, there is a predefined size of the integer of float data type but there is no predefine size of the data types. memory is allocated to the objects at the run time. we use the heap for implement dynamic memory management. we can use the memory throughout the program. 
int *a;
p = new int;
 as we know, everything in python is an object means dynamic memory allocation inspires the python memory management. python memory manager automatically vanishes when the object is no longer in use. heap memory allocation heap data structure is used for dynamic memory which is not related to naming counterparts. it is type of memory that uses outside the program at the global space. one of the best advantages of heap memory is to it freed up the memory space if the object is no longer in use or the node is deleted. in the below example, we define how the function's variable store in the stack and a heap. default python implementation python is an open-source, object-oriented programming language which default implemented in the c programming language. that's very interesting fact - a language which is most popular written in another language? but this is not a complete truth, but sort of. basically, python language is written in the english language. however, it is defined in the reference manual that isn't useful by itself. so, we need an interpreter based code on the rule in the manual. the benefit of the default implementation, it executes the python code in the computer and it also converts our python code into instruction. so, we can say that python's default implementation fulfills the both requirements. note - virtual machines are not the physical computer, but they are instigated in the software. the program that we write using python language first converts into the computer-relatable instructions bytecode. the virtual machine interprets this bytecode. python garbage collector as we have explained earlier, python removes those objects that are no longer in use or can say that it frees up the memory space. this process of vanish the unnecessary object's memory space is called the garbage collector. the python garbage collector initiates its execution with the program and is activated if the reference count falls to zero. when we assign the new name or placed it in containers such as a dictionary or tuple, the reference count increases its value. if we reassign the reference to an object, the reference counts decreases its value if. it also decreases its value when the object's reference goes out of scope or an object is deleted. as we know, python uses the dynamic memory allocation which is managed by the heap data structure. memory heap holds the objects and other data structures that will be used in the program. python memory manager manages the allocation or de-allocation of the heap memory space through the api functions. python objects in memory as we know, everything in python is object. the object can either be simple (containing numbers, strings, etc.) or containers (dictionary, lists, or user defined classes). in python, we don't need to declare the variables or their types before using them in a program. let's understand the following example. example - 
a= 10
print(a)
 del a
print(a)
 output: 10
traceback (most recent call last):
  file "
              ", line 1, in 
              
               
    print(x)
nameerror : name 'a' is not defined

              
             as we can see in the above output, we assigned the value to object x and printed it. when we remove the object x and try to access in further code, there will be an error that claims that the variable x is not defined. hence, python garbage collector works automatically and the programmers doesn't need to worry about it, unlike c. reference counting in python reference counting states that how many times other objects reference an object. when a reference of the object is assigned, the count of object is incremented one. when references of an object are removed or deleted, the count of object is decremented. the python memory manager performs the de-allocation when the reference count becomes zero. let's make it simple to understand. example - suppose, there is two or more variable that contains the same value, so the python virtual machine rather creating another object of the same value in the private heap. it actually makes the second variable point to that the originally existing value in the private heap. this is highly beneficial to preserve the memory, which can be used by another variable. 
x = 20
 when we assign the value to the x. the integer object 10 is created in the heap memory and its reference is assigned to x. 
x = 20
y = x 
if id(x) == id(y): 
	print("the variables x and y are referring  to the same object")
 in the above code, we have assigned y = x, which means the y object will refer to the same object because python allocated the same object reference to new variable if the object is already exists with the same value. now, see another example. example - 
x = 20
y = x
x += 1
if id(x) == id(y):
      print("x and y do not refer to  the same object")
 output: x and y do not refer to the same object
 the variables x and y are not referring the same object because x is incremented by one, x creates the new reference object and y still referring to 10. transforming the garbage collector the python garbage collector has classified the objects using its generation. python garbage collector has the three-generation. when we define the new object in the program, its life cycle is handled by the garbage collector's first generation. if the object has use in a different program, it will be stimulated up to the next generation. every generation has a threshold. the garbage collector comes into action if the threshold of the number of allocations minus the number of de-allocation is exceeded. we can modify the threshold value manually using the gc module. this module provides the get_threshold() method to check the threshold value of a different generation of the garbage collector. let's understand the following example. example - 
import gc
print(gc.get_threshold())
 output: (700, 10, 10)
 in the above output, the threshold value 700 is for the first generation and other values for the second and third generation. the threshold value for trigger the garbage collector can be modified using the set_threshold() method. example - 2 
import gc
gc.set_threshold(800, 20, 20)
 in the above example, the value of the threshold increased for all three generations. it will affect the frequency of running the garbage collector. programmers don't need to worry about the garbage collector, but it plays essential role in optimizing the python runtime for the target system. python garbage collector handles the low-level details for the developer. importance of performing manual garbage collection as we have discussed earlier, the python interpreter handles the reference to object used in the program. it automatically frees the memory when the reference count becomes zero. this is a classical approach for reference counting, if it fails to work when the program has referenced cycles. the reference cycle occurs when one or more objects are referenced to each other. hence the reference count never becomes zero. let's understand the following example - 
def cycle_create():
    list1 = [18, 29, 15]
    list1.append(list1)
    return list1

cycle_create()
[18, 29, 15, [...]]
 we have created the reference cycle. the list1 object is referring the object list1 itself. when the function returns object list1, the memory for the object list1 is not freed up. so that reference counting is not suitable for solving the reference cycle. but, we can solve it by altering the garbage collector or performance of the garbage collector. to accomplish that, we will use the gc.collect() function for the gc module. 
import gc
n = gc.collect()
print("number of object:", n)
 the above code will give the number of collected and de-allocated objects. we can perform the manual garbage collector using the two methods - time-based or event-based garbage collection. the gc.collect() method is used to perform the time-based garbage collection. this method is called after a fixed time interval to perform time-based garbage collection. in the even-based garbage collection, the gc.collect() function calls after an event occur. let's understand the following example. example - 
import sys, gc

def cycle_create():
    list1 = [18, 29, 15]
    list1.append(list1)

def main():
    print("here we are creating garbage...")
    for i in range(10):
        cycle_create()

    print("collecting the object...")
    num = gc.collect()
    print("number of unreachable objects collected by gc:", num)
    print("uncollectable garbage:", gc.garbage)

if __name__ == "__main__":
    main()
    sys.exit()
 output: here, we are creating garbage... 
collecting the object... 
number of unreachable objects collected by gc: 10 
uncollectable garbage: []
 in the above code, we have created the list1 object referred by the list variable. the first element of the list object refers to itself. the list object's reference count is always greater than zero, even it is deleted or out of scope in the program. c python memory management in this section, we will discuss the c python memory architecture in detail. as we discussed earlier, there is a layer of abstraction from the physical hardware to python. various application or python access the virtual memory that is created by the operating system. python uses a portion of the memory for internal use and non-object memory. another part of the memory is used for python object such as int, dict, list, etc. cpython contains the object allocator that allocates memory within the object area. the object allocator gets a call every time the new object needs space. the allocator primary designs for small amount of data because python doesn't involve too much data at a time. it allocates the memory when it is absolutely required. there are three main components of the cpython memory allocation strategy. arena - it is the largest chunks of memory and aligned on a page boundary in memory. the operating system uses the page boundary which is the edge of a fixed-length contiguous chuck of memory. python assumes the system's page size is 256 kilobytes. pools - it is composed of a single size class. a pool of the same size manages a double-linked list. a pool must be - used, full, or empty. a used pool consists of memory blocks for data to be stored. a full pool has all the allocated and contain data. an empty pool doesn't have any data and can be assigned any size class for the block when needed. blocks - pools contains a pointer to their "free" block of the memory. in the pool, there is a pointer, which indicates the free block of memory. the allocator doesn't touch these block until it's actually needed. common ways to reduce the space complexity we can follow some best practices to reduce the space complexity. these techniques are supposed to save quite space and make the program efficient. below are a few practices in python for memory allocators. avoid list slicing we define a list in python; the memory allocator allocates the heap's memory according to the list indexing, respectively. suppose we need a sub-list to the given list, then we perform the list slicing. it is a straightforward way to get the sublist from the original list. somehow, it is suitable for the small amount of data but not for the large data. hence, list slicing generates the copies of the object in the list. it just copies the reference to them. as a result, the python memory allocator creates a copy of the object and allocates it. so we need to avoid the list slicing. the best way to avoid the developer should try to use the separate variable to track indices instead of slicing a list. use list indexing carefully the developer should try to use the "for item in array" instead of "for index in range(len(array))" to save space and time. if our program doesn't need the indexing of the list element, then don't use it. string concatenation string concatenation is not suitable for saving space and time complexity. when possible, we should avoid using '+' for the string concatenation because strings are immutable. when we add the new string to the existing string, python creates the new string and allocates it to a new address. each string needs a fixed size of memory based on the character and its length. when we change the string, it needs a different amount of memory and requires reallocating. let's run the following example. 
a = mango
print(a)
a = a + " ice-cream"
print (a)
 output: mango
mango ice-cream
 it will create variable a to refer to the string object, which is the string value information. then we add the new sting in it using the '+' operator. python reallocates the new string in the memory based on its size and length. suppose the original string's memory size is n byte, then the new string will be the m bytes. instead of using the string concatenation, we can use the" .join(iterable_object)" or format or %. this makes a huge impact on saving memory and time. use iterators and generators iterators are very helpful for both time and memory when working on a large set of data. working with the large dataset, we need data processing immediately and can wait for the program to process the entire data set first. generators are the special functions used to create the iterator function. in the following example, we implement an iterator that calls the special generator function. the yield keyword returns the current value, moving to the next value only on the loop's next iteration. example - 
def __iter__(self):
	''' this function allows are set to be iterable. element can be looped over using the for loop'''
	return self. _generator()

def _generator(self):
	""" this function is used to implement the iterable. it stores the data we are currently on and gives the                      next item at each iteration of the loop."""
	for i in self.items():
		yield i
 use the built-in library when possible if we use methods that have already been predefined in the python library, then import the corresponding library. it would save a lot of space and time. we can also create a module to define the function and import it to the current working program. conclusion in this tutorial, we have discussed working of the memory internally in python. we have learned how python manages memory and also discussed default python implementation. cpython is written in the c programming language. python is a dynamic type of language that used the heap data structure to store the memory. next topicpython libraries for data visualization ? prev next ? for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
