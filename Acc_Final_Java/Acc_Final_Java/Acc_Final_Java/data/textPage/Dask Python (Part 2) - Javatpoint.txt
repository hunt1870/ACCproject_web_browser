https://www.javatpoint.com/dask-python-part-2::dask python (part 2) - javatpoint ? scroll to top home python if else for loop function array string regex list set tuple dictionary programs numpy interview questions python tutorial python tutorial python features python history python applications python install python example python variables python data types python keywords python literals python operators python comments python if else python loops python for loop python while loop python break python continue python pass python strings python lists python tuples python list vs tuple python sets python dictionary python functions python built-in functions python lambda functions python files i/o python modules python exceptions python date python regex python sending email read csv file write csv file read excel file write excel file python assert python list comprehension python collection module python math module python os module python random module python statistics module python sys module python ides python arrays command line arguments python magic method python stack & queue pyspark mllib python decorator python generators web scraping using python python json python itertools python multiprocessing how to calculate distance between two points using geopy gmail api in python how to plot the google map using folium package in python grid search in python python high order function nsetools in python python program to find the nth fibonacci number python opencv object detection python simpleimputer module second largest number in python python oops python oops concepts python object class python constructors python inheritance abstraction in python python mysql environment setup database connection creating new database creating tables insert operation read operation update operation join operation performing transactions python mongodb python mongodb python sqlite python sqlite python questions how to install python in windows how to reverse a string in python how to read csv file in python how to run python program how to take input in python how to convert list to string in python how to append element in the list how to compare two lists in python how to convert int to string in python how to create a dictionary in python how to create a virtual environment in python how to declare a variable in python how to install matplotlib in python how to install opencv in python how to print in same line in python how to read json file in python how to read a text file in python how to use for loop in python is python scripting language how long does it take to learn python how to concatenate two strings in python how to connect database in python how to convert list to dictionary in python how to declare a global variable in python how to reverse a number in python what is an object in python which is the fastest implementation of python how to clear python shell how to create a dataframes in python how to develop a game in python how to install tkinter in python how to plot a graph in python how to print pattern in python how to remove an element from a list in python how to round number in python how to sort a dictionary in python strong number in python how to convert text to speech in python bubble sort in python logging in python insertion sort in python binary search in python linear search in python python vs scala queue in python stack in python heap sort in python palindrome program in python program of cumulative sum in python merge sort in python python matrix python unit testing forensics & virtualization best books to learn python best books to learn django gcd of two number in python python program to generate a random string how to one hot encode sequence data in python how to write square root in python pointer in python python 2d array python memory management python libraries for data visualization how to call a function in python git modules in python top python frameworks for gaming python audio modules wikipedia module in python python random randrange() permutation and combination in python getopt module in python merge two dictionaries in python multithreading in python 3 static in python how to get the current date in python argparse in python python tqdm module caesar cipher in python tokenizer in python how to add two lists in python shallow copy and deep copy in python atom python contains in python label encoding in python django vs. node js python frameworks how to create a vector in python using numpy pickle module of python how to convert bytes to string in python python program to find anagram how to convert list to set python vs javascript python holidays module fuzzywuzzy python library dask python dask python (part 2) mode in python menu-driven programs in python python array vs. list what is duck typing in python pep 8 in python python user groups basic commands in python f string in python how brython works how to use brython in the browser arima model in python python modulus operator matlab vs. python method resolution order in python monkey patching in python python __call__ method python heapq module python substring project ideas for python beginners python faker fizz-buzz program in python tabula python python program to print prime factor of given number python program to print pascal triangle namedtuple in python ordereddict in python t-test in python python return statement getter and setter in python enum class in python destructors in python curve fit in python converting csv to json in python underscore (_) in python set vs list in python locating and executing modules flatten list in python pair plot in python data hiding in python python program to find intersection of two lists how to create requirements.txt file in python tic-tac-toe in python python asynchronous programming - asyncio and await python main() function strftime() function in python verbose flag in python regex python ast module python requests module - http request shutil module in python python epoch to datetime python del statement looping technique in python metaprogramming with metaclasses in python precision handling in python python join list strip() function in python gradient descent algorithm prettytable in python sentiment analysis in python convert python list to numpy arrays traceback in python time clock() method in python deque in python dictionary comprehension in python python data analytics python seek() method ternary operator in python how to calculate the area of the circle using python how to write in text file using python python keyerror python super() function max() function in python fraction module in python popular python framework to build api how to check python version python %s - string formatting python seaborn library countplot in python range() vs. xrange() python wordcloud package in python convert dataframe into list anova test in python python program to find compound interest ansible in python python important tips and tricks python coroutines double underscores in python re.search() vs re.findall() in python regex how to install statsmodels in python cos in python vif in python __add__ method in python ethical hacking with python class variable vs instance perfect number in python eol in python python program to convert hexadecimal string to decimal string different methods in python for swapping two numbers without using third variable how to change plot size in matplotlib how to get the zip code in python eel in python assignment operators in python speech recognition python yield vs return in python graphene python name mangling in python python combination without itertools python comprehensions influxdb in python kafka tutorial in python augmented assignment expressions in python python (x,y) software python event-driven programming python semaphore python sorted reverse automorphic number in python sizeof in python python program for accepting the strings which contains all vowels class-based views vs function-based views how to handle cookies in django agg() function in python amicable numbers in python context manager in python create bmi calculator using python string to binary in python what is script mode in python best python libraries for machine learning python program to display calendar of given year how to open url in python broken pipe error in python code template for creating objects in python python program to calculate the best time to buy and sell stock tuple to string in python kadane's algorithm in python loggers in django weather app in django missing data conundrum: exploration and imputation techniques different methods of array rotation in python what is operator overloading in python defaultdict in python operator module in python spinner widget in the kivy library of python number plate recognition using python obfuscating a python program convert string to dictionary in python convert string to json in python dbscan algorithm in python how to write a code for printing the python exception/error hierarchy principal component analysis (pca) with python python program to find number of days between two given dates object recognition using python python vlc module set to list in python string to int in python internet of things with python python pysftp module amazing hacks of python average of list in python check installed modules in python choice() in python convert list to dataframe in python convert string to float in python decorators with parameters in python dynamic typing in python fabs in python how to remove decimal in python python closure python glob module writing a python module modules vs packages in python snmp module in python average of list in python append vs extend vs insert in python how to remove duplicates from a list in python remove multiple characters from a string in python shuffle in python floor() and ceil() functions in python sqrt(): math function of python python yfinance module difflib module in python convert the column type from string to datetime format in pandas dataframe python wxpython module random uniform python relational operators in python string to list in python chatbot in python how to convert float to int in python multiply all elements in list of python module vs function in python reverse a tuple in python tuple to dictionary in python datetime.timedelta() function of python python bio module python dash module how to select rows in pandas dataframe based on conditions typecasting in python dateutil module in python getpass module in python python wand library generate a qr code using python best python pdf library python cachetools module python cmdparser module python dash module python emoji module python nmap module python pylab module working with pdf files in python pdf handling in python manipulating pdf using python list all functions from a python module python list of dictionaries python shelve module creating interactive pdf forms using python python newspaper module how to connect wi-fi using python best python libraries used for ethical hacking windows system administration management using python indentation error in python python imaplib module python lxml module python mayavi module python os.listdir() method python modules for automation data visualization in python using bokeh library how to plot glyphs over a google map by using bokeh library in python how to plot a pie chart using bokeh library in python how to read contents of pdf using ocr in python grammar and spell checker in python converting html to pdf files using python readlines in python how to plot multiple lines on a graph using bokeh in python bokeh.plotting.figure.circle_x() function in python bokeh.plotting.figure.diamond_cross() function in python how to plot rays on a graph using bokeh in python image steganography using python inconsistent use of tabs and spaces in indentation how to plot multiple plots using bokeh in python how to make an area plot in python using bokeh python chempy module python memory-profiler module python phonenumbers module python platform module typeerror string indices must be an integer time series forecasting with prophet in python python pexpect module python optparse module int object is not iterable. python peewee library some cryptocurrency libraries for python building a blockchain using python huffman coding using python nested dictionary in python collections.userstring in python how to customize legends with matplotlib matplotlib legend in subplot morphological operations in image processing in python role of python in artificial intelligence python instagramy module python pprint module python primepy module android development using python python fbchat library artificial intelligence in cybersecurity: pitting algorithms vs algorithms understanding the recognition pattern of artificial intelligence when and how to leverage lambda architecture in big data why should we learn python for data science how to change the "legend" position in matplotlib how to check if element exists in list in python how to check spellings of given words using enchant in python python program to count the number of matching characters in a pair of string ping pong game using turtle in python python function to display calendar python program for calculating the sum of squares of first n natural numbers python program for how to check if a given number is fibonacci number or not randint() function in python visualize tiff file using matplotlib and gdal in python rarfile module in python stemming words using python python program for word guessing game blockchain in healthcare: innovations & opportunities snake game in python using turtle module how to find armstrong numbers between two given integers celery tutorial using python rsme - root mean square error in python building a twitter bot using python python progressbar module python pronouncing module python pyautogui module python pyperclip module how to generate uuid in python python top 10 libraries to learn in 2022 reading netcdf data using python the reprlib module in python how to take multiple input from user in python python zlib library python queue module python yaml parser effective root searching algorithms in python python bz2 module python ipaddress module python pylint module how to process xml in python bisect algorithm functions in python creating and updating powerpoint presentation using python how to change the size of figure drawn with matplotlib keyboard module in python python pyfiglet module creating an mcq quiz game in python statistic with python what is gil in python basic python for java developers how to download youtube videos using python scripts traffic flow simulation in python how to merge and sort two lists in python metacharacters in python write the python program to print all possible combination of integers modulo string formatting in python counters in python python pyautogui library how to draw the mandelbrot set in python python dbm module webcam motion detector in python graphql implementation in django how to implement protobuf in python pyqt library in python how to prettify data structures with pretty print in python encrypt a password in python using bcrypt pyramid framework in python building a telegram bot using python web2py framework in python python os.chdir() method balancing parentheses in python how to provide multiple constructors in python classes profiling the python code python tkinter (gui) python tkinter tkinter button tkinter canvas tkinter checkbutton tkinter entry tkinter frame tkinter label tkinter listbox tkinter menubutton tkinter menu tkinter message tkinter radiobutton tkinter scale tkinter scrollbar tkinter text tkinter toplevel tkinter spinbox tkinter panedwindow tkinter labelframe tkinter messagebox python web blocker introduction building python script script deployment on linux script deployment on windows python mcq python mcq python mcq part 2 related tutorials numpy tutorial django tutorial flask tutorial pandas tutorial pytorch tutorial pygame tutorial matplotlib tutorial opencv tutorial openpyxl tutorial python cgi python design pattern python programs python programs next ? ? prev dask python (part 2) in the previous tutorial, we have understood the concept of distributed computing and introduction to dask. we have also understood what dask cluster is and how to install dask in addition to the introduction to the dask interface. dask interface as we have already discussed, dask interfaces have a variety of parallel algorithm set for distributed computation. few essential user interfaces are being used by data science practitioners to scale numpy, pandas, and scikit-learn: arrays: parallel numpy dataframes: parallel pandas machine learning: parallel scikit-learn we have already covered dask array in the previous tutorial; let us head straight into dask dataframes. dask dataframes we have observed that it requires grouping multiple numpy arrays in order to form a dask array. similarly, a dask dataframe contains numerous smaller pandas dataframes. a large dataframe of pandas separates row-wise in order to form multiple smaller dataframes. these smaller dataframes are available on a single system or multiple systems (hence, allowing us to store datasets that are larger compared with the memory). every computation of the dask dataframes parallelizes the functions on the prevailing pandas dataframes. here is an image is shown below representing the dask dataframe structure: the dask dataframes also provides application programming interfaces (apis) that are pretty identical to pandas dataframes offers. now, let us consider some examples performing the essential functions with dask dataframes. example 1: reading a csv file reading the file with the help of pandas 
# reading the file using pandas
import pandas as pd

my_pdfile = pd.read_csv("covid_19_india.csv")
print(my_pdfile)
 output:        sno      date     time state/unionterritory confirmedindiannational confirmedforeignnational   cured  deaths  confirmed
0        1  30/01/20  6:00 pm               kerala                       1                        0       0       0          1
1        2  31/01/20  6:00 pm               kerala                       1                        0       0       0          1
2        3  01/02/20  6:00 pm               kerala                       2                        0       0       0          2
3        4  02/02/20  6:00 pm               kerala                       3                        0       0       0          3
4        5  03/02/20  6:00 pm               kerala                       3                        0       0       0          3
...    ...       ...      ...                  ...                     ...                      ...     ...     ...        ...
9286  9287  09/12/20  8:00 am            telengana                       -                        -  266120    1480     275261
9287  9288  09/12/20  8:00 am              tripura                       -                        -   32169     373      32945
9288  9289  09/12/20  8:00 am          uttarakhand                       -                        -   72435    1307      79141
9289  9290  09/12/20  8:00 am        uttar pradesh                       -                        -  528832    7967     558173
9290  9291  09/12/20  8:00 am          west bengal                       -                        -  475425    8820     507995

[9291 rows x 9 columns]
 reading the file with the help of pandas 
# reading the file using dask
import dask.dataframe as ddf

my_ddfile = ddf.read_csv("covid_19_india.csv")
print(my_ddfile.compute())    
 output: sno      date     time state/unionterritory confirmedindiannational confirmedforeignnational   cured  deaths  confirmed
0        1  30/01/20  6:00 pm               kerala                       1                        0       0       0          1
1        2  31/01/20  6:00 pm               kerala                       1                        0       0       0          1
2        3  01/02/20  6:00 pm               kerala                       2                        0       0       0          2
3        4  02/02/20  6:00 pm               kerala                       3                        0       0       0          3
4        5  03/02/20  6:00 pm               kerala                       3                        0       0       0          3
...    ...       ...      ...                  ...                     ...                      ...     ...     ...        ...
9286  9287  09/12/20  8:00 am            telengana                       -                        -  266120    1480     275261
9287  9288  09/12/20  8:00 am              tripura                       -                        -   32169     373      32945
9288  9289  09/12/20  8:00 am          uttarakhand                       -                        -   72435    1307      79141
9289  9290  09/12/20  8:00 am        uttar pradesh                       -                        -  528832    7967     558173
9290  9291  09/12/20  8:00 am          west bengal                       -                        -  475425    8820     507995

[9291 rows x 9 columns]
 explanation: in the above example, we have created two different programs. in the first program, we have imported the pandas library and use the read_csv() function to read the csv file. in contrast, we have imported the dataframe module of the dask library and use the read_csv() function to read the csv file. the result of both the programs will be the same but differ in the processing time. dask dataframes deliver faster speed to execute the function when compared with pandas. the same can be noticeable once practically used. example 2: finding the value count for a specific column 
import dask.dataframe as ddf

my_ddfile = ddf.read_csv("covid_19_india.csv")
print(my_ddfile.state.value_counts().compute())
 output: kerala                                      315
delhi                                       283
rajasthan                                   282
haryana                                     281
uttar pradesh                               281
tamil nadu                                  278
ladakh                                      278
jammu and kashmir                           276
karnataka                                   276
punjab                                      275
maharashtra                                 275
andhra pradesh                              273
uttarakhand                                 270
odisha                                      269
west bengal                                 267
puducherry                                  267
chhattisgarh                                266
gujarat                                     265
chandigarh                                  265
madhya pradesh                              264
himachal pradesh                            264
bihar                                       263
manipur                                     261
mizoram                                     260
andaman and nicobar islands                 259
goa                                         259
assam                                       253
jharkhand                                   253
arunachal pradesh                           251
tripura                                     247
meghalaya                                   240
telengana                                   236
nagaland                                    207
sikkim                                      200
dadra and nagar haveli and daman and diu    181
cases being reassigned to states             60
telangana                                    45
dadar nagar haveli                           37
unassigned                                    3
telangana***                                  1
maharashtra***                                1
telengana***                                  1
chandigarh***                                 1
daman & diu                                   1
punjab***                                     1
name: state, dtype: int64
 explanation: in the above example, we have imported the dataframe module of the dask library and use the read_csv() function in order to read the content from the csv file. we have then used the name of the column "states" followed by the value_counts() method to count the total numbers of each value present in that specific column. as a result, we got all the state's names present in that column with the total number of their occurrences. example 3: using the groupby function on the dask dataframe 
import dask.dataframe as ddf

my_ddfile = ddf.read_csv("covid_19_india.csv")
print(my_ddfile.groupby(my_ddfile.state).cured.max().compute())
 output: state
andaman and nicobar islands                    4647
andhra pradesh                               860368
arunachal pradesh                             15690
assam                                        209447
bihar                                        232563
cases being reassigned to states                  0
chandigarh                                    16981
chandigarh***                                 14381
chhattisgarh                                 227158
dadar nagar haveli                                2
dadra and nagar haveli and daman and diu       3330
daman & diu                                       0
delhi                                        565039
goa                                           46924
gujarat                                      203111
haryana                                      232108
himachal pradesh                              37871
jammu and kashmir                            107282
jharkhand                                    107898
karnataka                                    858370
kerala                                       582351
ladakh                                         8056
madhya pradesh                               200664
maharashtra                                 1737080
maharashtra***                              1581373
manipur                                       23166
meghalaya                                     11686
mizoram                                        3772
nagaland                                      10781
odisha                                       316970
puducherry                                    36308
punjab                                       145093
punjab***                                    130406
rajasthan                                    260773
sikkim                                         4735
tamil nadu                                   770378
telangana                                     41332
telangana***                                  40334
telengana                                    266120
telengana***                                  42909
tripura                                       32169
unassigned                                        0
uttar pradesh                                528832
uttarakhand                                   72435
west bengal                                  475425
name: cured, dtype: int64
 explanation: in the above program, we have again imported the dataframe module of the dask library and used the read_csv in order to read from the specified csv file. then, we have used the groupby function and max() function of the dask dataframe to find the max number of cured people from each state. now, let us understand another dask interface that is dask machine learning. dask machine learning dask machine learning offers algorithms for scalable machine learning in python, which is compatible with scikit-learn. let us begin with understanding the way of handling the computations using scikit-learn and then have a closer look into how dask performs these functions in a different way. a user can execute parallel computing with the help of scikit-learn (on a solitary system) by placing the parameter njobs = -1. scikit-learn utilizes joblib in order to execute these parallel computations. joblib is a python library that offers support for parallelization. when we call the fit() function, based on the tasks to be executed (whether it is a hyperparameter search or fitting a model), joblib distributes the task across the cores available. however, we can scale the parallel computation perform with the help of the scikit-learn library to multiple machines. whereas, dask performs well on a solitary system as well as can easily be scaled up to a cluster of systems. dask provides a central task scheduler and a group of workers. the scheduler assigns the tasks to each worker. then these workers are assigned a number of cores on which they can execute computations. the workers deliver two functions: compute the assigned tasks serve the results to other workers on request. let us consider an example demonstrating the way of conversation between a scheduler and workers (this example has been provided by a developer of dask, namely matthew rocklin): the central task scheduler sends the work in the form of python functions to the workers to execute either on the same system or on a cluster one. worker a, please calculate x = f(1), worker b please calculate y = g(2) worker a, once the g(2) function is complete, please get y from worker b and perform z = h(x, y) the above example should provide us a clear demonstration about the working of dask. now let us understand the models of machine learning and dask-search cv. machine learning models dask machine learning (also known as dask-ml) offers scalable machine learning in python. but before we get started, let us follow the dask-ml installation steps given below: installation using conda 
conda install -c conda-forge dask-ml
 installation using pip 
$ pip install dask-ml
 let us move onto understanding parallelizing scikit-learn directly and reimplementing algorithms using dask array. 1. parallelizing scikit-learn directly as we have already discussed, scikit-learn (also known as sklearn) offers parallel computing (on a single cpu) with the help of joblib. we can directly utilize dask in order to parallelize more than one sklearn estimators by inserting a few lines of code (without even making any modifications to the current code). the primary step is to import client from the distributed module of the dask library. this command will generate a local schedule and worker on the system. 
from dask.distributed import client 
# starting a local dask client
my_client = client()
 the next step is to instantiate the joblib of the dask in the backend. we have to import the parallel_backend from the joblib of the sklearn library as shown in the following syntax: 
import dask_ml.joblib
from sklearn.externals.joblib import parallel_backend
with parallel_backend('dask'):
    # normal scikit-learn code goes here
     from sklearn.ensemble import randomforestclassifier 
     my_model = randomforestclassifier()
 2. reimplementing algorithms using the dask array dask-ml reimplements simple machine learning algorithms in order to use numpy arrays. numpy arrays are replaced by the dask using the dask arrays in order to achieve scalable algorithms. this replacement helps to implement: linear models (for example, linear regression, poisson regression, logistic regression, etc.) pre-processing (for example, scalers, transforms, etc.) clustering (for example, k-means, spectral clustering, etc.) a. linear model example 
from dask_ml.linear_model import logisticregression
 
mymodel = logisticregression()
mymodel.fit(data, labels)
 b. pre-processing example 
from dask_ml.preprocessing import onehotencoder
 
myencoder = onehotencoder(sparse=true)
myresult = myencoder.fit(data)
 c. clustering example 
from dask_ml.cluster import kmeans

mymodel = kmeans()
mymodel.fit(data)
 dask-search cv hyperparameter tuning is considered a significant step in building a model and can critically alter the implementation of the model. models of machine learning have various hyperparameters, and it is tough to understand which parameter would perform better in a specific situation. executing this task manually is considerably tiresome work. however, the scikit-learn library offers gridsearch in order to simplify the task for hyperparameter tuning. the user must provide the parameters, and gridsearch will offer the best combination of these parameters. let us consider an example where we need to pick a random forest technique in order to fit the dataset. the model has three significant tunable parameters - first parameter, second parameter, and third parameter, respectively. now, let us set the values for these parameters below: first parameter - bootstrap = true second parameter - max_depth - [8, 9] third parameter - n_estimators : [50, 100 , 200] 1. sklearn gridsearch: for every parameter combination, scikit-learn gridsearch will execute the tasks, sometimes ending up iterating a single task multiple time. a graph is shown below, demonstrating that this is not exactly the most effective method: 2. dask-search cv: in contrast to gridsearch's cv of sklearn, dask offers a library known as dask-search cv. dask-search cv merges the steps in order to reduce repetitions. we can install the dask-search using the step shown below: installing dask-search cv using conda 
conda install dask-searchcv -c conda-forge
 installing dask-search cv using pip 
$ pip install dask-searchcv
 here is the graph shown below that demonstrates the working of dask-search cv: difference between spark and dask here is a key difference between spark and dask: s. no. spark dask 1 spark is written in scala programming language. dask is written in python programming language. 2 spark offers support for r and python. dask only supports python. 3 spark provides its own ecosystem. dask is one of the components of the python ecosystem. 4 spark offers its own application programming interfaces (apis). dask reutilizes the application programming interfaces (apis) of pandas 5 spark is easy to understand and implement for scala and sql users. dask is normally preferred by python practitioners. 6 spark does not include the support for multi-dimensional arrays natively. dask provides full support for the numpy models for scalable multi-dimensional arrays. next topicmenu-driven programs in python ? prev next ? for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
