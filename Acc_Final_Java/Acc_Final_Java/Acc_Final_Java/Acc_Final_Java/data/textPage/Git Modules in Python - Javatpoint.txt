https://www.javatpoint.com/git-modules-in-python::git modules in python - javatpoint ? scroll to top home python if else for loop function array string regex list set tuple dictionary programs numpy interview questions python tutorial python tutorial python features python history python applications python install python example python variables python data types python keywords python literals python operators python comments python if else python loops python for loop python while loop python break python continue python pass python strings python lists python tuples python list vs tuple python sets python dictionary python functions python built-in functions python lambda functions python files i/o python modules python exceptions python date python regex python sending email read csv file write csv file read excel file write excel file python assert python list comprehension python collection module python math module python os module python random module python statistics module python sys module python ides python arrays command line arguments python magic method python stack & queue pyspark mllib python decorator python generators web scraping using python python json python itertools python multiprocessing how to calculate distance between two points using geopy gmail api in python how to plot the google map using folium package in python grid search in python python high order function nsetools in python python program to find the nth fibonacci number python opencv object detection python simpleimputer module second largest number in python python oops python oops concepts python object class python constructors python inheritance abstraction in python python mysql environment setup database connection creating new database creating tables insert operation read operation update operation join operation performing transactions python mongodb python mongodb python sqlite python sqlite python questions how to install python in windows how to reverse a string in python how to read csv file in python how to run python program how to take input in python how to convert list to string in python how to append element in the list how to compare two lists in python how to convert int to string in python how to create a dictionary in python how to create a virtual environment in python how to declare a variable in python how to install matplotlib in python how to install opencv in python how to print in same line in python how to read json file in python how to read a text file in python how to use for loop in python is python scripting language how long does it take to learn python how to concatenate two strings in python how to connect database in python how to convert list to dictionary in python how to declare a global variable in python how to reverse a number in python what is an object in python which is the fastest implementation of python how to clear python shell how to create a dataframes in python how to develop a game in python how to install tkinter in python how to plot a graph in python how to print pattern in python how to remove an element from a list in python how to round number in python how to sort a dictionary in python strong number in python how to convert text to speech in python bubble sort in python logging in python insertion sort in python binary search in python linear search in python python vs scala queue in python stack in python heap sort in python palindrome program in python program of cumulative sum in python merge sort in python python matrix python unit testing forensics & virtualization best books to learn python best books to learn django gcd of two number in python python program to generate a random string how to one hot encode sequence data in python how to write square root in python pointer in python python 2d array python memory management python libraries for data visualization how to call a function in python git modules in python top python frameworks for gaming python audio modules wikipedia module in python python random randrange() permutation and combination in python getopt module in python merge two dictionaries in python multithreading in python 3 static in python how to get the current date in python argparse in python python tqdm module caesar cipher in python tokenizer in python how to add two lists in python shallow copy and deep copy in python atom python contains in python label encoding in python django vs. node js python frameworks how to create a vector in python using numpy pickle module of python how to convert bytes to string in python python program to find anagram how to convert list to set python vs javascript python holidays module fuzzywuzzy python library dask python dask python (part 2) mode in python menu-driven programs in python python array vs. list what is duck typing in python pep 8 in python python user groups basic commands in python f string in python how brython works how to use brython in the browser arima model in python python modulus operator matlab vs. python method resolution order in python monkey patching in python python __call__ method python heapq module python substring project ideas for python beginners python faker fizz-buzz program in python tabula python python program to print prime factor of given number python program to print pascal triangle namedtuple in python ordereddict in python t-test in python python return statement getter and setter in python enum class in python destructors in python curve fit in python converting csv to json in python underscore (_) in python set vs list in python locating and executing modules flatten list in python pair plot in python data hiding in python python program to find intersection of two lists how to create requirements.txt file in python tic-tac-toe in python python asynchronous programming - asyncio and await python main() function strftime() function in python verbose flag in python regex python ast module python requests module - http request shutil module in python python epoch to datetime python del statement looping technique in python metaprogramming with metaclasses in python precision handling in python python join list strip() function in python gradient descent algorithm prettytable in python sentiment analysis in python convert python list to numpy arrays traceback in python time clock() method in python deque in python dictionary comprehension in python python data analytics python seek() method ternary operator in python how to calculate the area of the circle using python how to write in text file using python python keyerror python super() function max() function in python fraction module in python popular python framework to build api how to check python version python %s - string formatting python seaborn library countplot in python range() vs. xrange() python wordcloud package in python convert dataframe into list anova test in python python program to find compound interest ansible in python python important tips and tricks python coroutines double underscores in python re.search() vs re.findall() in python regex how to install statsmodels in python cos in python vif in python __add__ method in python ethical hacking with python class variable vs instance perfect number in python eol in python python program to convert hexadecimal string to decimal string different methods in python for swapping two numbers without using third variable how to change plot size in matplotlib how to get the zip code in python eel in python assignment operators in python speech recognition python yield vs return in python graphene python name mangling in python python combination without itertools python comprehensions influxdb in python kafka tutorial in python augmented assignment expressions in python python (x,y) software python event-driven programming python semaphore python sorted reverse automorphic number in python sizeof in python python program for accepting the strings which contains all vowels class-based views vs function-based views how to handle cookies in django agg() function in python amicable numbers in python context manager in python create bmi calculator using python string to binary in python what is script mode in python best python libraries for machine learning python program to display calendar of given year how to open url in python broken pipe error in python code template for creating objects in python python program to calculate the best time to buy and sell stock tuple to string in python kadane's algorithm in python loggers in django weather app in django missing data conundrum: exploration and imputation techniques different methods of array rotation in python what is operator overloading in python defaultdict in python operator module in python spinner widget in the kivy library of python number plate recognition using python obfuscating a python program convert string to dictionary in python convert string to json in python dbscan algorithm in python how to write a code for printing the python exception/error hierarchy principal component analysis (pca) with python python program to find number of days between two given dates object recognition using python python vlc module set to list in python string to int in python internet of things with python python pysftp module amazing hacks of python average of list in python check installed modules in python choice() in python convert list to dataframe in python convert string to float in python decorators with parameters in python dynamic typing in python fabs in python how to remove decimal in python python closure python glob module writing a python module modules vs packages in python snmp module in python average of list in python append vs extend vs insert in python how to remove duplicates from a list in python remove multiple characters from a string in python shuffle in python floor() and ceil() functions in python sqrt(): math function of python python yfinance module difflib module in python convert the column type from string to datetime format in pandas dataframe python wxpython module random uniform python relational operators in python string to list in python chatbot in python how to convert float to int in python multiply all elements in list of python module vs function in python reverse a tuple in python tuple to dictionary in python datetime.timedelta() function of python python bio module python dash module how to select rows in pandas dataframe based on conditions typecasting in python dateutil module in python getpass module in python python wand library generate a qr code using python best python pdf library python cachetools module python cmdparser module python dash module python emoji module python nmap module python pylab module working with pdf files in python pdf handling in python manipulating pdf using python list all functions from a python module python list of dictionaries python shelve module creating interactive pdf forms using python python newspaper module how to connect wi-fi using python best python libraries used for ethical hacking windows system administration management using python indentation error in python python imaplib module python lxml module python mayavi module python os.listdir() method python modules for automation data visualization in python using bokeh library how to plot glyphs over a google map by using bokeh library in python how to plot a pie chart using bokeh library in python how to read contents of pdf using ocr in python grammar and spell checker in python converting html to pdf files using python readlines in python how to plot multiple lines on a graph using bokeh in python bokeh.plotting.figure.circle_x() function in python bokeh.plotting.figure.diamond_cross() function in python how to plot rays on a graph using bokeh in python image steganography using python inconsistent use of tabs and spaces in indentation how to plot multiple plots using bokeh in python how to make an area plot in python using bokeh python chempy module python memory-profiler module python phonenumbers module python platform module typeerror string indices must be an integer time series forecasting with prophet in python python pexpect module python optparse module int object is not iterable. python peewee library some cryptocurrency libraries for python building a blockchain using python huffman coding using python nested dictionary in python collections.userstring in python how to customize legends with matplotlib matplotlib legend in subplot morphological operations in image processing in python role of python in artificial intelligence python instagramy module python pprint module python primepy module android development using python python fbchat library artificial intelligence in cybersecurity: pitting algorithms vs algorithms understanding the recognition pattern of artificial intelligence when and how to leverage lambda architecture in big data why should we learn python for data science how to change the "legend" position in matplotlib how to check if element exists in list in python how to check spellings of given words using enchant in python python program to count the number of matching characters in a pair of string ping pong game using turtle in python python function to display calendar python program for calculating the sum of squares of first n natural numbers python program for how to check if a given number is fibonacci number or not randint() function in python visualize tiff file using matplotlib and gdal in python rarfile module in python stemming words using python python program for word guessing game blockchain in healthcare: innovations & opportunities snake game in python using turtle module how to find armstrong numbers between two given integers celery tutorial using python rsme - root mean square error in python building a twitter bot using python python progressbar module python pronouncing module python pyautogui module python pyperclip module how to generate uuid in python python top 10 libraries to learn in 2022 reading netcdf data using python the reprlib module in python how to take multiple input from user in python python zlib library python queue module python yaml parser effective root searching algorithms in python python bz2 module python ipaddress module python pylint module how to process xml in python bisect algorithm functions in python creating and updating powerpoint presentation using python how to change the size of figure drawn with matplotlib keyboard module in python python pyfiglet module creating an mcq quiz game in python statistic with python what is gil in python basic python for java developers how to download youtube videos using python scripts traffic flow simulation in python how to merge and sort two lists in python metacharacters in python write the python program to print all possible combination of integers modulo string formatting in python counters in python python pyautogui library how to draw the mandelbrot set in python python dbm module webcam motion detector in python graphql implementation in django how to implement protobuf in python pyqt library in python how to prettify data structures with pretty print in python encrypt a password in python using bcrypt pyramid framework in python building a telegram bot using python web2py framework in python python os.chdir() method balancing parentheses in python how to provide multiple constructors in python classes profiling the python code python tkinter (gui) python tkinter tkinter button tkinter canvas tkinter checkbutton tkinter entry tkinter frame tkinter label tkinter listbox tkinter menubutton tkinter menu tkinter message tkinter radiobutton tkinter scale tkinter scrollbar tkinter text tkinter toplevel tkinter spinbox tkinter panedwindow tkinter labelframe tkinter messagebox python web blocker introduction building python script script deployment on linux script deployment on windows python mcq python mcq python mcq part 2 related tutorials numpy tutorial django tutorial flask tutorial pandas tutorial pytorch tutorial pygame tutorial matplotlib tutorial opencv tutorial openpyxl tutorial python cgi python design pattern python programs python programs next ? ? prev git modules in python in this article, we will discuss the git module in the python programming language, how users can use it in projects of python. we will also discuss how users can use git modules in conjunction with github so that we can work on large projects with other users. we will also learn how to create a git repository, how to see all the project files' history, how we can go back to when our project's initial stage and how to add new files and modifies them in the repository. what is git? git module of python language is a distributed version control system. a version control system is a set of tools used for tracking the past of a set of files of the projects. users can easily save the state of files at any point by instructing the git version control system. after this, the user can continue to edit the files of the project and save the project at any state. saving the project at any current state is like keeping a backup of the project directory. in the git module, saving the state is referred to as making a commit. whenever a user makes a commit in the git module, the user adds a commit message that explains all the changes made in that state of the project. git module can show all the history of changes and commits made by the user in the project. this feature of the git module really helps the users to figure out what work they have done and look specifically for all the bugs that crept into the systems. by using git modules, users can also compare the files of the projects with different commits. git module also allows the user to return any file or files back to the earlier state of the project with very little effort. the distributed version control system is slightly different from the version control system. the earlier version control system works by saving all the commits locally on the user's hard drive. this collection of commits on the local hard drive of the user's is known as a repository. but due to this, users are not able to work with the team working on the same codebase. as working with the team on the same project, users need their repository to be saved on the platform where all the other team members can access it. a distributed version control system saves the repository on a chief server, which can be shared by many users and developers. this also has the feature of file locking. for git modules, most of the users and developers use github as a central repository, where anyone can access the file. github is like a central place where anyone can share the code, and everyone can access that. the full repository is still saved at all the local repos even after using github. basic usage of git module till now, we know the git module in general. this topic will discuss how users can start working with git modules on their local computer system. step 1: creating a new repository to start working with git module, users first need to enter their information. they have to set a username with the git configuration command. 
$ git config -- global user.name " name of the user goes here "
$ git config - global user.email "username@forexample.com"
 after the setup of the username, users would need a repository to work in. creating a repository is very easy. users can use the git initialization command in the directory: 
$ mkdir sample
$ cd sample
$ git init
 users can initialize the empty git repository in / home / tmp / sample /. git / after creating a repository, users can search it on the git module. the git module command user uses the most frequently is the git status: 
$ git status
 this output shows a couple of the information to the user, like on which branch they are on and that they have nothing to commit. nothing to commit means that there is no file in the directory that the git module is not aware of. and that's how we create a repository. step 2. add a new file to the repository create a file in the repository that git does not know about it. create the file sample.py using the editor, which has only a print statement in it. 
#sample.py
print ( ' adding a new file ! ' ) 
 after this, if the user will run the git status command again, they will see the different results: 
$ git status
 after checking the new file, the git module will tell the user that the file is untracked. that means git is saying that the particular file is not a part of the repository and is not under version control. users can fix this by adding the new file to git. using the git add command for adding the file to the git module. 
$ git add sample.py
$ git status
 now git is aware of the new file sample.py, and it will list the file under changes to be committed. the addition of the file to the git module transfers it into the staging area. this means users can now commit the file to the repository. making a commit changes whenever a user commits changes, they are telling the git module to save this level of state of the file in the repository. users can do it by using the commit command of the git module. the -m option in the command informs the git module to commit the following message. if the users do not use the -m while running the command, the git module will open the editor for the users to create the commit message. to commit the message user should write the command like this: 
$ git commit -m " creating sample.py "
 
$ git status
 users can now see that the commit command has returned a couple of information, most of it is not much useful, but it does tell the user that only one file has changed because the user has only added one file in the repository. the commit command also informs the simple hashing algorithm of the commit (775ca29). after running the git status command again, it shows that the user now has a clean working directory, which means that all the changes in the file are not committed to git. the staging area of the git module git module has a staging area, which is mostly referred to as the index. the staging area is where the git module keeps track of the change's user wants to do in their next commit. whenever the user runs the git add command, like above, where a new file sample.py was moved to the staging area, this change was shown in the git status. the file of the project was moved from the untracked section of the git module to the to be committed section of the output. the staging area of the git module shows the exact content of the file when the user run git add command. if the user modifies this again, the file will be visible on both the areas, staging and unstaging of the git status output. at any stage of working with the git module on the file, which has already been committed once, there are three versions of the file available on which users can work: one version is on the user's hard drive that the user is editing. another version is stored by the git module in the user's staging area. the third version is present in the repository of the file. all of the three versions of the file can be different from one another. by moving the changes to the staging area of the users and then committing the files, they can bring back all these versions of the file into the sync. .gitignore the git status command in the git module is very accessible, and users can use it most often. but sometimes, users might find out that there are couples of files that are showing up on the untracked section of the git module, and they do not want the git modules to see them. for that, the user can use a .gitignore file. for example: 
#let's create a new python file of the project in the same directory called example.py:
#example.py
def get_example ( ) :
return " cow "
 after this, modify the sample.py file to include the example.py and call its function: 
#sample.py
import example 
 example = example.get_example ( )
print ( " animal { } " .format (example) )
 whenever the user imports a local module, the python starts compiling the module into byte code and saves the file on their filesystem. in the python2, after compiling the module into bytecode, it will save the file in the form example.pyc. but in the case of python3, it will generate a _pycache_ directory and store the .pyc file in it. for example: after doing this, if the user runs the command of git status, they will see that particular directory present in the untracked section. users can also see that their example.py file is in the untracked section, but the changes they made to sample.py are in the new section, which is known as "changes not staged for commit". this section means that the changes a user made earlier have not been added to the staging area of the git module. for example: 
$ git status
 to add example.py sample.py files to the repository, the user needs to do the same they did earlier. for example: 
$ git add example.py sample.py
$ git status
 now, the user should commit the changes and should finish the clean - up: 
$ git commit -m " add example module " 
 whenever the user runs the git status command, they will see _pycache_ directory like this: 
$ git status
 if the user wants all the _pycache_ directory and its content to be ignored, then they have to add a .gitignore file in their repository. this is a very simple process. users have to edit the file in their chosen editor. 
# .gitignore
__pycache__
 then, users have to run the git status command, and they no longer see the _pycache_ directory and its content. although the user will see the new .gitignore ! file. for example: 
$ git status
 the file .gitignore is just a regular text file, and this can be added to the repository just like the other regular files. for example: 
$ git add .gitignore
$ git commit - add " create .gitignore " 
 there is one more entrance in the .gitignore file, which is the directory that the user store in their virtual environments. this directory is called virtualenvs. the virtualenvs directory is normally known as env or venv. users can add these to their .gitignore files of the project. by doing this, the directory or the files of the project present in the repository will be ignored. and if there is no file or directory is present then, no action will be done. users can also store a global .gitignore file in their home directory. this process is very easy and simple if the user's editor uses to save the temporary files or makes a back - up files in the local directory of the computer system. for example: 
# .gitignore 
__pycache__
venv
venv /
venv.bak /
env /
env.bak /
.pytest_cache
.cover /
.coverage
 what user should not add to a git repository? when the users are in the initial stage of working on any version control tool, and most probably with the git module. the user would want to store every kind of file in the repository of the git but this a mistake. git module does have limitations and also security concerns due to which users face some limits on what type of files and data they can add to the git repository. the basic rule of all version control systems is that the user should only add source files in the version control systems and never add the generated files to the version control system. the source file is any file that the user creates while typing in the editor. the generated files are the files that the computer creates while processing the source files. for example: sample.py is a source file, while sample.pyc is the generated file. the reasons for not involving the generated files in the git repository: storing generated files in the repository is a waste of space and time. the generated files can be created again, and it may need to be recreated in a different format. if user 1 is using ironpython or cython, and user 2 is using jython interpreter, then the .pyc files would be different from each other. and committing the one format of the .pyc file could create conflicts in the repository. the generated filers are comparatively larger than the source files of the project. adding the generated files in the git repository means that all the other users and developers of the particular project also have to download the files and store them, even they do not need the files. another rule of the git repository is that the user should commit the binary files with precautions and should avoid committing files of large size. git module repository does not save the full replica of each file of the project the user commit. instead, the repository uses the complicated algorithm, which is based on how different following versions of the files. this reduces the quantity of storage file needs. but this algorithm does not apply to the binary files as the binary files such as mp3 or jpg files do not have good difference tools. for binary files, the git module repository has to save the full file of the project whenever the user makes the commit. when the user is working on the git module, or storing files on the github repositories do not save the confidential information in the repository, while sharing it publicly. git log git log is the command of the git module. git log is used to seeing the history of the commits made by the user. for example: 
$ git log 
 users can see the history of commits made by the user in the git repository. all the commit message will appear in the order they were made. the starting of the commit will be identified by the word "commit" and after the simple hashing area of the commit. git log command will provide the history of every simple hashing areas. conclusion this article has discussed the git modules, version control system, how to make commit in git and its repository functions, rules of adding files and information in the repositories of the git module and github. the different types of git command like .gitignore, git log, git add, git status, etc., and their use in the files of project and directories. next topictop python frameworks for gaming ? prev next ? for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
