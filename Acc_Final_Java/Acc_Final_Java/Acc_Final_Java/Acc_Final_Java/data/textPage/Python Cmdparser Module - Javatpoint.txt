https://www.javatpoint.com/python-cmdparser-module::python cmdparser module - javatpoint ? scroll to top home python if else for loop function array string regex list set tuple dictionary programs numpy interview questions python tutorial python tutorial python features python history python applications python install python example python variables python data types python keywords python literals python operators python comments python if else python loops python for loop python while loop python break python continue python pass python strings python lists python tuples python list vs tuple python sets python dictionary python functions python built-in functions python lambda functions python files i/o python modules python exceptions python date python regex python sending email read csv file write csv file read excel file write excel file python assert python list comprehension python collection module python math module python os module python random module python statistics module python sys module python ides python arrays command line arguments python magic method python stack & queue pyspark mllib python decorator python generators web scraping using python python json python itertools python multiprocessing how to calculate distance between two points using geopy gmail api in python how to plot the google map using folium package in python grid search in python python high order function nsetools in python python program to find the nth fibonacci number python opencv object detection python simpleimputer module second largest number in python python oops python oops concepts python object class python constructors python inheritance abstraction in python python mysql environment setup database connection creating new database creating tables insert operation read operation update operation join operation performing transactions python mongodb python mongodb python sqlite python sqlite python questions how to install python in windows how to reverse a string in python how to read csv file in python how to run python program how to take input in python how to convert list to string in python how to append element in the list how to compare two lists in python how to convert int to string in python how to create a dictionary in python how to create a virtual environment in python how to declare a variable in python how to install matplotlib in python how to install opencv in python how to print in same line in python how to read json file in python how to read a text file in python how to use for loop in python is python scripting language how long does it take to learn python how to concatenate two strings in python how to connect database in python how to convert list to dictionary in python how to declare a global variable in python how to reverse a number in python what is an object in python which is the fastest implementation of python how to clear python shell how to create a dataframes in python how to develop a game in python how to install tkinter in python how to plot a graph in python how to print pattern in python how to remove an element from a list in python how to round number in python how to sort a dictionary in python strong number in python how to convert text to speech in python bubble sort in python logging in python insertion sort in python binary search in python linear search in python python vs scala queue in python stack in python heap sort in python palindrome program in python program of cumulative sum in python merge sort in python python matrix python unit testing forensics & virtualization best books to learn python best books to learn django gcd of two number in python python program to generate a random string how to one hot encode sequence data in python how to write square root in python pointer in python python 2d array python memory management python libraries for data visualization how to call a function in python git modules in python top python frameworks for gaming python audio modules wikipedia module in python python random randrange() permutation and combination in python getopt module in python merge two dictionaries in python multithreading in python 3 static in python how to get the current date in python argparse in python python tqdm module caesar cipher in python tokenizer in python how to add two lists in python shallow copy and deep copy in python atom python contains in python label encoding in python django vs. node js python frameworks how to create a vector in python using numpy pickle module of python how to convert bytes to string in python python program to find anagram how to convert list to set python vs javascript python holidays module fuzzywuzzy python library dask python dask python (part 2) mode in python menu-driven programs in python python array vs. list what is duck typing in python pep 8 in python python user groups basic commands in python f string in python how brython works how to use brython in the browser arima model in python python modulus operator matlab vs. python method resolution order in python monkey patching in python python __call__ method python heapq module python substring project ideas for python beginners python faker fizz-buzz program in python tabula python python program to print prime factor of given number python program to print pascal triangle namedtuple in python ordereddict in python t-test in python python return statement getter and setter in python enum class in python destructors in python curve fit in python converting csv to json in python underscore (_) in python set vs list in python locating and executing modules flatten list in python pair plot in python data hiding in python python program to find intersection of two lists how to create requirements.txt file in python tic-tac-toe in python python asynchronous programming - asyncio and await python main() function strftime() function in python verbose flag in python regex python ast module python requests module - http request shutil module in python python epoch to datetime python del statement looping technique in python metaprogramming with metaclasses in python precision handling in python python join list strip() function in python gradient descent algorithm prettytable in python sentiment analysis in python convert python list to numpy arrays traceback in python time clock() method in python deque in python dictionary comprehension in python python data analytics python seek() method ternary operator in python how to calculate the area of the circle using python how to write in text file using python python keyerror python super() function max() function in python fraction module in python popular python framework to build api how to check python version python %s - string formatting python seaborn library countplot in python range() vs. xrange() python wordcloud package in python convert dataframe into list anova test in python python program to find compound interest ansible in python python important tips and tricks python coroutines double underscores in python re.search() vs re.findall() in python regex how to install statsmodels in python cos in python vif in python __add__ method in python ethical hacking with python class variable vs instance perfect number in python eol in python python program to convert hexadecimal string to decimal string different methods in python for swapping two numbers without using third variable how to change plot size in matplotlib how to get the zip code in python eel in python assignment operators in python speech recognition python yield vs return in python graphene python name mangling in python python combination without itertools python comprehensions influxdb in python kafka tutorial in python augmented assignment expressions in python python (x,y) software python event-driven programming python semaphore python sorted reverse automorphic number in python sizeof in python python program for accepting the strings which contains all vowels class-based views vs function-based views how to handle cookies in django agg() function in python amicable numbers in python context manager in python create bmi calculator using python string to binary in python what is script mode in python best python libraries for machine learning python program to display calendar of given year how to open url in python broken pipe error in python code template for creating objects in python python program to calculate the best time to buy and sell stock tuple to string in python kadane's algorithm in python loggers in django weather app in django missing data conundrum: exploration and imputation techniques different methods of array rotation in python what is operator overloading in python defaultdict in python operator module in python spinner widget in the kivy library of python number plate recognition using python obfuscating a python program convert string to dictionary in python convert string to json in python dbscan algorithm in python how to write a code for printing the python exception/error hierarchy principal component analysis (pca) with python python program to find number of days between two given dates object recognition using python python vlc module set to list in python string to int in python internet of things with python python pysftp module amazing hacks of python average of list in python check installed modules in python choice() in python convert list to dataframe in python convert string to float in python decorators with parameters in python dynamic typing in python fabs in python how to remove decimal in python python closure python glob module writing a python module modules vs packages in python snmp module in python average of list in python append vs extend vs insert in python how to remove duplicates from a list in python remove multiple characters from a string in python shuffle in python floor() and ceil() functions in python sqrt(): math function of python python yfinance module difflib module in python convert the column type from string to datetime format in pandas dataframe python wxpython module random uniform python relational operators in python string to list in python chatbot in python how to convert float to int in python multiply all elements in list of python module vs function in python reverse a tuple in python tuple to dictionary in python datetime.timedelta() function of python python bio module python dash module how to select rows in pandas dataframe based on conditions typecasting in python dateutil module in python getpass module in python python wand library generate a qr code using python best python pdf library python cachetools module python cmdparser module python dash module python emoji module python nmap module python pylab module working with pdf files in python pdf handling in python manipulating pdf using python list all functions from a python module python list of dictionaries python shelve module creating interactive pdf forms using python python newspaper module how to connect wi-fi using python best python libraries used for ethical hacking windows system administration management using python indentation error in python python imaplib module python lxml module python mayavi module python os.listdir() method python modules for automation data visualization in python using bokeh library how to plot glyphs over a google map by using bokeh library in python how to plot a pie chart using bokeh library in python how to read contents of pdf using ocr in python grammar and spell checker in python converting html to pdf files using python readlines in python how to plot multiple lines on a graph using bokeh in python bokeh.plotting.figure.circle_x() function in python bokeh.plotting.figure.diamond_cross() function in python how to plot rays on a graph using bokeh in python image steganography using python inconsistent use of tabs and spaces in indentation how to plot multiple plots using bokeh in python how to make an area plot in python using bokeh python chempy module python memory-profiler module python phonenumbers module python platform module typeerror string indices must be an integer time series forecasting with prophet in python python pexpect module python optparse module int object is not iterable. python peewee library some cryptocurrency libraries for python building a blockchain using python huffman coding using python nested dictionary in python collections.userstring in python how to customize legends with matplotlib matplotlib legend in subplot morphological operations in image processing in python role of python in artificial intelligence python instagramy module python pprint module python primepy module android development using python python fbchat library artificial intelligence in cybersecurity: pitting algorithms vs algorithms understanding the recognition pattern of artificial intelligence when and how to leverage lambda architecture in big data why should we learn python for data science how to change the "legend" position in matplotlib how to check if element exists in list in python how to check spellings of given words using enchant in python python program to count the number of matching characters in a pair of string ping pong game using turtle in python python function to display calendar python program for calculating the sum of squares of first n natural numbers python program for how to check if a given number is fibonacci number or not randint() function in python visualize tiff file using matplotlib and gdal in python rarfile module in python stemming words using python python program for word guessing game blockchain in healthcare: innovations & opportunities snake game in python using turtle module how to find armstrong numbers between two given integers celery tutorial using python rsme - root mean square error in python building a twitter bot using python python progressbar module python pronouncing module python pyautogui module python pyperclip module how to generate uuid in python python top 10 libraries to learn in 2022 reading netcdf data using python the reprlib module in python how to take multiple input from user in python python zlib library python queue module python yaml parser effective root searching algorithms in python python bz2 module python ipaddress module python pylint module how to process xml in python bisect algorithm functions in python creating and updating powerpoint presentation using python how to change the size of figure drawn with matplotlib keyboard module in python python pyfiglet module creating an mcq quiz game in python statistic with python what is gil in python basic python for java developers how to download youtube videos using python scripts traffic flow simulation in python how to merge and sort two lists in python metacharacters in python write the python program to print all possible combination of integers modulo string formatting in python counters in python python pyautogui library how to draw the mandelbrot set in python python dbm module webcam motion detector in python graphql implementation in django how to implement protobuf in python pyqt library in python how to prettify data structures with pretty print in python encrypt a password in python using bcrypt pyramid framework in python building a telegram bot using python web2py framework in python python os.chdir() method balancing parentheses in python how to provide multiple constructors in python classes profiling the python code python tkinter (gui) python tkinter tkinter button tkinter canvas tkinter checkbutton tkinter entry tkinter frame tkinter label tkinter listbox tkinter menubutton tkinter menu tkinter message tkinter radiobutton tkinter scale tkinter scrollbar tkinter text tkinter toplevel tkinter spinbox tkinter panedwindow tkinter labelframe tkinter messagebox python web blocker introduction building python script script deployment on linux script deployment on windows python mcq python mcq python mcq part 2 related tutorials numpy tutorial django tutorial flask tutorial pandas tutorial pytorch tutorial pygame tutorial matplotlib tutorial opencv tutorial openpyxl tutorial python cgi python design pattern python programs python programs next ? ? prev python cmdparser module sometimes, we have to write commands using the command prompt terminal, and this terminal which interprets the inline commands written for various purposes, is called command interpreters. we can write and build a framework which we will use to write line-oriented command interpreters, and for achieving this task, sometimes we have to use classes. a class that provides a framework for command interpreters so that we can write line-oriented commands is known as the cmd class. now, many of us wonder what the uses of cmd class and how it is helpful to us are. a cmd class is very useful for creating prototypes, test harnesses that will be later wrapped, and administrative tools present in a more sophisticated manner. therefore, to perform all these tasks and create these tools, we have to use a command-line interface, and this can be easily built using a cmd class. the use of command-line interpreters has become very rare because graphical user interface (gui) in most applications has been increased nowadays. therefore, users are more attracted to using these applications only instead of using a simple line-oriented command interpreter but using a command-line interface has its own advantages. following are the several advantages of using a command-line interface or interpreter: these command-line interpreters don't have any gui-based interfaces; that's why cpu and memory resources far from cheaper computers are also available. creating a text-oriented document with the command-line interpreter is very easy, and we can create it very fastly. as the command line interpreters are portable, therefore, we can run them anywhere on any device. it is very easy to open a file in the command line interpreter, and this method is way faster than getting into drivers and searching into the menu for files. these are some major advantages of command-line interpreters, and that's why most users even today prefer them over many gui-based applications whose interfaces are way more attractive. after seeing these advantages, we can understand and conclude that it is how much useful to build a command-line interpreter with the cmd class. it will not only help us in our professional life and professional tasks, but it will also be helpful in our personal projects. many of us would be surprised to hear that the cmd class is also present in the python packages, and therefore it is possible to create a framework for command-line interface using a python program. we are going to learn about the cmdparser module in python in which we will see the use of cmd class, and we will build a framework for command line interpreter using this module. cmdparser module in python cmdparser module is a python package that comes with two sub-modules in it which are very useful for us to write text command parsers and create a framework for the command-line interface. cmdparser module also uses the cmd class & functions of this in it, and we will use these functions in the programs to build a parse tree to perform name matching operation. cmdparser module in python uses the built-in cmd module of python and calls it for creating a framework for the command-line interface. the cmdparser module of python contains the two sub-modules or python packages that are following: datetimeparse cmdparser in this tutorial, we will learn about the implementation and working of both sub-modules of the cmdparser package and use them in a python program to create a simple parse tree. cmdparser module: installation if we want to use functions and sub-modules of the cmdparser module in a python program, we should ensure that this module is present in our system because it is not an in-built module of python. therefore, if the cmdparser module is not already present in our system, we have to install it to move further with the implementation part of its sub-modules. we can install the cmdparser module through various installation processes, but here we will use the pip installer to perform this task because it is the easiest and simplest way to do it. write the following command in the terminal shell to install the cmdparser module in our system through pip installer: 
pip install cmdparser
 after writing the command given above, we have to press the enter key and wait for some time as it will take a while to install this module successfully. the cmdparser module is now successfully installed in our system as we can see that, and now, we can work with it and its sub-modules by importing it into the program. we will first look at the overview and implementation of the cmdparser sub-module of the cmdparser package, and then we will go through the overview of the datetimeparser sub-module. cmdparser module: overview of cmdparser sub-module: cmdparser sub-module from the cmdparser package of python allows us to create parse tree structure with the help of textual command specifications like the one given below: 
fries( scam | ham [eggs] | peas [omelette [...]] )
 we can check this particular command string using the parse tree structures. the cmdparser sub-module also allows us to validate partial command strings' completion to be listed for the parse tree. let's understand this concept by making a parse tree from a python program using the textual command specification we have listed above. example: look at the following python program where we have created a parse tree from the cmdparser sub-module and then matched tokens with the parse tree: 
# import cmdparser package from cmdparser module
from cmdparser import cmdparser
# creating a sample parse tree
parsetree = cmdparser.parse_spec("abcd (efgh|ijkl) <mnop> [qrst]")
# matching tokens from parse tree
parsetree.check_match(("abcd", "efgh", "something"))
parsetree.check_match(("abcd", "efgh", "anything", "uvwx")) # will throw an error 
# completing parse tree in the output
parsetree.get_completions(("abcd", ))
 output: "command invalid somewhere in: 'uvwx'"
{'efgh', 'ijkl'}
 explanation: we have first imported the cmdparser sub-module from the cmdparser package to create a parse tree with tokens in the program. after that, we have created a sample parse tree in the parsetree variable using the parse_spec() function from the cmdparser package. inside the parse tree, we have only defined static tokens and used them later for matching. after that, we used the parse_match() of the cmdparser package to match the tokens from the parse tree we defined. in the second matching, the parse tree will throw an error as "uvwx" is not a static token defined in the package. in last, we used the parse_completions() function to complete the rest of the tokens from the parse tree. this function will print the rest of the static tokens of the parse tree in the output. now, as we can see in the output, the rest of the static tokens from the parse is printed, and before that, an error for the "uvwx" token is also printed. we used static tokens in the parse, which we have created in the example given above, but we can also create parse trees with the help of dynamic tokens using the cmdparser module. while we are creating a parse tree having dynamic tokens in it, we can set up the dynamic tokens where the list of strings is accepted, and this list of strings in the dynamic tokens changes over time. we can also use dynamic tokens where the arbitrary string or list of strings can be accepted while we are dealing with a fixed token string. if we want to look at the specifications of all the classes available in the cmdparser module for setting up dynamic tokens, we can check the docstrings of the module. here, we will understand this by creating a parse tree with dynamic tokens using the cmdparser module classes. look at the following example where we created a parse tree using dynamic tokens from the cmdparser module. example 2: look at the following python program where we created a parse tree with dynamic tokens to accept a dynamic list of strings: 
# import cmdparser from cmdparser module
from cmdparser import cmdparser
# class having fruit names as token
class tokenoffruit(cmdparser.token):
	def get_values(self, context):
		return ["watermelon", "melon", "orange", "grapes", "lichi", "mango", "apple", "banana", "strawberry", "guava", "greenapple"] # tokens of class with fruit name values
# default function for identification
def myidentfictionfactory(token):
	if token == "number":
		return cmdparser.integertoken(token) # if token is a number
	elif token == "fruit":
		return tokenoffruit(token) # if token is a fruit name
	return none
# creating a parse tree with fruit and number token in it
parsetree = cmdparser.parse_spec("keep <number> <fruit> packet", ident_factory = myidentfictionfactory)
cmdfields = {}
# matching with the parse tree
parsetree.check_match(("keep", "26", "mango", "packet"), fields = cmdfields)
parsetree.check_match(("keep", "all", "orange", "packet"))
# getting completions from the parse tree
parsetree.get_completions(("keep", "24",))
 output: "'all' is not a valid 
              "
{'apple',
 'banana',
 'grapes',
 'greenapple',
 'guava',
 'lichi',
 'mango',
 'melon',
 'orange',
 'strawberry',
 'watermelon'}

             explanation: after importing the cmdparser sub-module package from the cmdparser module, we created a class with fruit names as tokens of the parse tree in the program. the fruit names we defined inside the 'tokenoffurits' class will work as the static tokens of the parse tree, and for retrieving the values of fruit names from the class, we have defined a default function inside the class. then, we have defined another function (myidentificationfactory) that will accept dynamic tokens in the parse tree, and it will accept numeric values (numbers) as matching values. to set up dynamic tokens with a numeric value, we used integertoken() function from the cmdparser package, and thus it will make this a dynamic token that will accept any integer value as a matching value from the parse tree. after that, we used parse_spec() function to create the parse tree having number and fruit as dynamic tokens and "keep" & "packet" as static tokens. then, we used the check_match() function and gave token values in it to perform the matching operation from the parse tree. we can see in the output that when we haven't provided a number, it will throw a matching error. in last, when we used the get_completions() function with the parse tree, all the fruit values used as a token is printed in the output. classes in the cmdparser sub-module: following are the four classes available inside the cmdparser sub-package that are suitable as base classes for creating user-derived tokens (static as well as dynamic): token: token is the base class from the cmdparser sub-package, and it is useful when one of the sets of fixed values is suitable in the parse tree we are creating. in the parse tree, where the list of string values can be static or dynamic, this class can be used to create and accept tokens. we have to override the get_values() method if we want to return a list of valid tokens as a list of strings from the parse tree in the result. anytoken: this base class is similar to the token class of the sub-package, but any string is to be expected in the result while using the anytoken base class. if we want to perform validation of the tokens, we can do this via the validate() method available in the sub-module. but, before using the validate() method, we should note that validate() method doesn't allow the tab-completion because it is called only during the entire command is parsed. anytoken base class also requires the convert() method while calling the list of strings (both static and dynamic). anytokenstring: the anytokenstring base class is very similar to the anytoken class in terms of the function performed by both base classes. but, in the anytokenstring class, all the remaining items from the values we defined on the command line are consumed during the parsing. subtree: the subtree base class from the cmdparser sub-package matches the entire command from the parse tree we created and stores the result of the matching process against the specified token in the dictionary fields. while using the subtree class, we have to pass the command specification string to the class's constructor, and then type classes will override the convert() method to interpret the command. cmdparser module: overview of datetimeparser sub-module: datetimeparser sub-module from the cmdparser package adds some specific token types in the creation of parse tree, which will help to parse human-readable specifications related to date and time format. in the datetimeparser sub-module, both absolute and relative types of dates are specified, and these types can be converted to other instances also whenever required and as appropriate. following are the examples of types of dates in the datetimeparser sub-module: 02 november 2020 01: 28 on thursday last week etc. classes in the datetimeparser sub-module: following are the five classes available inside the datetimeparser sub-package of the cmdparser module that is suitable as base classes for creating user-derived tokens (static as well as dynamic): timesubtree: timesubtree class of the datetimeparser sub-module is used to parse the time of a day given in 12 or 24-hour format inside a parse tree. the returned value after parsing the time given is as returned with the help of time.localtime() function. datesubtree: datesubtree class from the datetimeparser sub-module acts similar to the timesubtree class. datesubtree class includes literals for the different date formats, i.e., days from a week related to the current day (monday last week), literal date (01-11-2021), descriptive date version (01-november-2021), as well as today, yesterday, and tomorrow along with parse calendar dates. the return value in the case of datesubtree class is the datetime.date instance from the parse tree. datetimesubtree: after reading the description of the first two base classes of the datetimeparser sub-module, we can get a basic idea of datetimesubtree class by its name. datetimesubtree class parses specifications from both date and time given in the parse tree. datetimesubtree accepts a combination of timesubtree and datesubtree phrases or a phrase of relativetimesubtree class (we will read next about this class) to parse the specifications of both date and time. in the case of a phrase is from relativetimesubtree class, the time is taken in the relative format according to the time given. the returned value for the datetimesubtree class is the datetime.datetime instance value. relativetimesubtree: the relativetimesubtree base class from the datetimeparser sub-module returns from the wrapper class as its return value. the relativetimesubtree class is used to parse phrases given in the format, which indicates a time offset from the present time, such as two days ago, three hours ago, etc. the returned value in the case of relativetimesubtree class is an instance of cmdparser.datedelta class (a wrapper class from the datetimeparser sub-module) contains a datetime.timedelta instance. classcalenderperiodsubtree: the classcalenderperiodsubtree is the last base class from the datetimeparser sub-module, and it parses the specification of calender periods given from the past. the return value in the case of this class is 2-tuple of instances from the datetime.date, which represents the following in the return value format: ranges of date specified from the calendar, where the first date from the range is inclusive and the second date from the range is exclusive etc. conclusion we read about cmdparser module in this tutorial, and we learned how we could create an interface of cmdparser using the packages of this module. we learned about both cmdparser and datetimeparser sub-modules of the cmdparser package in python and how these are helpful in creating tokens for the parse tree. in last, we looked at the base classes of both sub-modules of the cmdparser package and learned how these classes are helpful in parsing the specifications given for a token of the parse tree. next topicpython dash module ? prev next ? for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
