https://www.javatpoint.com/python-event-driven-programming::python event-driven programming - javatpoint ? scroll to top home python if else for loop function array string regex list set tuple dictionary programs numpy interview questions python tutorial python tutorial python features python history python applications python install python example python variables python data types python keywords python literals python operators python comments python if else python loops python for loop python while loop python break python continue python pass python strings python lists python tuples python list vs tuple python sets python dictionary python functions python built-in functions python lambda functions python files i/o python modules python exceptions python date python regex python sending email read csv file write csv file read excel file write excel file python assert python list comprehension python collection module python math module python os module python random module python statistics module python sys module python ides python arrays command line arguments python magic method python stack & queue pyspark mllib python decorator python generators web scraping using python python json python itertools python multiprocessing how to calculate distance between two points using geopy gmail api in python how to plot the google map using folium package in python grid search in python python high order function nsetools in python python program to find the nth fibonacci number python opencv object detection python simpleimputer module second largest number in python python oops python oops concepts python object class python constructors python inheritance abstraction in python python mysql environment setup database connection creating new database creating tables insert operation read operation update operation join operation performing transactions python mongodb python mongodb python sqlite python sqlite python questions how to install python in windows how to reverse a string in python how to read csv file in python how to run python program how to take input in python how to convert list to string in python how to append element in the list how to compare two lists in python how to convert int to string in python how to create a dictionary in python how to create a virtual environment in python how to declare a variable in python how to install matplotlib in python how to install opencv in python how to print in same line in python how to read json file in python how to read a text file in python how to use for loop in python is python scripting language how long does it take to learn python how to concatenate two strings in python how to connect database in python how to convert list to dictionary in python how to declare a global variable in python how to reverse a number in python what is an object in python which is the fastest implementation of python how to clear python shell how to create a dataframes in python how to develop a game in python how to install tkinter in python how to plot a graph in python how to print pattern in python how to remove an element from a list in python how to round number in python how to sort a dictionary in python strong number in python how to convert text to speech in python bubble sort in python logging in python insertion sort in python binary search in python linear search in python python vs scala queue in python stack in python heap sort in python palindrome program in python program of cumulative sum in python merge sort in python python matrix python unit testing forensics & virtualization best books to learn python best books to learn django gcd of two number in python python program to generate a random string how to one hot encode sequence data in python how to write square root in python pointer in python python 2d array python memory management python libraries for data visualization how to call a function in python git modules in python top python frameworks for gaming python audio modules wikipedia module in python python random randrange() permutation and combination in python getopt module in python merge two dictionaries in python multithreading in python 3 static in python how to get the current date in python argparse in python python tqdm module caesar cipher in python tokenizer in python how to add two lists in python shallow copy and deep copy in python atom python contains in python label encoding in python django vs. node js python frameworks how to create a vector in python using numpy pickle module of python how to convert bytes to string in python python program to find anagram how to convert list to set python vs javascript python holidays module fuzzywuzzy python library dask python dask python (part 2) mode in python menu-driven programs in python python array vs. list what is duck typing in python pep 8 in python python user groups basic commands in python f string in python how brython works how to use brython in the browser arima model in python python modulus operator matlab vs. python method resolution order in python monkey patching in python python __call__ method python heapq module python substring project ideas for python beginners python faker fizz-buzz program in python tabula python python program to print prime factor of given number python program to print pascal triangle namedtuple in python ordereddict in python t-test in python python return statement getter and setter in python enum class in python destructors in python curve fit in python converting csv to json in python underscore (_) in python set vs list in python locating and executing modules flatten list in python pair plot in python data hiding in python python program to find intersection of two lists how to create requirements.txt file in python tic-tac-toe in python python asynchronous programming - asyncio and await python main() function strftime() function in python verbose flag in python regex python ast module python requests module - http request shutil module in python python epoch to datetime python del statement looping technique in python metaprogramming with metaclasses in python precision handling in python python join list strip() function in python gradient descent algorithm prettytable in python sentiment analysis in python convert python list to numpy arrays traceback in python time clock() method in python deque in python dictionary comprehension in python python data analytics python seek() method ternary operator in python how to calculate the area of the circle using python how to write in text file using python python keyerror python super() function max() function in python fraction module in python popular python framework to build api how to check python version python %s - string formatting python seaborn library countplot in python range() vs. xrange() python wordcloud package in python convert dataframe into list anova test in python python program to find compound interest ansible in python python important tips and tricks python coroutines double underscores in python re.search() vs re.findall() in python regex how to install statsmodels in python cos in python vif in python __add__ method in python ethical hacking with python class variable vs instance perfect number in python eol in python python program to convert hexadecimal string to decimal string different methods in python for swapping two numbers without using third variable how to change plot size in matplotlib how to get the zip code in python eel in python assignment operators in python speech recognition python yield vs return in python graphene python name mangling in python python combination without itertools python comprehensions influxdb in python kafka tutorial in python augmented assignment expressions in python python (x,y) software python event-driven programming python semaphore python sorted reverse automorphic number in python sizeof in python python program for accepting the strings which contains all vowels class-based views vs function-based views how to handle cookies in django agg() function in python amicable numbers in python context manager in python create bmi calculator using python string to binary in python what is script mode in python best python libraries for machine learning python program to display calendar of given year how to open url in python broken pipe error in python code template for creating objects in python python program to calculate the best time to buy and sell stock tuple to string in python kadane's algorithm in python loggers in django weather app in django missing data conundrum: exploration and imputation techniques different methods of array rotation in python what is operator overloading in python defaultdict in python operator module in python spinner widget in the kivy library of python number plate recognition using python obfuscating a python program convert string to dictionary in python convert string to json in python dbscan algorithm in python how to write a code for printing the python exception/error hierarchy principal component analysis (pca) with python python program to find number of days between two given dates object recognition using python python vlc module set to list in python string to int in python internet of things with python python pysftp module amazing hacks of python average of list in python check installed modules in python choice() in python convert list to dataframe in python convert string to float in python decorators with parameters in python dynamic typing in python fabs in python how to remove decimal in python python closure python glob module writing a python module modules vs packages in python snmp module in python average of list in python append vs extend vs insert in python how to remove duplicates from a list in python remove multiple characters from a string in python shuffle in python floor() and ceil() functions in python sqrt(): math function of python python yfinance module difflib module in python convert the column type from string to datetime format in pandas dataframe python wxpython module random uniform python relational operators in python string to list in python chatbot in python how to convert float to int in python multiply all elements in list of python module vs function in python reverse a tuple in python tuple to dictionary in python datetime.timedelta() function of python python bio module python dash module how to select rows in pandas dataframe based on conditions typecasting in python dateutil module in python getpass module in python python wand library generate a qr code using python best python pdf library python cachetools module python cmdparser module python dash module python emoji module python nmap module python pylab module working with pdf files in python pdf handling in python manipulating pdf using python list all functions from a python module python list of dictionaries python shelve module creating interactive pdf forms using python python newspaper module how to connect wi-fi using python best python libraries used for ethical hacking windows system administration management using python indentation error in python python imaplib module python lxml module python mayavi module python os.listdir() method python modules for automation data visualization in python using bokeh library how to plot glyphs over a google map by using bokeh library in python how to plot a pie chart using bokeh library in python how to read contents of pdf using ocr in python grammar and spell checker in python converting html to pdf files using python readlines in python how to plot multiple lines on a graph using bokeh in python bokeh.plotting.figure.circle_x() function in python bokeh.plotting.figure.diamond_cross() function in python how to plot rays on a graph using bokeh in python image steganography using python inconsistent use of tabs and spaces in indentation how to plot multiple plots using bokeh in python how to make an area plot in python using bokeh python chempy module python memory-profiler module python phonenumbers module python platform module typeerror string indices must be an integer time series forecasting with prophet in python python pexpect module python optparse module int object is not iterable. python peewee library some cryptocurrency libraries for python building a blockchain using python huffman coding using python nested dictionary in python collections.userstring in python how to customize legends with matplotlib matplotlib legend in subplot morphological operations in image processing in python role of python in artificial intelligence python instagramy module python pprint module python primepy module android development using python python fbchat library artificial intelligence in cybersecurity: pitting algorithms vs algorithms understanding the recognition pattern of artificial intelligence when and how to leverage lambda architecture in big data why should we learn python for data science how to change the "legend" position in matplotlib how to check if element exists in list in python how to check spellings of given words using enchant in python python program to count the number of matching characters in a pair of string ping pong game using turtle in python python function to display calendar python program for calculating the sum of squares of first n natural numbers python program for how to check if a given number is fibonacci number or not randint() function in python visualize tiff file using matplotlib and gdal in python rarfile module in python stemming words using python python program for word guessing game blockchain in healthcare: innovations & opportunities snake game in python using turtle module how to find armstrong numbers between two given integers celery tutorial using python rsme - root mean square error in python building a twitter bot using python python progressbar module python pronouncing module python pyautogui module python pyperclip module how to generate uuid in python python top 10 libraries to learn in 2022 reading netcdf data using python the reprlib module in python how to take multiple input from user in python python zlib library python queue module python yaml parser effective root searching algorithms in python python bz2 module python ipaddress module python pylint module how to process xml in python bisect algorithm functions in python creating and updating powerpoint presentation using python how to change the size of figure drawn with matplotlib keyboard module in python python pyfiglet module creating an mcq quiz game in python statistic with python what is gil in python basic python for java developers how to download youtube videos using python scripts traffic flow simulation in python how to merge and sort two lists in python metacharacters in python write the python program to print all possible combination of integers modulo string formatting in python counters in python python pyautogui library how to draw the mandelbrot set in python python dbm module webcam motion detector in python graphql implementation in django how to implement protobuf in python pyqt library in python how to prettify data structures with pretty print in python encrypt a password in python using bcrypt pyramid framework in python building a telegram bot using python web2py framework in python python os.chdir() method balancing parentheses in python how to provide multiple constructors in python classes profiling the python code python tkinter (gui) python tkinter tkinter button tkinter canvas tkinter checkbutton tkinter entry tkinter frame tkinter label tkinter listbox tkinter menubutton tkinter menu tkinter message tkinter radiobutton tkinter scale tkinter scrollbar tkinter text tkinter toplevel tkinter spinbox tkinter panedwindow tkinter labelframe tkinter messagebox python web blocker introduction building python script script deployment on linux script deployment on windows python mcq python mcq python mcq part 2 related tutorials numpy tutorial django tutorial flask tutorial pandas tutorial pytorch tutorial pygame tutorial matplotlib tutorial opencv tutorial openpyxl tutorial python cgi python design pattern python programs python programs next ? ? prev python event-driven programming in this tutorial, we will learn about event-driven programming and the python module (asyncio) that we can use to do python event-driven programming. event-driven programming eventually, the flow of a program depends upon the events, and programming which focuses on events is called event-driven programming. we were only dealing with either parallel or sequential models, but now we will discuss the asynchronous model. the programming model following the concept of event-driven programming is called the asynchronous model. the working of event-driven programming depends upon the events happening in a program. other than this, it depends upon the program's event loops that always listen to a new incoming event in the program. once an event loop starts in the program, then only the events will decide what will execute and in which order. look at the following flow chart of event loops to understand the working of events in event-driven programming: asyncio- python event-driven programming module the asyncio module was added into python in version 3.4, and it is available on all the later versions of python. asyncio module provides a very good infrastructure for writing concurrent code as single-threaded using the coroutines in the program. in the asyncio module of python, following the different concepts are used while doing event-driven programming: the event loop futures coroutines @asyncio.coroutine decorator tasks transports and protocols let's learn about all these different concepts used by the asyncio module in detail and understand how they work while doing event-driven programming. the event loop the event loop is a functionality of the asyncio module used to handle all the events happening in a computational program. event loops act like round the way while the execution of the whole program is happening, and it also keeps track of the executed and new incoming events. one of the major advantages of the asyncio module is that it allows only a single event loop per process. in the asyncio module, we have some methods by which we can manage the event loop in the code. following are such methods are provided in the asyncio module. time() - we can use this method to return the current time to the user, according to the internal clock present in the event loop. loop = get_event_loop() - by using this method, we will get the event loop in return according to the current context executing in the program. call_soon(callbackfunction, argumentgiven) - with this function, we can arrange that a callback function will be called as soon as possible. the callback function given in the argument will be called when the control returns to the event loop and after call_soon() returns. call_later(time_to_delayed, callbackfunction, argumentgiven) - using this method, we can arrange that the callback function given in the method will be called after the time delay (in seconds) we provided. new_event_loop() - using this method, we can create and return a new event loop project. set_event_loop() - with the help of this method, we can set the event loop for the current context executing from the program to the loop. run_forever() - by using the loop.run_forever() method in the program, we can run a loop until the stop() method is called. now, we will look at a python program in the following example where we will use the event loop method, i.e., get_event_loop() method. by using this method, we will print the command we give inside the event. example: look at the following python program with event loops in it: 
# importing asyncio module in the program
import asyncio
# a default function with event loops method
def looptext(loop):
   # a text printing command
       print('printing this text through the event loop')
       loop.stop() # stopping the loop
loop = asyncio.get_event_loop() # using get_event_loop() method to print the text
loop.call_soon(looptext, loop) # using call_soon() method from event loops
loop.run_forever() # run_forever() on event loop
loop.close() # closing the loop
 output printing this text through the event loop
 explanation: we have first imported the asyncio module in the program to use the event loops methods. after that, we have defined a default function where we gave 'loop' as a parameter and print command inside the function. we used the stop() method from event loops to stop the event. after that, we used the get_event_loop() method on the loop parameter to print the text from the default function. then, in the call_soon() event loop method, we used the function name and parameter of a function as arguments. in last, we used run_forever() and close() event loops methods. futures future classes given in the asyncio module are compatible with the concurrent.futures methods. the future class given in the asyncio module represents the computation from the program, which is yet to be accomplished. there are some major differences between the concurrent.futures.future and asyncio.futures. the callback function that we have registered in the future class with the add_done_callback() method will always be called only through the call_soon() method from the event loop. the exception() and result() methods from the future class will not take a timeout or time given argument, and they will show an error in the output when the future isn't done yet on these functions. we cannot use asyncio.futures.future class with the as_completed() or wait() functions present in the concurrent.futures package as it is not compatible with them. now, we will look at a python program in the following example, where we will use the future class methods from the asyncio module and print the text in the output. example: 
# importing asyncio module in the program
import asyncio
# a default function from the async module using future parameter in it
async def myfunction(future):
   await asyncio.sleep(2) # using sleep() function of asyncio module
   future.set_result('this text is printed using future class methods!') # printing text from future parameter
# using get_event_loop() method from event loop
loop = asyncio.get_event_loop()
future = asyncio.future() # using future() class method
# calling default function from future class method
asyncio.ensure_future(myfunction(future))
# using try & finally method future parameter of function
try:
   loop.run_until_complete(future)
   print(future.result()) # printing result from future class
finally:
      loop.close() # finally closing the loop
 output this text is printed using future class methods!
 explanation: we have first defined a default function, i.e., 'myfunction', with future as a parameter. inside the function, we used the sleep() method as a two-second pause for the execution. then, we gave the text which we want to print in the result using future class methods. we used the get_event_loop method from the event loop in the program. then, we used the future() class method on the future parameter given in the default function. now, we can print the text in the output as we have used the future in it. to print the text in the output, we have used the try and finish method, wherein the try method, we have called the printing command, and in the finish method, we closed the loop using the close() method. coroutines the concept of coroutines inside the asyncio module is very similar to the concept of coroutine in the thread object from the threading module. this concept of coroutines in the asyncio module is the generalization form of the subroutine concept. we can even suspend a coroutine during the program's execution so that the suspended coroutine will wait for external processing given by the user. the suspended coroutine will return to where it had last suspended only after the external processing was done completely. in asyncio module coroutines, we can use the following two ways that will help us to implement the coroutines in the program: @asyncio.coroutine decorator async def function() let's understand both ways by using their implementation in a python program. 1. @asyncio.coroutine decorator we can implement the coroutines inside the program by utilizing the generators with the asyncio module decorator, i.e., @asyncio.coroutine decorator. we can understand this implementation of coroutine with decorator through the following example. example: look at the following python program: 
# importing asyncio module in the program
import asyncio
# using @asyncio.coroutine decorator to implement coroutines
@asyncio.coroutine
# using a default function with coroutine implementation
def operationcoroutine():
    print("this text is present inside the coroutine of the asyncio module!") # printing text inside coroutine
loop = asyncio.get_event_loop() # using get_event_loop() method to print text
try:
     loop.run_until_complete(operationcoroutine()) # using run_until_complete() loop method on default function
finally:
    loop.close() # closing the loop
 output this text is present inside the coroutine of the asyncio module!
 explanation: we have used the @asyncio.coroutine decorator after importing the asyncio module. then, we used a default function to use the coroutine method to get the text. after that, we used the get_event_loop() method from the event loop to print the text in the output. last, we used the 'try and finally' method on the default function and closed the loop in the program using the close() function. 2. async def function() we can say that the async def function() is the most generalized method for implementing the coroutines by the asyncio module. we can understand this method of implementing coroutines with def function() through the following example. example: look at the following python program: 
# importing asyncio module in the program
import asyncio
# using async def function() to implement coroutines
async def operationcoroutine():
   print("this text is present inside the coroutine of the asyncio module!") # printing text inside coroutine
loop = asyncio.get_event_loop() # using get_event_loop() method to print text
try:     loop.run_until_complete(operationcoroutine()) # using run_until_complete() loop method on default function
finally:
    loop.close() # closing the loop
 output this text is present inside the coroutine of the asyncio module!
 explanation: like the first way of implementing coroutines, we have followed the same path in this method too. in this method, instead of using a decorator and then defining the default function for coroutines, we have directly used the async def operationcoroutine() function of the asyncio module to implement coroutines. tasks tasks is a subclass given in the asyncio module responsible for executing asyncio coroutines inside an event loop in a parallel manner of execution. we can understand the working of tasks subclass by using a python program to execute coroutines with it. example 
# importing asyncio module in the program
import asyncio
# importing time module
import time
# using async default function()
async def task_ex(n):
   time.sleep(2) # sleep() function of time module
   print("loop event is processing coroutine no: {}".format(n)) # given printing tasks to print in output
# generating tasks with async default function
async def generator_task():
       # looping over tasks using for loop
       for i in range(10):
             asyncio.ensure_future(task_ex(i))
        # after completing loop
       print("all given tasks are completed")
       asyncio.sleep(2)
loop = asyncio.get_event_loop() # printing in output using event loop method
loop.run_until_complete(generator_task()) # running the loop
loop.close() # closing the loop
 output loop event is processing coroutine no: 0
loop event is processing coroutine no: 1
loop event is processing coroutine no: 2
loop event is processing coroutine no: 3
loop event is processing coroutine no: 4
loop event is processing coroutine no: 5
loop event is processing coroutine no: 6
loop event is processing coroutine no: 7
loop event is processing coroutine no: 8
loop event is processing coroutine no: 9
all given tasks are completed
 explanation: we have imported asyncio and time modules in the program to use its functions. then, we used an async default function to set the task of printing processed coroutines. we used the sleep() function of the time module to give a break of 2 seconds after printing every executed coroutine. then, we used another async default function to set the loop over tasks in it. after completing loops, the function will print 'task completed.' in last, we used the event loop method for running and closing the loop in the program. transports transports are the classes provided to us in the asyncio module, and we can use them to implement various types of communication in the program. the transport classes are not thread-safe, and we always have to pair them with a protocol instance after the communication channel is established. in the asyncio transport class, the following types of transports can be inherited in the program from the base transport class: datagram transport: datagram transport is an interface that we use for sending the data. read transport: read transport is an interface for the transport classes with only read-only mode. write transport: this transport is an interface for the inherited transport classes with only write-only mode. base subprocess transport: the base subprocess transport class functions very similarly to the base transport class. in all the above-mentioned inherited transport classes, only the following distinct types of methods are subsequently transient from the base transport class: is_closing(): this method will return true only if the given transport class in the argument is already closed on is closing now. close(): this method is used to close the current transport class running in the program. get_protocol(): we can use the get_protocol() method in the transport class to get the current protocol in return. get_extra_info(classname, default = none): we can use this method to get some additional information about the transport class we gave in the argument. protocols in the asyncio module, we are provided with several base classes which we can use to implement our network protocols in the subclasses. we can use such classes in conjunction with transport classes. the protocol will ask for the outgoing data and parses the incoming data, whereas the transport class is responsible for the buffering and actual i/o. following are the three classes of protocols: protocol class: it is the base class in protocols, and we can use it for implementing streaming protocols to use with the ssl and tcp transports. datagram protocol class: it is another base class in protocols that we can use for implementing the datagram protocols to use with the udp transports. subprocess protocol class: we can use this base class from protocols to implement various protocols for communicating the child processes using a set of unidirectional pipes. next topicpython semaphore ? prev next ? for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
