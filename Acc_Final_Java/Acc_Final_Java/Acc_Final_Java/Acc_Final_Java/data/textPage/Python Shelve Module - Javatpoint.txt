https://www.javatpoint.com/python-shelve-module::python shelve module - javatpoint ? scroll to top home python if else for loop function array string regex list set tuple dictionary programs numpy interview questions python tutorial python tutorial python features python history python applications python install python example python variables python data types python keywords python literals python operators python comments python if else python loops python for loop python while loop python break python continue python pass python strings python lists python tuples python list vs tuple python sets python dictionary python functions python built-in functions python lambda functions python files i/o python modules python exceptions python date python regex python sending email read csv file write csv file read excel file write excel file python assert python list comprehension python collection module python math module python os module python random module python statistics module python sys module python ides python arrays command line arguments python magic method python stack & queue pyspark mllib python decorator python generators web scraping using python python json python itertools python multiprocessing how to calculate distance between two points using geopy gmail api in python how to plot the google map using folium package in python grid search in python python high order function nsetools in python python program to find the nth fibonacci number python opencv object detection python simpleimputer module second largest number in python python oops python oops concepts python object class python constructors python inheritance abstraction in python python mysql environment setup database connection creating new database creating tables insert operation read operation update operation join operation performing transactions python mongodb python mongodb python sqlite python sqlite python questions how to install python in windows how to reverse a string in python how to read csv file in python how to run python program how to take input in python how to convert list to string in python how to append element in the list how to compare two lists in python how to convert int to string in python how to create a dictionary in python how to create a virtual environment in python how to declare a variable in python how to install matplotlib in python how to install opencv in python how to print in same line in python how to read json file in python how to read a text file in python how to use for loop in python is python scripting language how long does it take to learn python how to concatenate two strings in python how to connect database in python how to convert list to dictionary in python how to declare a global variable in python how to reverse a number in python what is an object in python which is the fastest implementation of python how to clear python shell how to create a dataframes in python how to develop a game in python how to install tkinter in python how to plot a graph in python how to print pattern in python how to remove an element from a list in python how to round number in python how to sort a dictionary in python strong number in python how to convert text to speech in python bubble sort in python logging in python insertion sort in python binary search in python linear search in python python vs scala queue in python stack in python heap sort in python palindrome program in python program of cumulative sum in python merge sort in python python matrix python unit testing forensics & virtualization best books to learn python best books to learn django gcd of two number in python python program to generate a random string how to one hot encode sequence data in python how to write square root in python pointer in python python 2d array python memory management python libraries for data visualization how to call a function in python git modules in python top python frameworks for gaming python audio modules wikipedia module in python python random randrange() permutation and combination in python getopt module in python merge two dictionaries in python multithreading in python 3 static in python how to get the current date in python argparse in python python tqdm module caesar cipher in python tokenizer in python how to add two lists in python shallow copy and deep copy in python atom python contains in python label encoding in python django vs. node js python frameworks how to create a vector in python using numpy pickle module of python how to convert bytes to string in python python program to find anagram how to convert list to set python vs javascript python holidays module fuzzywuzzy python library dask python dask python (part 2) mode in python menu-driven programs in python python array vs. list what is duck typing in python pep 8 in python python user groups basic commands in python f string in python how brython works how to use brython in the browser arima model in python python modulus operator matlab vs. python method resolution order in python monkey patching in python python __call__ method python heapq module python substring project ideas for python beginners python faker fizz-buzz program in python tabula python python program to print prime factor of given number python program to print pascal triangle namedtuple in python ordereddict in python t-test in python python return statement getter and setter in python enum class in python destructors in python curve fit in python converting csv to json in python underscore (_) in python set vs list in python locating and executing modules flatten list in python pair plot in python data hiding in python python program to find intersection of two lists how to create requirements.txt file in python tic-tac-toe in python python asynchronous programming - asyncio and await python main() function strftime() function in python verbose flag in python regex python ast module python requests module - http request shutil module in python python epoch to datetime python del statement looping technique in python metaprogramming with metaclasses in python precision handling in python python join list strip() function in python gradient descent algorithm prettytable in python sentiment analysis in python convert python list to numpy arrays traceback in python time clock() method in python deque in python dictionary comprehension in python python data analytics python seek() method ternary operator in python how to calculate the area of the circle using python how to write in text file using python python keyerror python super() function max() function in python fraction module in python popular python framework to build api how to check python version python %s - string formatting python seaborn library countplot in python range() vs. xrange() python wordcloud package in python convert dataframe into list anova test in python python program to find compound interest ansible in python python important tips and tricks python coroutines double underscores in python re.search() vs re.findall() in python regex how to install statsmodels in python cos in python vif in python __add__ method in python ethical hacking with python class variable vs instance perfect number in python eol in python python program to convert hexadecimal string to decimal string different methods in python for swapping two numbers without using third variable how to change plot size in matplotlib how to get the zip code in python eel in python assignment operators in python speech recognition python yield vs return in python graphene python name mangling in python python combination without itertools python comprehensions influxdb in python kafka tutorial in python augmented assignment expressions in python python (x,y) software python event-driven programming python semaphore python sorted reverse automorphic number in python sizeof in python python program for accepting the strings which contains all vowels class-based views vs function-based views how to handle cookies in django agg() function in python amicable numbers in python context manager in python create bmi calculator using python string to binary in python what is script mode in python best python libraries for machine learning python program to display calendar of given year how to open url in python broken pipe error in python code template for creating objects in python python program to calculate the best time to buy and sell stock tuple to string in python kadane's algorithm in python loggers in django weather app in django missing data conundrum: exploration and imputation techniques different methods of array rotation in python what is operator overloading in python defaultdict in python operator module in python spinner widget in the kivy library of python number plate recognition using python obfuscating a python program convert string to dictionary in python convert string to json in python dbscan algorithm in python how to write a code for printing the python exception/error hierarchy principal component analysis (pca) with python python program to find number of days between two given dates object recognition using python python vlc module set to list in python string to int in python internet of things with python python pysftp module amazing hacks of python average of list in python check installed modules in python choice() in python convert list to dataframe in python convert string to float in python decorators with parameters in python dynamic typing in python fabs in python how to remove decimal in python python closure python glob module writing a python module modules vs packages in python snmp module in python average of list in python append vs extend vs insert in python how to remove duplicates from a list in python remove multiple characters from a string in python shuffle in python floor() and ceil() functions in python sqrt(): math function of python python yfinance module difflib module in python convert the column type from string to datetime format in pandas dataframe python wxpython module random uniform python relational operators in python string to list in python chatbot in python how to convert float to int in python multiply all elements in list of python module vs function in python reverse a tuple in python tuple to dictionary in python datetime.timedelta() function of python python bio module python dash module how to select rows in pandas dataframe based on conditions typecasting in python dateutil module in python getpass module in python python wand library generate a qr code using python best python pdf library python cachetools module python cmdparser module python dash module python emoji module python nmap module python pylab module working with pdf files in python pdf handling in python manipulating pdf using python list all functions from a python module python list of dictionaries python shelve module creating interactive pdf forms using python python newspaper module how to connect wi-fi using python best python libraries used for ethical hacking windows system administration management using python indentation error in python python imaplib module python lxml module python mayavi module python os.listdir() method python modules for automation data visualization in python using bokeh library how to plot glyphs over a google map by using bokeh library in python how to plot a pie chart using bokeh library in python how to read contents of pdf using ocr in python grammar and spell checker in python converting html to pdf files using python readlines in python how to plot multiple lines on a graph using bokeh in python bokeh.plotting.figure.circle_x() function in python bokeh.plotting.figure.diamond_cross() function in python how to plot rays on a graph using bokeh in python image steganography using python inconsistent use of tabs and spaces in indentation how to plot multiple plots using bokeh in python how to make an area plot in python using bokeh python chempy module python memory-profiler module python phonenumbers module python platform module typeerror string indices must be an integer time series forecasting with prophet in python python pexpect module python optparse module int object is not iterable. python peewee library some cryptocurrency libraries for python building a blockchain using python huffman coding using python nested dictionary in python collections.userstring in python how to customize legends with matplotlib matplotlib legend in subplot morphological operations in image processing in python role of python in artificial intelligence python instagramy module python pprint module python primepy module android development using python python fbchat library artificial intelligence in cybersecurity: pitting algorithms vs algorithms understanding the recognition pattern of artificial intelligence when and how to leverage lambda architecture in big data why should we learn python for data science how to change the "legend" position in matplotlib how to check if element exists in list in python how to check spellings of given words using enchant in python python program to count the number of matching characters in a pair of string ping pong game using turtle in python python function to display calendar python program for calculating the sum of squares of first n natural numbers python program for how to check if a given number is fibonacci number or not randint() function in python visualize tiff file using matplotlib and gdal in python rarfile module in python stemming words using python python program for word guessing game blockchain in healthcare: innovations & opportunities snake game in python using turtle module how to find armstrong numbers between two given integers celery tutorial using python rsme - root mean square error in python building a twitter bot using python python progressbar module python pronouncing module python pyautogui module python pyperclip module how to generate uuid in python python top 10 libraries to learn in 2022 reading netcdf data using python the reprlib module in python how to take multiple input from user in python python zlib library python queue module python yaml parser effective root searching algorithms in python python bz2 module python ipaddress module python pylint module how to process xml in python bisect algorithm functions in python creating and updating powerpoint presentation using python how to change the size of figure drawn with matplotlib keyboard module in python python pyfiglet module creating an mcq quiz game in python statistic with python what is gil in python basic python for java developers how to download youtube videos using python scripts traffic flow simulation in python how to merge and sort two lists in python metacharacters in python write the python program to print all possible combination of integers modulo string formatting in python counters in python python pyautogui library how to draw the mandelbrot set in python python dbm module webcam motion detector in python graphql implementation in django how to implement protobuf in python pyqt library in python how to prettify data structures with pretty print in python encrypt a password in python using bcrypt pyramid framework in python building a telegram bot using python web2py framework in python python os.chdir() method balancing parentheses in python how to provide multiple constructors in python classes profiling the python code python tkinter (gui) python tkinter tkinter button tkinter canvas tkinter checkbutton tkinter entry tkinter frame tkinter label tkinter listbox tkinter menubutton tkinter menu tkinter message tkinter radiobutton tkinter scale tkinter scrollbar tkinter text tkinter toplevel tkinter spinbox tkinter panedwindow tkinter labelframe tkinter messagebox python web blocker introduction building python script script deployment on linux script deployment on windows python mcq python mcq python mcq part 2 related tutorials numpy tutorial django tutorial flask tutorial pandas tutorial pytorch tutorial pygame tutorial matplotlib tutorial opencv tutorial openpyxl tutorial python cgi python design pattern python programs python programs next ? ? prev python shelve module we all have come across so many instances in our daily life where we have to use a database management system to store all the required information and data. it is often very simple to use a database management system, but sometimes it becomes a bit difficult when we have to store some complex structured data. database management systems are various types, but the most common type we usually use in our daily lives is relational database management system (rdbms). rdbms is an effective tool and management system where we can store all our necessary information & data and manage them very easily. there are many instances when we don't have to use relational database management system, or it is not possible to use rdbms to store data. in such cases, some questions come to our mind: are there any other alternatives in this situation, are there other methods or tools to store data, etc. the answer to these questions is yes! we have other tools & methods through which we can store data when we don't have to use the rdbms method. we have other tools, and many of these tools are associated with the library of a programming language. it means that, in the programming world, there are libraries that provide effective tools to use when using relational database management system is not an option. this thing is also applicable to python, and we have libraries in python through which we can store all our important data by creating a dbms-like interface. one of such libraries or modules in python is shelve module, an effective tool for storing or persistent data storage. we will learn about this shelve module of python in this tutorial, where we store data inside using shelve module inside a python program. shelve module in python the shelve module of python is a very popular module of python which works like an effective tool for persistent data storage inside files using a python program. as the name of this module suggests, i.e., shelve, we can easily interpret that it will work as a shelf object to keep all our data inside a file and save all the necessary information. in the shelve module, a shelf object is defined, which acts like a dictionary-type object, and it is persistently stored in the disk file of our computer. that's how we can save all the data and information through python shelve module in our system and keep it till whenever we want. shelve module: introduction shelve module of python is an effective tool through which we can store all the data and information inside a file and keep it in our computer's storage until we change our mind to remove it. shelve module is not only helpful in storing information inside a file, but it is also very effective in modifying the already present information and adding some new information in the same file. we can perform all these operations (creating, reading, writing, and deleting from a file) from the shelve module by using this module and its functions inside a python program. the shelve module creates a very similar file to the dbms database present on systems such as unix. we can only use string data type as the keys in the special dictionary object present in the file, whereas the pickable objects from the shelve files can serve as the value for the keys. shelve module: classes like any other python module, there are some classes present in the shelve module of python, too, and we are going to discuss these classes in this section. the following three classes are defined inside python shelve module: s. no. module class description 1 shelf class the shelf class is the base class from the shelve module, and it is used for the shelf implementation in a shelve file. we can initialize the shelf class from the shelve module using a dict-like object inside the python program. 2 dbfilenameshelf class this is a sub-class of the base shelf class, and it accepts the name of the shelve files as the parameter to its constructor rather than a dict-like object parameter. 3 bsddbshelf class bsddbshelf class is also a sub-class from the base shelf class, and this class accepts a dict-like object as a parameter which makes this sub-class different from the dbfilenameshelf class. the dict-like object parameter which we pass as a parameter to its constructors should support first(), last(), previous(), next() and set_location() methods. now, here we have described all the classes and sub-classes present inside the shelve module, and we have also learned which object type is taken as a parameter inside these classes. working with the shelve module shelve module is an in-built library of python, and one can find this module pre-installed in all versions of python 2 and 3. therefore, for working with shelve module, we don't have to use any installer or pip command first to install the shelve module. we can directly use the 'import shelve' statement in a python program to import and use all functions of the shelve module in that program. to understand the working of the shelve module, we will divide the implementation part of it into three parts where first we create a shelve file and store data in it, secondly, we open the file and retrieve values from it, and in last, we update data inside the shelve file. we will learn the working and implementation of the shelve module through the following three steps: creating a shelve file to store data retrieving data from the shelve file updating data in the shelve file we will learn about each of the three parts as mentioned above by using an example program where we perform the respective tasks using the functions of the shelve module. now, let's learn the implementation of each part of the working of the shelve module by first creating a sample shelve file. creating a shelve file to store data: if we want to store some data inside the shelve file, we have first to create one, and only then can we add the desirable data. we can create a shelve file by simply using its open() function, which works similarly to the open() function we use during the file handling process. with the open() function of shelve module, we have to follow the given below syntax to open or create a new shelve file: 
>> shelve = open(nameoffile, flag = 'c', protocol = none, writeback = true)
 it will return a shelf object from the dbfilenameshelf sub-class, where the object will collect the data from the user to be stored in the file. following is the description of the parameters used inside the open() function's syntax given above: nameoffile: it is the name of the file which we want to or have assigned to the database (shelve file) we are creating/opening using the open() flag: the flag parameters for the open() function's syntax is c, w, n, and r, in which 'c' is the default one. the 'c' keyword in the flag parameter represents we gave read and write access for the file, 'w' represents we gave write-only access, 'r' represents we gave only read access, and 'n' represents that we are creating a new file with nameoffile name. writeback: writeback parameter is false by default, but if we set this parameter as true, the entries we give in the shelve file will be cached in the program's cache memory. protocol: the protocol parameter in the function denotes the pickle protocol for the entries. as now we have learned the parameters and syntax of the shelve module's open() function, it is time we should use this function in an example program to understand its implementation. example 1: look at the following python program where we created a shelve file and stored data inside that file: 
# importing the shelve module
import shelve
# creating a shelve file with open() function
shelvevariable = shelve.open("samplefile")
print("a shelve file with samplefile name is successfully created")
# making entries inside the shelve file
shelvevariable['employee name'] = 'jackie chan'
shelvevariable['employee age'] = 27
shelvevariable['employee department'] = management
shelvevariable['employee performance'] = excellent
shelvevariable['employee score'] = 9.2
shelvevariable.close()
print("all entries are successfully made inside the sample shelve file")
 output: a shelve file with samplefile name is successfully created
all entries are successfully made inside the sample shelve file
 explanation: we have first imported the shelve module in the example program so that we can use the open() function of it to create a sample shelve file. then, we used the open() function inside the initialized shelvevariable to use it further for entries and created a sample shelve file with the 'samplefile' name. we then used initialized shelvevariable to make entries inside the sample shelve file we created, and we used the dictionary method to make multiple entries in it. we made multiple entries in the separate columns using the initialized variable, and last, we used the close() function to save these entries in the file. when we run the example program given above, a shelve file with 'samplefile.dir' will be created in our device, and entries will be made in it. note: every time we access the shelve file present in our system, sync() and close() operations are performed along with it, which may slow down the overall process. methods in shelve module: in the above example, we used the open() method to create a database shelve file, but this isn't the only method present in the shelve module. shelve module provides us with many different methods, and each one of these methods has different functionality, which is very useful for us. following various types of methods are present in the shelve module: sr no method name description of method 1 get() this method will return the value associated with the key (provided as an argument inside the method) present in the database file. 2 keys() keys() method is used to return the names of all keys present in a shelve file (which name we have provided as an argument in the method). 3 values() the values() method works very similarly to the keys() method of the shelve module as it returns the values present in a shelve file. 4 items() if we want to get both keys and values from a shelve file in a single call, we can use this items() method by providing the name of the shelve file as an argument in the method. 5 close() the close method first synchronizes the items we gave for the shelve file, and then it closes the persistent dict object, which we initialized while opening/creating the shelve file. 6 update() if we want to update our shelve file and add more entries, we can use the update() method to do the same. 7 pop() the pop() method is exactly opposite to the update() method as it is used to remove an entry (key and value resemble with it) from the shelve file. 8 sync() sync() method is used to write back all the entries into the cache memory of the program whenever we set writeback to true while opening the shelve file. we can use all the methods of shelve module to perform various functions on the database shelve file we created, and we are going to use some of these methods in later examples. retrieving data from the shelve file: after creating a shelve file and making data entries into this file, the first thing which we want to do is to check if all the entries are successfully made into the file or not. the best way to check is to print all these entries in the output and see whether all entries are printed. this method is also useful when we don't know what data is present in a shelve file (cases someone worked on our shelve file or we are working on someone else's shelve file). we can access data from the shelve by many methods like get(), values(), items(), and keys(). these all methods work very differently and return the same data but in different forms, and therefore we will use each of them to return data from the sample shelve file we created in example 1. (i) getting single value by get() method: we can directly print the value from the particular key by providing a key inside the get() method, and to understand this method, we will use this in an example program. example 2: 
# importing the shelve module
import shelve
# opening the sample shelve file with open() function
shelvevariable = shelve.open("samplefile")
# print data entries from the sample shelve file in the output
print("name of employee in the file: ", shelvevariable['employee name'])
print("age of employee: ", shelvevariable['employee age'])
print("department of employee: ", shelvevariable['employee department'])
print("score of employee: ", shelvevariable['employee score'])
 output: name of employee in the file:  jackie chan
age of employee:  27
department of employee:  management
score of employee:  9.2
 as we can see, the data value with the respective key given in the get() method is printed in the output. (ii) getting all items at once from shelve file: if we want to retrieve all items from the shelve file at once, we can use the items() method with the shelve object, and it will return all the items present inside the sample shelve file in the output. we will use the following example program to understand the implementation of this method: example 3: 
# importing the shelve module
import shelve
# opening the sample shelve file with open() function
shelvevariable = shelve.open("samplefile")
# print all data entries from the sample shelve file in list form
print("items in the sample shelve file: ", list(shelvevariable.items()))
 output: items in the sample shelve file:  [('employee name', 'jackie chan'), ('employee age', 27), ('employee department', 'management'), ('employee performance', 'excellent'), ('employee score', 9.2)]
 as we can see in the output, all the items present in the sample file were printed when we used the items() function. (iii) retrieving only keys from shelve file: if we want to print only keys present in the sample shelve file, we can use the keys() method inside the program after opening the shelve file. example 4: 
# importing the shelve module
import shelve
# opening the sample shelve file with open() function
shelvevariable = shelve.open("samplefile")
# print only keys from the sample shelve file in the output
print("keys in the sample shelve file: ", list(shelvevariable.keys()))
 output: keys in the sample shelve file:  ['employee name', 'employee age', 'employee department', 'employee performance', 'employee score']
 all the keys present in the sample shelve file are printed in the output with the keys() method. (iv) retrieving only values from shelve file: this method and its implementation work exactly like the previous method where we used the keys() function, but here we have to use the values() function to print all values from the shelve file. example 5: 
# importing the shelve module
import shelve
# opening the sample shelve file with open() function
shelvevariable = shelve.open("samplefile")
# print only values from the sample shelve file in the output
print("values in the sample shelve file: ", list(shelvevariable.values()))
 output: values in the sample shelve file:  ['jackie chan', 27, 'management', 'excellent', 9.2]
 all the values present in the sample shelve file are printed in the output with the keys() method. updating data in the shelve file: we can even update the data already present in the shelve file, and in this method, we can perform three tasks, but here we will perform only two. first, we can update the value of a key already present in the file; second, we can add new entries; and last, we can remove an entry from the file. if we want to update the current value associated with a key to a new value, we have to write the new value with the key object, and the program will assign the new value in that key. (i) adding new entries in the shelve file: if we want to add new entries, we first have to define a dictionary variable in the program, and then we can write new entries there with key-value pair. after that, we can use the update() method by providing the name of the dictionary variable as an argument in the method, and it will add new entries in the file. example 6: 
# importing the shelve module
import shelve
# opening the sample shelve file with open() function
shelvevariable = shelve.open("samplefile")
# adding new fields inside the sample shelve file
sampledict = {'employee salary' : 50000, 'employee sub-department' : 'field work'}
shelvevariable.update(sampledict)
# print data entries from the sample shelve file in list form
print("items in the sample shelve file: ", list(shelvevariable.items()))
 output: items in the sample shelve file:  [('employee name', 'jackie chan'), ('employee age', 27), ('employee department', 'management'), ('employee performance', 'excellent'), ('employee score', 9.2), ('employee salary', 50000), ('employee sub-department', 'field work')]
 as we can see, when we printed all items from the sample shelve file, new items were also present, which means new entries were made in the file. (ii) removing an entry from the shelve file: if we want to remove an already existing entry in the file, we can use the pop() method. we have to write the key name in the function, and it will remove the key and value associated with it from the shelve file. we can verify this through by printing all the items from the shelve file. example 7: 
# importing the shelve module
import shelve
# opening the sample shelve file with open() function
shelvevariable = shelve.open("samplefile")
# delete a field from the shelve file
shelvevariable.pop('employee performance')
# print data entries from the sample shelve file in list form
print("items in the sample shelve file: ", list(shelvevariable.items()))
 output: items in the sample shelve file:  [('employee name', 'jackie chan'), ('employee age', 27), ('employee department', 'management'), ('employee score', 9.2), ('employee salary', 50000), ('employee sub-department', 'field work')]
 as we can see, the employee performance key-value entry is not present in the output as we have removed it through the pop() method. next topiccreating interactive pdf forms using python ? prev next ? for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
