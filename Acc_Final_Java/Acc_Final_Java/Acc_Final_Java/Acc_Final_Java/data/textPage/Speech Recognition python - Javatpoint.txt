https://www.javatpoint.com/speech-recognition-python::speech recognition python - javatpoint ? scroll to top home python if else for loop function array string regex list set tuple dictionary programs numpy interview questions python tutorial python tutorial python features python history python applications python install python example python variables python data types python keywords python literals python operators python comments python if else python loops python for loop python while loop python break python continue python pass python strings python lists python tuples python list vs tuple python sets python dictionary python functions python built-in functions python lambda functions python files i/o python modules python exceptions python date python regex python sending email read csv file write csv file read excel file write excel file python assert python list comprehension python collection module python math module python os module python random module python statistics module python sys module python ides python arrays command line arguments python magic method python stack & queue pyspark mllib python decorator python generators web scraping using python python json python itertools python multiprocessing how to calculate distance between two points using geopy gmail api in python how to plot the google map using folium package in python grid search in python python high order function nsetools in python python program to find the nth fibonacci number python opencv object detection python simpleimputer module second largest number in python python oops python oops concepts python object class python constructors python inheritance abstraction in python python mysql environment setup database connection creating new database creating tables insert operation read operation update operation join operation performing transactions python mongodb python mongodb python sqlite python sqlite python questions how to install python in windows how to reverse a string in python how to read csv file in python how to run python program how to take input in python how to convert list to string in python how to append element in the list how to compare two lists in python how to convert int to string in python how to create a dictionary in python how to create a virtual environment in python how to declare a variable in python how to install matplotlib in python how to install opencv in python how to print in same line in python how to read json file in python how to read a text file in python how to use for loop in python is python scripting language how long does it take to learn python how to concatenate two strings in python how to connect database in python how to convert list to dictionary in python how to declare a global variable in python how to reverse a number in python what is an object in python which is the fastest implementation of python how to clear python shell how to create a dataframes in python how to develop a game in python how to install tkinter in python how to plot a graph in python how to print pattern in python how to remove an element from a list in python how to round number in python how to sort a dictionary in python strong number in python how to convert text to speech in python bubble sort in python logging in python insertion sort in python binary search in python linear search in python python vs scala queue in python stack in python heap sort in python palindrome program in python program of cumulative sum in python merge sort in python python matrix python unit testing forensics & virtualization best books to learn python best books to learn django gcd of two number in python python program to generate a random string how to one hot encode sequence data in python how to write square root in python pointer in python python 2d array python memory management python libraries for data visualization how to call a function in python git modules in python top python frameworks for gaming python audio modules wikipedia module in python python random randrange() permutation and combination in python getopt module in python merge two dictionaries in python multithreading in python 3 static in python how to get the current date in python argparse in python python tqdm module caesar cipher in python tokenizer in python how to add two lists in python shallow copy and deep copy in python atom python contains in python label encoding in python django vs. node js python frameworks how to create a vector in python using numpy pickle module of python how to convert bytes to string in python python program to find anagram how to convert list to set python vs javascript python holidays module fuzzywuzzy python library dask python dask python (part 2) mode in python menu-driven programs in python python array vs. list what is duck typing in python pep 8 in python python user groups basic commands in python f string in python how brython works how to use brython in the browser arima model in python python modulus operator matlab vs. python method resolution order in python monkey patching in python python __call__ method python heapq module python substring project ideas for python beginners python faker fizz-buzz program in python tabula python python program to print prime factor of given number python program to print pascal triangle namedtuple in python ordereddict in python t-test in python python return statement getter and setter in python enum class in python destructors in python curve fit in python converting csv to json in python underscore (_) in python set vs list in python locating and executing modules flatten list in python pair plot in python data hiding in python python program to find intersection of two lists how to create requirements.txt file in python tic-tac-toe in python python asynchronous programming - asyncio and await python main() function strftime() function in python verbose flag in python regex python ast module python requests module - http request shutil module in python python epoch to datetime python del statement looping technique in python metaprogramming with metaclasses in python precision handling in python python join list strip() function in python gradient descent algorithm prettytable in python sentiment analysis in python convert python list to numpy arrays traceback in python time clock() method in python deque in python dictionary comprehension in python python data analytics python seek() method ternary operator in python how to calculate the area of the circle using python how to write in text file using python python keyerror python super() function max() function in python fraction module in python popular python framework to build api how to check python version python %s - string formatting python seaborn library countplot in python range() vs. xrange() python wordcloud package in python convert dataframe into list anova test in python python program to find compound interest ansible in python python important tips and tricks python coroutines double underscores in python re.search() vs re.findall() in python regex how to install statsmodels in python cos in python vif in python __add__ method in python ethical hacking with python class variable vs instance perfect number in python eol in python python program to convert hexadecimal string to decimal string different methods in python for swapping two numbers without using third variable how to change plot size in matplotlib how to get the zip code in python eel in python assignment operators in python speech recognition python yield vs return in python graphene python name mangling in python python combination without itertools python comprehensions influxdb in python kafka tutorial in python augmented assignment expressions in python python (x,y) software python event-driven programming python semaphore python sorted reverse automorphic number in python sizeof in python python program for accepting the strings which contains all vowels class-based views vs function-based views how to handle cookies in django agg() function in python amicable numbers in python context manager in python create bmi calculator using python string to binary in python what is script mode in python best python libraries for machine learning python program to display calendar of given year how to open url in python broken pipe error in python code template for creating objects in python python program to calculate the best time to buy and sell stock tuple to string in python kadane's algorithm in python loggers in django weather app in django missing data conundrum: exploration and imputation techniques different methods of array rotation in python what is operator overloading in python defaultdict in python operator module in python spinner widget in the kivy library of python number plate recognition using python obfuscating a python program convert string to dictionary in python convert string to json in python dbscan algorithm in python how to write a code for printing the python exception/error hierarchy principal component analysis (pca) with python python program to find number of days between two given dates object recognition using python python vlc module set to list in python string to int in python internet of things with python python pysftp module amazing hacks of python average of list in python check installed modules in python choice() in python convert list to dataframe in python convert string to float in python decorators with parameters in python dynamic typing in python fabs in python how to remove decimal in python python closure python glob module writing a python module modules vs packages in python snmp module in python average of list in python append vs extend vs insert in python how to remove duplicates from a list in python remove multiple characters from a string in python shuffle in python floor() and ceil() functions in python sqrt(): math function of python python yfinance module difflib module in python convert the column type from string to datetime format in pandas dataframe python wxpython module random uniform python relational operators in python string to list in python chatbot in python how to convert float to int in python multiply all elements in list of python module vs function in python reverse a tuple in python tuple to dictionary in python datetime.timedelta() function of python python bio module python dash module how to select rows in pandas dataframe based on conditions typecasting in python dateutil module in python getpass module in python python wand library generate a qr code using python best python pdf library python cachetools module python cmdparser module python dash module python emoji module python nmap module python pylab module working with pdf files in python pdf handling in python manipulating pdf using python list all functions from a python module python list of dictionaries python shelve module creating interactive pdf forms using python python newspaper module how to connect wi-fi using python best python libraries used for ethical hacking windows system administration management using python indentation error in python python imaplib module python lxml module python mayavi module python os.listdir() method python modules for automation data visualization in python using bokeh library how to plot glyphs over a google map by using bokeh library in python how to plot a pie chart using bokeh library in python how to read contents of pdf using ocr in python grammar and spell checker in python converting html to pdf files using python readlines in python how to plot multiple lines on a graph using bokeh in python bokeh.plotting.figure.circle_x() function in python bokeh.plotting.figure.diamond_cross() function in python how to plot rays on a graph using bokeh in python image steganography using python inconsistent use of tabs and spaces in indentation how to plot multiple plots using bokeh in python how to make an area plot in python using bokeh python chempy module python memory-profiler module python phonenumbers module python platform module typeerror string indices must be an integer time series forecasting with prophet in python python pexpect module python optparse module int object is not iterable. python peewee library some cryptocurrency libraries for python building a blockchain using python huffman coding using python nested dictionary in python collections.userstring in python how to customize legends with matplotlib matplotlib legend in subplot morphological operations in image processing in python role of python in artificial intelligence python instagramy module python pprint module python primepy module android development using python python fbchat library artificial intelligence in cybersecurity: pitting algorithms vs algorithms understanding the recognition pattern of artificial intelligence when and how to leverage lambda architecture in big data why should we learn python for data science how to change the "legend" position in matplotlib how to check if element exists in list in python how to check spellings of given words using enchant in python python program to count the number of matching characters in a pair of string ping pong game using turtle in python python function to display calendar python program for calculating the sum of squares of first n natural numbers python program for how to check if a given number is fibonacci number or not randint() function in python visualize tiff file using matplotlib and gdal in python rarfile module in python stemming words using python python program for word guessing game blockchain in healthcare: innovations & opportunities snake game in python using turtle module how to find armstrong numbers between two given integers celery tutorial using python rsme - root mean square error in python building a twitter bot using python python progressbar module python pronouncing module python pyautogui module python pyperclip module how to generate uuid in python python top 10 libraries to learn in 2022 reading netcdf data using python the reprlib module in python how to take multiple input from user in python python zlib library python queue module python yaml parser effective root searching algorithms in python python bz2 module python ipaddress module python pylint module how to process xml in python bisect algorithm functions in python creating and updating powerpoint presentation using python how to change the size of figure drawn with matplotlib keyboard module in python python pyfiglet module creating an mcq quiz game in python statistic with python what is gil in python basic python for java developers how to download youtube videos using python scripts traffic flow simulation in python how to merge and sort two lists in python metacharacters in python write the python program to print all possible combination of integers modulo string formatting in python counters in python python pyautogui library how to draw the mandelbrot set in python python dbm module webcam motion detector in python graphql implementation in django how to implement protobuf in python pyqt library in python how to prettify data structures with pretty print in python encrypt a password in python using bcrypt pyramid framework in python building a telegram bot using python web2py framework in python python os.chdir() method balancing parentheses in python how to provide multiple constructors in python classes profiling the python code python tkinter (gui) python tkinter tkinter button tkinter canvas tkinter checkbutton tkinter entry tkinter frame tkinter label tkinter listbox tkinter menubutton tkinter menu tkinter message tkinter radiobutton tkinter scale tkinter scrollbar tkinter text tkinter toplevel tkinter spinbox tkinter panedwindow tkinter labelframe tkinter messagebox python web blocker introduction building python script script deployment on linux script deployment on windows python mcq python mcq python mcq part 2 related tutorials numpy tutorial django tutorial flask tutorial pandas tutorial pytorch tutorial pygame tutorial matplotlib tutorial opencv tutorial openpyxl tutorial python cgi python design pattern python programs python programs next ? ? prev speech recognition python have you ever thought about how google assistant or amazon alexa recognizes whatever you say? you must be thinking about some complex smart technologies working behind bars. apart from a massive hit in the market of tremendous technological growth of recognition systems, the majority of the cellular device has the feature of speech recognition all through some inbuilt applications or third party applications. not necessarily; most such speech recognition systems are built and deployed with the help of python packages and libraries. to a certain level, python has proven that it is an essential aspect of the foreseeable future. the reason is pretty obvious. to incorporate speech recognition in python, you need a certain level of interactivity and accessibility to match technologies. the concept of accessibility is worth considering because the recognition allows the elderly, physically challenged, or visually impaired humans to interact with machines and solve their problems with state-of-the-art services and products quickly without choosing random gui applications. in this article, you'd be learning to create a speech recognition system in python. to ease the process of understanding how it is built, this article is designed to teach you how to build the system with less effort and more enthusiasm. but before moving into the project, let's talk about some more important aspects to know as a developer. overview- how it works before moving into the nooks and complications of the project, you will build and take a moment to understand the nitty-gritty overview about the working of speech recognition. although there are no pre-requisites for you to get started, yet it is good to know the fundamentals of the python programming language. speech recognition has evolved from the research conducted at bell labs back in 1950 with limitations to just a single speaker and had a limited vocabulary database. modern speech recognition applications have come a long way ever since the onset of ancient counterparts. talking about the components of the speech, the first component is the speech. it must be converted from a sound to a signal that can travel through a microphone and can be transcribed to digital data. this is done using an analog to digital converter. once the form of data is digitized, several trained models can easily transcribe the audio to text. modern-day speech recognizer relies on the less-known concept of the hidden markov model (hmm). the approach is based on the assumptions formulated for a speech signal when it persists for a short period (say five milliseconds) and can be possibly termed a stationary process, i.e., a process based on the statistics that don't change over time. in a typical hmm, the default signal division of speech is about ten milliseconds divided into various fragments. the power spectrum of each fragment helps the signals to plot a function and generate a frequency that is later mapped to the vector of real numbers called cepstral coefficients. the dimensions of the mapped vector are quite small, as low as ten as compared to some accurate systems that may have dimensions touching 32 or more. the generated final output of hmm comes in to form of vector sequences. the group of vectors plays an important role in decoding the speech into text with the help of phonemes which are fundamental units of speech. the calculation of phonemes depends on the training since there are speaker variations, and even for the same speaker, the utterance is different sometimes. therefore, to cope with this issue, a special algorithm is considered that determines the most relative words producing a phoneme sequence. the whole process that you just learned is quite expensive in terms of computation. neural networks are used to transform features and dimensions in modern speech recognition systems, reducing the need for hmm. additionally, voice activity detectors (vad) are also used to reduce some portion of the audio signal that might contain some speech. it is mainly used to recognize unnecessary parts of speech and stop them from being taken into consideration. speech recognition packages there are a handful of packages for speech recognition that exist on the chain of pypi. some of them are: assembly apia speechrecognition wit watson-developer-cloud the above-given packages, such as apiai and wit, offer a feature like natural language processing. their in-built feature helps identify the speaker's intent and goes beyond generic speech recognition. other packages primarily focus on speech-to-text conversion. only one package that stands out from the above-given packages is speechrecognition. recognizing speech needs some input in the form of audio, and the speechrecognition package retrieves these kinds of input effortlessly. it needs no hardcore scripts to access microphones and then process the audio from scratch. another advantage of this package is that it will save your time and in few minutes it can execute the instructions. the speechrecognition library behaves like a cover or a wrapper for various apis solely built for speech. it is tremendously flexible and agile. one such api is the google web speech api that supports hard-coded default speech recognition. the speechrecognition library is super easy to use, and the package is easy to be imported as the python project. it is also important to note that this package may not wrap all the apis available today. thus, you need to identify exactly what kind of package you need to build your speech recognizer. you might have theoretically understood the strengths and flaws of some of the speech recognizers and an overview of how the speech recognizer works, let's proceed with the installation of the speechrecognition package into the local environment using the installation procedures given below. speechrecognition installation speechrecognition package is compatible with various versions of python language like 2.6, 2.7, and 3.3+. it may also need some other installations if your python version is old. assuming that you have the python 3.3+ version on your local system, you can carry out your installation methods from the terminal with pip. 
  $ pip install speechrecognition
 after installation, you must verify if the installation is properly interpreted using the following code given below. 
 >>> import speech_recognition as sr
>>> sr._version_'3.8.1'
 speechrecognition may work exceptionally well if you are working with audio files in the package. however, it might also need some dependencies. therefore, to ease this process, the pyaudio package comes in handy in capturing the inputs from the microphone. the recognizer class the magic of speechrecognition comes into play only in the presence of the recognizer class. the main purpose of recognizer is to recognize speech along with reading variations of different speeches and then driving the functionalities and validating the speech coming from the audio source. to create a recognizer, you need to create its instance. so, type the below code in the python interpreter. 
  >>> r=sr.recognizer()
 there are various methods to create recognizer instances that can recognize speech from an audio source with api support. some of them are enlisted below. 
recognize_bing(): microsoft bing speech

recognize_google(): google web speech api

recognize_google_cloud(): google cloud speech - requires 
installation of the google-cloud-speech package

recognize_houndify(): houndify by soundhound

recognize_ibm(): ibm speech to text

recognize_sphinx(): cmu sphinx - requires installing pocketsphinx

recognize_wit(): wit.ai
 out of these packages, the package recognize_sphinx() is designed to serve offline if used with cmu sphinx engine. the rest of the packages need internet connectivity to work. note: it is important to be cautious about the default key provided in the speechrecognition. it is mainly used for testing, and for security purposes, and it might get revoked by google. thus, speechrecognition has an api interface that can translate these default keys to be used with care. the each_recognize_*() method might throw an exception named speech_recognition.requesterror exception. this might happen because the api might be unreachable because of the corrupt installation. for the rest of the methods shown above, requesterror might be generated if the limits under their quota are reached, or the server or internet connection might be an issue. there might arise an issue that looks something like this. 
 traceback (most recent call last):
  file "<stdin>", line 1, in <module>
typeerror: recognize_google() missing 1 required positional argument: 'audio_data'
 functioning with audio files before working out with the speechrecognition package in python, you first need to download an audio file. speechrecognition makes it easy to work with audio files by saving them to the same directory of the python interpreter you are currently running. it does that by using the audiofile class. this class needs to be initialized and set with the audio file path so that the context manager provides a good interface to read files and their contents. supported file types the types of file formats that speechrecognition supports are given as follows: wav: format must be in pcm/lpcm aiff aiff-c flac: format must be native flac if you have an x-86 based windows, linux, or macos, it is easier to work with flac files. apart from these operating systems, you may need to install a flac encoder that gives you access to the command-line tool. capturing data using record() the record() function is used to capture data from a file using the python interpreter in your file. for instance, the file's name is "harvard.wav", the python interpreter code for encoding this method will be as follows. 
  >>> hardvard = sr.audiofile('harvard.wav')
 >>> with harvard as source:
         audio = r.record(source)
 this code would open up the context manager to read the contents of the file and will store the data in the audiofile instance known as the source. the record() method then records the real data from the file. to confirm whether the data is recorded, you can check it using the following code. 
  >>> type(audio)
   <class' speech_recognition.audiodata'>
 alternatively, you can also invoke recognize_google() so that the audio is recognized. it may depend on your internet speed, how the audio is captured, and how many seconds the results are displayed. 
  >>> r.recognize_google(audio)
 this code would transcribe all the data present in the file and write the recognized audio in the text format. duration and segment offset capturing consider that you want to capture only a particular segment of a speech in a file. the record() method can do that by recognizing the duration keyword followed by the argument that stops the speech after some seconds. for instance, you might need to capture the first 5 seconds of speech from the "harvard.wav" file; you can do this using the following method given below. 
  >>> with harvard as source:
          audio = r.record(source, duration=5)
 >> >r.recognize_google(audio)
 when used inside a block, the record() method always intends to move ahead in the file stream. this usually means that the recording happens again for four seconds and returns the first four-second audio if you are recording for the first four seconds. the phenomenon can be illustrated with the code snippet given below. 
  >>> with harvard as source:
...     audio1 = r.record(source, duration=4)
...     audio2 = r.record(source, duration=4)
...
>>> r.recognize_google(audio1)
'the stale smell of old beer lingers'

>>> r.recognize_google(audio2)
'it takes heat to bring out the odor a cold dip.'
 you can notice that audio2 contains a part of the third phase of the audio. there are also some instances where you specify the duration, and the recording is stopped midway, which usually hurts the audio's transparency. additionally, while specifying the record() method, you can even set a specific starting point using the argument through the offset keyword. the starting point represents the number of seconds from the file before the recording is started. thus, to capture the second phrase from the audio file, you can opt for 5 seconds or 3 seconds depending on your need using the below method. 
  >>> with harvard as source:
...     audio = r.record(source, offset=4, duration=3)
...
>>> r.recognize_google(audio)
 the importance of duration and offset keyword fall for the segmentation of the file containing the audio. if you already know the audio frames, you can hastily fall for poor transcription results. to visualize this effect, use the following code by trying with the python interpreter. 
>>> with harvard as source:
...     audio = r.record(source, offset=4.7, duration=2.8)
...
>>> r.recognize_google(audio)
 the above code snippet states that the recording starts at 4.7 seconds and the beginning phrase will be missed. similarly, when recording ends, the captured phrase will not match the beginning phase. another reason for missing out on the phrases that are resulting in the inaccurate transcription is noise. the above might work well because it is clean audio, but there's no such place without noise in the real world. effects of noise on speech recognition no place is noise free. all the speech recognition techniques have been developed to address and remove the unwanted noise present in the speech that dampens the power of capturing the audio frames. noise can wreck up the precision of applications. to understand how noise impacts speech recognition, you need to download a file named "jackhammer.wav" and ensure to save it in your working directory of the interpreter. assuming that this file has the phrase "javatpoint is the best java training site" spoken loudly, you need to transcribe it in the background. to do that, consider the below method. 
>>> jackhammer = sr.audiofile('jackhammer.wav')
>>> with jackhammer as source:
...     audio = r.record(source)
...
>>> r.recognize_google(audio)
 to deal with noise, another method to try out after the above step is by using the method of adjust_for_ambient_noise() of the recognizer class. 
>>> with jackhammer as source:
...     r.adjust_for_ambient_noise(source)
...     audio = r.record(source)
...
>>> r.recognize_google(audio)
 the above code snippet misses the initial output, and the output is printed without the first word. hence, when the record() method captures the audio, the first portion of the audio file is consumed, and the later data is captured. the adjust_for_ambient_noise() method reads the first second of the audio file and the recognizer calibrates the noise level of the audio. if you want to adjust the time frame using the adjust_for_ambient_noise(), you can use the duration keyword in your code snippet by assigning it the numerical value in seconds. if you don't assign any value, one is taken as a default value, but it is recommended to lower the value to 0.5. the following code snippet shows the same technique. 
>>> with jackhammer as source:
...     r.adjust_for_ambient_noise(source, duration=0.5)
...     audio = r.record(source)
...
>>> r.recognize_google(audio)
 the above code snippet will return the whole audio file that you previously missed at the beginning. although, there are some cases where it is very difficult to handle or remove the effect of noise because the signal can be possibly too noisy to deal with. therefore, you may have to resort to some other techniques to pre-process the audio to deal with such an issue. to do that, you can use audio editing software or a python package like scipy. the package can pre-process the audio file and can filter the noise. additionally, while working with noisy files, it is helpful that you use the actual api response since most of the api return json strings that have many transcriptions. similarly, the recognize_google() method is bound to deliver similar transcripted files unless it is forced to deliver the full response. this method can be practically implemented using certain arguments and keywords like show_all that returns for the recognize_google() method. 
  >>> r.recognize_google(audio, show_all=true)
{'alternative': [
  {'transcript': 'javatpoint best is the programming site'}, 
  {'transcript': 'the javatpoint site is best programming'}, 
  {'transcript': 'javatpoint programming is the best site'},
  {'transcript': 'the programming is javatpoint best site'}, 
  {'transcript': 'best is the programming site javatpoint'}, 
], 'final': true}
 in the above code snippet, the recognize_google() method returns a dictionary with an alternative key that points to various transcriptions shown above. although the response structure may have different forms because of the variations from api to api, this is primarily used for debugging. by now, you might have learned the basics of speech recognition and its package in python. the next phase of learning involves transcribing the audio files by making a project a little more interactive by taking input from the microphone. working out with microphone input you can access your microphone using the speechrecognizer package by installing a package named pyaudio. to do that, save the changes as of now and close the interpreter. go ahead and install the pyaudio with a similar process as you did with speechrecognizer. 
$ pip install pyaudio
 after the installation, to test whether it is compatible with the version of the speech recognizer you are using, type the below command. 
$ python -m speech_recognizer
 after this step, you need to ensure that your default microphone is turned on and is unmuted. if you didn't face any problem in the installation and testing, you should see something like this on the terminal. 
a moment of silence, please?
set minimum energy threshold to 600.4452854381937
say something!
 try playing with by seeking into the microphone and testing how the speechrecognizer package transcribes your speech. the microphone class the microphone class is used to create an instance for the system to recognize the audio file from the source. to use this class, you need to import it by opening another interpreter session and creating a recognizer class, as shown below. 
>>> import speech_recognizer as sr
>>> r.=sr.recognizer()
 you need to use the default microphone on the system instead of using the audio file from the source. you can do that by using the method as shown. 
>>> mic = sr.microphone()
 if you cannot recognize the default microphone of your system, you may need to specify one of the device indexes. you can get the list of all the available microphone names using the list_microphone_names() method in the microphone class. 
>>> sr.microphone.list_microphone_names()
['hda intel pch: alc272 analog (hw:0,0)',
 'hda intel pch: hdmi 0 (hw:0,3)',
 'sysdefault',
 'front',
 'surround40',
 'surround51',
 'surround71',
 'hdmi',
 'pulse',
 'dmix', 
 'default']
 the device index is defined in the above code is known as the index having the list of available microphone names on a system. for instance, in the above-given output, the microphone having the name "front" is positioned at index 3 in the list. this can be done using the method given below. 
 >>> mic = sr.microphone(device_index=3)
 the above code is just an example, and hence it is recommended not to run in the interpreter. for most of the projects, you should use the default system microphone. capturing microphone input using listen() another method that you will learn here is to listen () method used to capture input from the microphone. since you have already created the microphone instance, it is the right time to capture some input. like most of the audiofile class, the microphone is also treated as a context manager. it captures the input through the recognizer class having a block inside it by accepting it as the first argument and then recording input from the source until a moment where the microphone detects silence. to frame this out, let's see how it is applied using the given code. 
  >>> with mic as source:
...     audio = r.listen(source)
...
 once the above code is executed with the block, you should try speaking something into the microphone and wait for some time. the interpreter might prompt to display after some time. once you see ">>>" as returned prompt, it is assured that the recognizer can recognize whatever you say. if the recognizer fails to return the prompt, there might be some ambient noise picking up. you can stop that by pressing ctrl+c to prompt back. to adjust the noise prevailing in your speech, you may need to use the same method of adjust_for_ambient_noise() of the recognizer class. since the microphone input is unpredictable compared to the audio file, it is always a good idea to always do these while listening to the microphone input. to get precise and noise-free output, you can try it with the listen() method as shown. 
  >>> with mic as source:
...     r.adjust_for_ambient_noise(source)
...     audio = r.listen(source)
...
 when the run the above code, wait for few seconds so that the adjust_for_ambient noise () method does its tasks. after the code is compiled and run, try speaking something into the microphone and wait for the interpreter to recognize the speech. if it recognizes and returns the prompt, it is working fine. you can also use the duration keyword and try to use it again for getting a particular frame of the speech you want to be recognized. meanwhile, the speechrecognizer documentation recommends using the duration keyword if the duration keyword has duration of 0.5 or less. you might also find that the duration keyword is not used in some cases, and hence one is used as the default value for generating better results. also, it is notably possible that the minimum value is dependent on the input by the microphone's environment. hence, the duration of one second is preferably considered best for this kind of task. unrecognizable speech with thebcodebase, you have created some tangible code in the interpreter using the microphone to put some unintelligible noises. it is bound that you may receive an error like this. 
  traceback (most recent call last):
  file "<stdin>", line 1, in <module>
  file 

"/home/david/real_python/speech_recognition_primer/venv/lib/pyth
on3.5/site-packages/speech_recognition/__init__.py", line 858, in recognize_google
if not isinstance(actual_result, dict) or 
len(actual_result.get("alternative", [])) == 0: raise 
unknownvalueerror()
speech_recognition.unknownvalueerror
 this error is because of the unrecognized nature of the speech captured through the microphone as input, and hence the api codebase is not advanced enough to transcribe these short grunt noises or vocal sounds. there might also be the case that the interpreter may prompt by recognizing the current input and displaying something not even close to what is captured through the microphone. hence, the activities like clapping, clicks, or other bars might raise an exception or no correct output, respectively. summary in this long tutorial about speech recognition in python, you learned how the schedule works from scratch. you covered from conceptual knowledge to hands-on experience in creating a real-time and simple python speech recognizer that can hear your speech and display it in the textual format on the console. you also learned some of the critical methods to deal with the issue that commonly occurred while using the speechrecognizer package and learned how to rectify these issues. python being widely-used programming and scripting language covers most speech recognition applications because of its ambient libraries and frameworks that display its ability to handle critical problems with just a few lines of easy and readable codes. next topicyield vs return in python ? prev next ? for videos join our youtube channel: join now feedback send your feedback to [email protected] help others, please share learn latest tutorials splunk spss swagger transact-sql tumblr reactjs regex reinforcement learning r programming rxjs react native python design patterns python pillow python turtle keras preparation aptitude reasoning verbal ability interview questions company questions trending technologies artificial intelligence aws selenium cloud computing hadoop reactjs data science angular 7 blockchain git machine learning devops b.tech / mca dbms data structures daa operating system computer network compiler design computer organization discrete mathematics ethical hacking computer graphics software engineering web technology cyber security automata c programming c++ java .net python programs control system data mining data warehouse javatpoint services javatpoint offers too many high quality services. mail us on [email protected], to get more information about given services. website designing website development java development php development wordpress graphic designing logo digital marketing on page and off page seo ppc content development corporate training classroom and online training data entry training for college campus javatpoint offers college campus training on core java, advance java, .net, android, hadoop, php, web technology and python. please mail your requirement at [email protected] duration: 1 week to 2 week like/subscribe us for latest updates or newsletter learn tutorialslearn javalearn data structureslearn c programminglearn c++ tutoriallearn c# tutoriallearn php tutoriallearn html tutoriallearn javascript tutoriallearn jquery tutoriallearn spring tutorial our websitesjavatpoint.comhindi100.comlyricsia.comquoteperson.comjobandplacement.com our services website development android development website designing digital marketing summer training industrial training college campus training contact address: g-13, 2nd floor, sec-3 noida, up, 201301, india contact no: 0120-4256464, 9990449935contact us subscribe us privacy policysitemap about me ? copyright 2011-2021 www.javatpoint.com. all rights reserved. developed by javatpoint.
